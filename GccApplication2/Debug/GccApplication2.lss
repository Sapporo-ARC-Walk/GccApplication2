
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000069c  00800200  00002dd6  00002e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039e  0080089c  0080089c  00003506  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c74  00000000  00000000  00003c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c35  00000000  00000000  00006883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a1b  00000000  00000000  000074b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000080c  00000000  00000000  00008ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c8c  00000000  00000000  000096e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a43  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  0000bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c0       	rjmp	.+262    	; 0x108 <__ctors_end>
       2:	00 00       	nop
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c4       	rjmp	.+2180   	; 0x8ea <__vector_25>
      66:	00 00       	nop
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c0       	rjmp	.+200    	; 0x14a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c0       	rjmp	.+188    	; 0x14a <__bad_interrupt>
      8e:	00 00       	nop
      90:	31 c5       	rjmp	.+2658   	; 0xaf4 <__vector_36>
      92:	00 00       	nop
      94:	5a c0       	rjmp	.+180    	; 0x14a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c0       	rjmp	.+176    	; 0x14a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	56 c0       	rjmp	.+172    	; 0x14a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	54 c0       	rjmp	.+168    	; 0x14a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c0       	rjmp	.+164    	; 0x14a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c0       	rjmp	.+160    	; 0x14a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c0       	rjmp	.+156    	; 0x14a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c0       	rjmp	.+152    	; 0x14a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c0       	rjmp	.+148    	; 0x14a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c0       	rjmp	.+144    	; 0x14a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c0       	rjmp	.+140    	; 0x14a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c0       	rjmp	.+136    	; 0x14a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c0       	rjmp	.+132    	; 0x14a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c0       	rjmp	.+128    	; 0x14a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	03 6e       	ori	r16, 0xE3	; 227
      ce:	db 36       	cpi	r29, 0x6B	; 107
      d0:	3d 9a       	sbi	0x07, 5	; 7
      d2:	99 99       	sbic	0x13, 1	; 19
      d4:	99 3d       	cpi	r25, 0xD9	; 217
      d6:	ab aa       	std	Y+51, r10	; 0x33
      d8:	aa 2a       	or	r10, r26
      da:	3e 00       	.word	0x003e	; ????
      dc:	00 00       	nop
      de:	80 3f       	cpi	r24, 0xF0	; 240
      e0:	07 2c       	mov	r0, r7
      e2:	7a a5       	ldd	r23, Y+42	; 0x2a
      e4:	ba 6c       	ori	r27, 0xCA	; 202
      e6:	c5 90       	lpm	r12, Z+
      e8:	da 3b       	cpi	r29, 0xBA	; 186
      ea:	93 65       	ori	r25, 0x53	; 83
      ec:	fc 8b       	std	Y+20, r31	; 0x14
      ee:	bc 53       	subi	r27, 0x3C	; 60
      f0:	f8 10       	cpse	r15, r8
      f2:	fd 3c       	cpi	r31, 0xCD	; 205
      f4:	56 92       	lac	Z, r5
      f6:	83 4d       	sbci	r24, 0xD3	; 211
      f8:	bd 87       	std	Y+13, r27	; 0x0d
      fa:	9d 3a       	cpi	r25, 0xAD	; 173
      fc:	b6 3d       	cpi	r27, 0xD6	; 214
      fe:	cb c9       	rjmp	.-3178   	; 0xfffff496 <__eeprom_end+0xff7ef496>
     100:	bf 5b       	subi	r27, 0xBF	; 191
     102:	be 73       	andi	r27, 0x3E	; 62
     104:	da 0f       	add	r29, r26
     106:	c9 3f       	cpi	r28, 0xF9	; 249

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d1 e2       	ldi	r29, 0x21	; 33
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0c bf       	out	0x3c, r16	; 60

00000118 <__do_copy_data>:
     118:	18 e0       	ldi	r17, 0x08	; 8
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b2 e0       	ldi	r27, 0x02	; 2
     11e:	e6 ed       	ldi	r30, 0xD6	; 214
     120:	fd e2       	ldi	r31, 0x2D	; 45
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0b bf       	out	0x3b, r16	; 59
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
     128:	07 90       	elpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	ac 39       	cpi	r26, 0x9C	; 156
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
     132:	2c e0       	ldi	r18, 0x0C	; 12
     134:	ac e9       	ldi	r26, 0x9C	; 156
     136:	b8 e0       	ldi	r27, 0x08	; 8
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	aa 33       	cpi	r26, 0x3A	; 58
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 b6 0b 	call	0x176c	; 0x176c <main>
     146:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <dxl_get_result>:
     14c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     150:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     154:	08 95       	ret

00000156 <dxl_set_txpacket_id>:
     156:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <__data_end+0x2>
     15a:	08 95       	ret

0000015c <dxl_set_txpacket_instruction>:
     15c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     160:	08 95       	ret

00000162 <dxl_set_txpacket_parameter>:
     162:	fc 01       	movw	r30, r24
     164:	e4 56       	subi	r30, 0x64	; 100
     166:	f7 4f       	sbci	r31, 0xF7	; 247
     168:	65 83       	std	Z+5, r22	; 0x05
     16a:	08 95       	ret

0000016c <dxl_set_txpacket_length>:
     16c:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     170:	08 95       	ret

00000172 <dxl_get_rxpacket_error>:
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	90 91 40 09 	lds	r25, 0x0940	; 0x800940 <gbStatusPacket+0x4>
     17a:	98 23       	and	r25, r24
     17c:	11 f0       	breq	.+4      	; 0x182 <dxl_get_rxpacket_error+0x10>
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	c9 01       	movw	r24, r18
     184:	08 95       	ret

00000186 <dxl_get_rxpacket_length>:
     186:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <gbStatusPacket+0x3>
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	08 95       	ret

0000018e <dxl_get_rxpacket_parameter>:
     18e:	fc 01       	movw	r30, r24
     190:	e4 5c       	subi	r30, 0xC4	; 196
     192:	f6 4f       	sbci	r31, 0xF6	; 246
     194:	85 81       	ldd	r24, Z+5	; 0x05
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	08 95       	ret

0000019a <dxl_makeword>:
     19a:	36 2f       	mov	r19, r22
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	28 0f       	add	r18, r24
     1a0:	39 1f       	adc	r19, r25
     1a2:	c9 01       	movw	r24, r18
     1a4:	08 95       	ret

000001a6 <dxl_get_lowbyte>:
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	c9 01       	movw	r24, r18
     1ac:	08 95       	ret

000001ae <dxl_get_highbyte>:
     1ae:	80 70       	andi	r24, 0x00	; 0
     1b0:	89 2f       	mov	r24, r25
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <dxl_rx_packet>:
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     1c2:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     1c6:	89 2b       	or	r24, r25
     1c8:	09 f4       	brne	.+2      	; 0x1cc <dxl_rx_packet+0x16>
     1ca:	b8 c0       	rjmp	.+368    	; 0x33c <dxl_rx_packet+0x186>
     1cc:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <__data_end+0x2>
     1d0:	8e 3f       	cpi	r24, 0xFE	; 254
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <dxl_rx_packet+0x20>
     1d4:	a9 c0       	rjmp	.+338    	; 0x328 <dxl_rx_packet+0x172>
     1d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     1da:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     1de:	89 2b       	or	r24, r25
     1e0:	29 f4       	brne	.+10     	; 0x1ec <dxl_rx_packet+0x36>
     1e2:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <gbRxGetLength>
     1e6:	86 e0       	ldi	r24, 0x06	; 6
     1e8:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <gbRxPacketLength>
     1ec:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <gbRxGetLength>
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	60 91 82 09 	lds	r22, 0x0982	; 0x800982 <gbRxPacketLength>
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	68 1b       	sub	r22, r24
     1fa:	79 0b       	sbc	r23, r25
     1fc:	84 5c       	subi	r24, 0xC4	; 196
     1fe:	96 4f       	sbci	r25, 0xF6	; 246
     200:	49 d3       	rcall	.+1682   	; 0x894 <dxl_hal_rx>
     202:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <gbRxGetLength>
     206:	98 0f       	add	r25, r24
     208:	90 93 83 09 	sts	0x0983, r25	; 0x800983 <gbRxGetLength>
     20c:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <gbRxPacketLength>
     210:	98 17       	cp	r25, r24
     212:	18 f4       	brcc	.+6      	; 0x21a <dxl_rx_packet+0x64>
     214:	4a d2       	rcall	.+1172   	; 0x6aa <dxl_hal_timeout>
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	71 f0       	breq	.+28     	; 0x236 <dxl_rx_packet+0x80>
     21a:	70 91 83 09 	lds	r23, 0x0983	; 0x800983 <gbRxGetLength>
     21e:	47 2f       	mov	r20, r23
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	da 01       	movw	r26, r20
     224:	11 97       	sbiw	r26, 0x01	; 1
     226:	8a 01       	movw	r16, r20
     228:	02 50       	subi	r16, 0x02	; 2
     22a:	10 40       	sbci	r17, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	ed 01       	movw	r28, r26
     230:	c4 5c       	subi	r28, 0xC4	; 196
     232:	d6 4f       	sbci	r29, 0xF6	; 246
     234:	18 c0       	rjmp	.+48     	; 0x266 <dxl_rx_packet+0xb0>
     236:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <gbRxGetLength>
     23a:	88 23       	and	r24, r24
     23c:	09 f0       	breq	.+2      	; 0x240 <dxl_rx_packet+0x8a>
     23e:	71 c0       	rjmp	.+226    	; 0x322 <dxl_rx_packet+0x16c>
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	73 c0       	rjmp	.+230    	; 0x32c <dxl_rx_packet+0x176>
     246:	f9 01       	movw	r30, r18
     248:	e4 5c       	subi	r30, 0xC4	; 196
     24a:	f6 4f       	sbci	r31, 0xF6	; 246
     24c:	80 81       	ld	r24, Z
     24e:	8f 3f       	cpi	r24, 0xFF	; 255
     250:	19 f4       	brne	.+6      	; 0x258 <dxl_rx_packet+0xa2>
     252:	81 81       	ldd	r24, Z+1	; 0x01
     254:	8f 3f       	cpi	r24, 0xFF	; 255
     256:	61 f0       	breq	.+24     	; 0x270 <dxl_rx_packet+0xba>
     258:	20 17       	cp	r18, r16
     25a:	31 07       	cpc	r19, r17
     25c:	19 f4       	brne	.+6      	; 0x264 <dxl_rx_packet+0xae>
     25e:	88 81       	ld	r24, Y
     260:	8f 3f       	cpi	r24, 0xFF	; 255
     262:	31 f0       	breq	.+12     	; 0x270 <dxl_rx_packet+0xba>
     264:	6f 5f       	subi	r22, 0xFF	; 255
     266:	26 2f       	mov	r18, r22
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	2a 17       	cp	r18, r26
     26c:	3b 07       	cpc	r19, r27
     26e:	5c f3       	brlt	.-42     	; 0x246 <dxl_rx_packet+0x90>
     270:	66 23       	and	r22, r22
     272:	a1 f0       	breq	.+40     	; 0x29c <dxl_rx_packet+0xe6>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	42 1b       	sub	r20, r18
     278:	53 0b       	sbc	r21, r19
     27a:	08 c0       	rjmp	.+16     	; 0x28c <dxl_rx_packet+0xd6>
     27c:	e4 5c       	subi	r30, 0xC4	; 196
     27e:	f6 4f       	sbci	r31, 0xF6	; 246
     280:	df 01       	movw	r26, r30
     282:	a2 0f       	add	r26, r18
     284:	b3 1f       	adc	r27, r19
     286:	8c 91       	ld	r24, X
     288:	80 83       	st	Z, r24
     28a:	9f 5f       	subi	r25, 0xFF	; 255
     28c:	e9 2f       	mov	r30, r25
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	e4 17       	cp	r30, r20
     292:	f5 07       	cpc	r31, r21
     294:	9c f3       	brlt	.-26     	; 0x27c <dxl_rx_packet+0xc6>
     296:	76 1b       	sub	r23, r22
     298:	70 93 83 09 	sts	0x0983, r23	; 0x800983 <gbRxGetLength>
     29c:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <gbRxGetLength>
     2a0:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <gbRxPacketLength>
     2a4:	28 17       	cp	r18, r24
     2a6:	28 f1       	brcs	.+74     	; 0x2f2 <dxl_rx_packet+0x13c>
     2a8:	90 91 9e 08 	lds	r25, 0x089E	; 0x80089e <__data_end+0x2>
     2ac:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <gbStatusPacket+0x2>
     2b0:	98 17       	cp	r25, r24
     2b2:	b9 f5       	brne	.+110    	; 0x322 <dxl_rx_packet+0x16c>
     2b4:	60 91 3f 09 	lds	r22, 0x093F	; 0x80093f <gbStatusPacket+0x3>
     2b8:	6c 5f       	subi	r22, 0xFC	; 252
     2ba:	60 93 82 09 	sts	0x0982, r22	; 0x800982 <gbRxPacketLength>
     2be:	26 17       	cp	r18, r22
     2c0:	88 f4       	brcc	.+34     	; 0x2e4 <dxl_rx_packet+0x12e>
     2c2:	82 2f       	mov	r24, r18
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	68 1b       	sub	r22, r24
     2ca:	79 0b       	sbc	r23, r25
     2cc:	84 5c       	subi	r24, 0xC4	; 196
     2ce:	96 4f       	sbci	r25, 0xF6	; 246
     2d0:	e1 d2       	rcall	.+1474   	; 0x894 <dxl_hal_rx>
     2d2:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <gbRxGetLength>
     2d6:	98 0f       	add	r25, r24
     2d8:	90 93 83 09 	sts	0x0983, r25	; 0x800983 <gbRxGetLength>
     2dc:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <gbRxPacketLength>
     2e0:	98 17       	cp	r25, r24
     2e2:	38 f0       	brcs	.+14     	; 0x2f2 <dxl_rx_packet+0x13c>
     2e4:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <gbStatusPacket+0x3>
     2e8:	a8 2f       	mov	r26, r24
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0c c0       	rjmp	.+24     	; 0x30a <dxl_rx_packet+0x154>
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2fa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2fe:	1e c0       	rjmp	.+60     	; 0x33c <dxl_rx_packet+0x186>
     300:	e4 5c       	subi	r30, 0xC4	; 196
     302:	f6 4f       	sbci	r31, 0xF6	; 246
     304:	82 81       	ldd	r24, Z+2	; 0x02
     306:	98 0f       	add	r25, r24
     308:	2f 5f       	subi	r18, 0xFF	; 255
     30a:	e2 2f       	mov	r30, r18
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ae 17       	cp	r26, r30
     310:	bf 07       	cpc	r27, r31
     312:	b4 f7       	brge	.-20     	; 0x300 <dxl_rx_packet+0x14a>
     314:	a4 5c       	subi	r26, 0xC4	; 196
     316:	b6 4f       	sbci	r27, 0xF6	; 246
     318:	90 95       	com	r25
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	8c 91       	ld	r24, X
     31e:	89 17       	cp	r24, r25
     320:	19 f0       	breq	.+6      	; 0x328 <dxl_rx_packet+0x172>
     322:	87 e0       	ldi	r24, 0x07	; 7
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 c0       	rjmp	.+4      	; 0x32c <dxl_rx_packet+0x176>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     330:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     334:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <giBusUsing+0x1>
     338:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <giBusUsing>
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <dxl_tx_packet>:
     346:	1f 93       	push	r17
     348:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     34c:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	09 f4       	brne	.+2      	; 0x356 <dxl_tx_packet+0x10>
     354:	5d c0       	rjmp	.+186    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <giBusUsing+0x1>
     35e:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <giBusUsing>
     362:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <__data_end+0x3>
     366:	89 39       	cpi	r24, 0x99	; 153
     368:	40 f4       	brcc	.+16     	; 0x37a <dxl_tx_packet+0x34>
     36a:	90 91 a0 08 	lds	r25, 0x08A0	; 0x8008a0 <__data_end+0x4>
     36e:	89 2f       	mov	r24, r25
     370:	81 50       	subi	r24, 0x01	; 1
     372:	86 30       	cpi	r24, 0x06	; 6
     374:	28 f0       	brcs	.+10     	; 0x380 <dxl_tx_packet+0x3a>
     376:	93 38       	cpi	r25, 0x83	; 131
     378:	19 f0       	breq	.+6      	; 0x380 <dxl_tx_packet+0x3a>
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	2f c0       	rjmp	.+94     	; 0x3de <dxl_tx_packet+0x98>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <__data_end>
     386:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <__data_end+0x1>
     38a:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <__data_end+0x3>
     38e:	a8 2f       	mov	r26, r24
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <dxl_tx_packet+0x5c>
     398:	e4 56       	subi	r30, 0x64	; 100
     39a:	f7 4f       	sbci	r31, 0xF7	; 247
     39c:	82 81       	ldd	r24, Z+2	; 0x02
     39e:	98 0f       	add	r25, r24
     3a0:	2f 5f       	subi	r18, 0xFF	; 255
     3a2:	e2 2f       	mov	r30, r18
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ae 17       	cp	r26, r30
     3a8:	bf 07       	cpc	r27, r31
     3aa:	b4 f7       	brge	.-20     	; 0x398 <dxl_tx_packet+0x52>
     3ac:	a4 56       	subi	r26, 0x64	; 100
     3ae:	b7 4f       	sbci	r27, 0xF7	; 247
     3b0:	90 95       	com	r25
     3b2:	13 96       	adiw	r26, 0x03	; 3
     3b4:	9c 93       	st	X, r25
     3b6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3ba:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3be:	06 97       	sbiw	r24, 0x06	; 6
     3c0:	02 97       	sbiw	r24, 0x02	; 2
     3c2:	08 f4       	brcc	.+2      	; 0x3c6 <dxl_tx_packet+0x80>
     3c4:	38 d1       	rcall	.+624    	; 0x636 <dxl_hal_clear>
     3c6:	10 91 9f 08 	lds	r17, 0x089F	; 0x80089f <__data_end+0x3>
     3ca:	1c 5f       	subi	r17, 0xFC	; 252
     3cc:	8c e9       	ldi	r24, 0x9C	; 156
     3ce:	98 e0       	ldi	r25, 0x08	; 8
     3d0:	61 2f       	mov	r22, r17
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	35 d1       	rcall	.+618    	; 0x640 <dxl_hal_tx>
     3d6:	18 17       	cp	r17, r24
     3d8:	59 f0       	breq	.+22     	; 0x3f0 <dxl_tx_packet+0xaa>
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     3e2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     3e6:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <giBusUsing+0x1>
     3ea:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <giBusUsing>
     3ee:	10 c0       	rjmp	.+32     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     3f0:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__data_end+0x4>
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	29 f4       	brne	.+10     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     3f8:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <__data_end+0x6>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	06 96       	adiw	r24, 0x06	; 6
     400:	02 c0       	rjmp	.+4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     402:	86 e0       	ldi	r24, 0x06	; 6
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	40 d1       	rcall	.+640    	; 0x688 <dxl_hal_set_timeout>
     408:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
     40c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     410:	1f 91       	pop	r17
     412:	08 95       	ret

00000414 <dxl_txrx_packet>:
     414:	98 df       	rcall	.-208    	; 0x346 <dxl_tx_packet>
     416:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     41a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     41e:	89 2b       	or	r24, r25
     420:	39 f4       	brne	.+14     	; 0x430 <dxl_txrx_packet+0x1c>
     422:	c9 de       	rcall	.-622    	; 0x1b6 <dxl_rx_packet>
     424:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     428:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     42c:	05 97       	sbiw	r24, 0x05	; 5
     42e:	c9 f3       	breq	.-14     	; 0x422 <dxl_txrx_packet+0xe>
     430:	08 95       	ret

00000432 <dxl_write_word>:
     432:	28 2f       	mov	r18, r24
     434:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     438:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     43c:	89 2b       	or	r24, r25
     43e:	91 f4       	brne	.+36     	; 0x464 <dxl_write_word+0x32>
     440:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <__data_end+0x2>
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     44a:	60 93 a1 08 	sts	0x08A1, r22	; 0x8008a1 <__data_end+0x5>
     44e:	ca 01       	movw	r24, r20
     450:	40 93 a2 08 	sts	0x08A2, r20	; 0x8008a2 <__data_end+0x6>
     454:	80 70       	andi	r24, 0x00	; 0
     456:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <__data_end+0x7>
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     460:	d9 cf       	rjmp	.-78     	; 0x414 <dxl_txrx_packet>
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_write_word+0x32>

00000466 <dxl_read_word>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     46c:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     470:	89 2b       	or	r24, r25
     472:	b1 f4       	brne	.+44     	; 0x4a0 <dxl_read_word+0x3a>
     474:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <__data_end+0x2>
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     47e:	60 93 a1 08 	sts	0x08A1, r22	; 0x8008a1 <__data_end+0x5>
     482:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <__data_end+0x6>
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     48c:	c3 df       	rcall	.-122    	; 0x414 <dxl_txrx_packet>
     48e:	30 91 42 09 	lds	r19, 0x0942	; 0x800942 <gbStatusPacket+0x6>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	80 91 41 09 	lds	r24, 0x0941	; 0x800941 <gbStatusPacket+0x5>
     498:	28 0f       	add	r18, r24
     49a:	31 1d       	adc	r19, r1
     49c:	c9 01       	movw	r24, r18
     49e:	08 95       	ret
     4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <dxl_read_word+0x3a>

000004a2 <dxl_write_byte>:
     4a2:	28 2f       	mov	r18, r24
     4a4:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     4a8:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     4ac:	89 2b       	or	r24, r25
     4ae:	71 f4       	brne	.+28     	; 0x4cc <dxl_write_byte+0x2a>
     4b0:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <__data_end+0x2>
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     4ba:	60 93 a1 08 	sts	0x08A1, r22	; 0x8008a1 <__data_end+0x5>
     4be:	40 93 a2 08 	sts	0x08A2, r20	; 0x8008a2 <__data_end+0x6>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     4c8:	a5 cf       	rjmp	.-182    	; 0x414 <dxl_txrx_packet>
     4ca:	08 95       	ret
     4cc:	ff cf       	rjmp	.-2      	; 0x4cc <dxl_write_byte+0x2a>

000004ce <dxl_read_byte>:
     4ce:	28 2f       	mov	r18, r24
     4d0:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     4d4:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     4d8:	89 2b       	or	r24, r25
     4da:	91 f4       	brne	.+36     	; 0x500 <dxl_read_byte+0x32>
     4dc:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <__data_end+0x2>
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     4e6:	60 93 a1 08 	sts	0x08A1, r22	; 0x8008a1 <__data_end+0x5>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <__data_end+0x6>
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     4f6:	8e df       	rcall	.-228    	; 0x414 <dxl_txrx_packet>
     4f8:	80 91 41 09 	lds	r24, 0x0941	; 0x800941 <gbStatusPacket+0x5>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	08 95       	ret
     500:	ff cf       	rjmp	.-2      	; 0x500 <dxl_read_byte+0x32>

00000502 <dxl_ping>:
     502:	28 2f       	mov	r18, r24
     504:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <giBusUsing>
     508:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <giBusUsing+0x1>
     50c:	89 2b       	or	r24, r25
     50e:	51 f4       	brne	.+20     	; 0x524 <dxl_ping+0x22>
     510:	20 93 9e 08 	sts	0x089E, r18	; 0x80089e <__data_end+0x2>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__data_end+0x4>
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__data_end+0x3>
     520:	79 cf       	rjmp	.-270    	; 0x414 <dxl_txrx_packet>
     522:	08 95       	ret
     524:	ff cf       	rjmp	.-2      	; 0x524 <dxl_ping+0x22>

00000526 <dxl_terminate>:
     526:	86 c0       	rjmp	.+268    	; 0x634 <dxl_hal_close>
     528:	08 95       	ret

0000052a <dxl_initialize>:
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	8c 01       	movw	r16, r24
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	88 27       	eor	r24, r24
     536:	77 fd       	sbrc	r23, 7
     538:	80 95       	com	r24
     53a:	98 2f       	mov	r25, r24
     53c:	0e 94 28 10 	call	0x2050	; 0x2050 <__floatsisf>
     540:	9b 01       	movw	r18, r22
     542:	ac 01       	movw	r20, r24
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	74 e2       	ldi	r23, 0x24	; 36
     548:	84 ef       	ldi	r24, 0xF4	; 244
     54a:	99 e4       	ldi	r25, 0x49	; 73
     54c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     550:	ab 01       	movw	r20, r22
     552:	bc 01       	movw	r22, r24
     554:	c8 01       	movw	r24, r16
     556:	15 d0       	rcall	.+42     	; 0x582 <dxl_hal_open>
     558:	89 2b       	or	r24, r25
     55a:	19 f4       	brne	.+6      	; 0x562 <dxl_initialize+0x38>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	0c c0       	rjmp	.+24     	; 0x57a <dxl_initialize+0x50>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     56a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     56e:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <giBusUsing+0x1>
     572:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <giBusUsing>
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	c9 01       	movw	r24, r18
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <dxl_hal_open>:
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	7a 01       	movw	r14, r20
     58c:	8b 01       	movw	r16, r22
     58e:	82 e4       	ldi	r24, 0x42	; 66
     590:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     594:	88 e9       	ldi	r24, 0x98	; 152
     596:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	74 e2       	ldi	r23, 0x24	; 36
     5a4:	84 ef       	ldi	r24, 0xF4	; 244
     5a6:	99 e4       	ldi	r25, 0x49	; 73
     5a8:	a8 01       	movw	r20, r16
     5aa:	97 01       	movw	r18, r14
     5ac:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     5b0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
     5b4:	61 50       	subi	r22, 0x01	; 1
     5b6:	70 40       	sbci	r23, 0x00	; 0
     5b8:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     5bc:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	74 e2       	ldi	r23, 0x24	; 36
     5c4:	84 e7       	ldi	r24, 0x74	; 116
     5c6:	99 e4       	ldi	r25, 0x49	; 73
     5c8:	a8 01       	movw	r20, r16
     5ca:	97 01       	movw	r18, r14
     5cc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e4       	ldi	r20, 0x40	; 64
     5d6:	51 e4       	ldi	r21, 0x41	; 65
     5d8:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3>
     5dc:	60 93 28 0c 	sts	0x0C28, r22	; 0x800c28 <gfByteTransTime_us>
     5e0:	70 93 29 0c 	sts	0x0C29, r23	; 0x800c29 <gfByteTransTime_us+0x1>
     5e4:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <gfByteTransTime_us+0x2>
     5e8:	90 93 2b 0c 	sts	0x0C2B, r25	; 0x800c2b <gfByteTransTime_us+0x3>
     5ec:	20 91 28 0c 	lds	r18, 0x0C28	; 0x800c28 <gfByteTransTime_us>
     5f0:	30 91 29 0c 	lds	r19, 0x0C29	; 0x800c29 <gfByteTransTime_us+0x1>
     5f4:	40 91 2a 0c 	lds	r20, 0x0C2A	; 0x800c2a <gfByteTransTime_us+0x2>
     5f8:	50 91 2b 0c 	lds	r21, 0x0C2B	; 0x800c2b <gfByteTransTime_us+0x3>
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8a e7       	ldi	r24, 0x7A	; 122
     602:	93 e4       	ldi	r25, 0x43	; 67
     604:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     608:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
     60c:	70 93 27 0c 	sts	0x0C27, r23	; 0x800c27 <gwReturnDelayCountNum+0x1>
     610:	60 93 26 0c 	sts	0x0C26, r22	; 0x800c26 <gwReturnDelayCountNum>
     614:	72 98       	cbi	0x0e, 2	; 14
     616:	73 9a       	sbi	0x0e, 3	; 14
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     61e:	10 92 86 0a 	sts	0x0A86, r1	; 0x800a86 <gbDxlBufferHead>
     622:	10 92 87 0a 	sts	0x0A87, r1	; 0x800a87 <gbDxlBufferTail>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	08 95       	ret

00000634 <dxl_hal_close>:
     634:	08 95       	ret

00000636 <dxl_hal_clear>:
     636:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     63a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <gbDxlBufferHead>
     63e:	08 95       	ret

00000640 <dxl_hal_tx>:
     640:	ac 01       	movw	r20, r24
     642:	f8 94       	cli
     644:	73 98       	cbi	0x0e, 3	; 14
     646:	72 9a       	sbi	0x0e, 2	; 14
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	11 c0       	rjmp	.+34     	; 0x670 <dxl_hal_tx+0x30>
     64e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     652:	85 ff       	sbrs	r24, 5
     654:	fc cf       	rjmp	.-8      	; 0x64e <dxl_hal_tx+0xe>
     656:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     660:	fa 01       	movw	r30, r20
     662:	e2 0f       	add	r30, r18
     664:	f3 1f       	adc	r31, r19
     666:	80 81       	ld	r24, Z
     668:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	26 17       	cp	r18, r22
     672:	37 07       	cpc	r19, r23
     674:	64 f3       	brlt	.-40     	; 0x64e <dxl_hal_tx+0xe>
     676:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     67a:	86 ff       	sbrs	r24, 6
     67c:	fc cf       	rjmp	.-8      	; 0x676 <dxl_hal_tx+0x36>
     67e:	72 98       	cbi	0x0e, 2	; 14
     680:	73 9a       	sbi	0x0e, 3	; 14
     682:	78 94       	sei
     684:	c9 01       	movw	r24, r18
     686:	08 95       	ret

00000688 <dxl_hal_set_timeout>:
     688:	10 92 2f 0c 	sts	0x0C2F, r1	; 0x800c2f <gwCountNum+0x1>
     68c:	10 92 2e 0c 	sts	0x0C2E, r1	; 0x800c2e <gwCountNum>
     690:	20 91 26 0c 	lds	r18, 0x0C26	; 0x800c26 <gwReturnDelayCountNum>
     694:	30 91 27 0c 	lds	r19, 0x0C27	; 0x800c27 <gwReturnDelayCountNum+0x1>
     698:	26 5f       	subi	r18, 0xF6	; 246
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	28 0f       	add	r18, r24
     69e:	39 1f       	adc	r19, r25
     6a0:	30 93 2d 0c 	sts	0x0C2D, r19	; 0x800c2d <gwTimeoutCountNum+0x1>
     6a4:	20 93 2c 0c 	sts	0x0C2C, r18	; 0x800c2c <gwTimeoutCountNum>
     6a8:	08 95       	ret

000006aa <dxl_hal_timeout>:
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <gwCountNum>
     6be:	90 91 2f 0c 	lds	r25, 0x0C2F	; 0x800c2f <gwCountNum+0x1>
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	90 93 2f 0c 	sts	0x0C2F, r25	; 0x800c2f <gwCountNum+0x1>
     6c8:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <gwCountNum>
     6cc:	20 91 2e 0c 	lds	r18, 0x0C2E	; 0x800c2e <gwCountNum>
     6d0:	30 91 2f 0c 	lds	r19, 0x0C2F	; 0x800c2f <gwCountNum+0x1>
     6d4:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <gwTimeoutCountNum>
     6d8:	90 91 2d 0c 	lds	r25, 0x0C2D	; 0x800c2d <gwTimeoutCountNum+0x1>
     6dc:	82 17       	cp	r24, r18
     6de:	93 07       	cpc	r25, r19
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <dxl_hal_timeout+0x3e>
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	74 c0       	rjmp	.+232    	; 0x7d0 <dxl_hal_timeout+0x126>
     6e8:	a0 90 28 0c 	lds	r10, 0x0C28	; 0x800c28 <gfByteTransTime_us>
     6ec:	b0 90 29 0c 	lds	r11, 0x0C29	; 0x800c29 <gfByteTransTime_us+0x1>
     6f0:	c0 90 2a 0c 	lds	r12, 0x0C2A	; 0x800c2a <gfByteTransTime_us+0x2>
     6f4:	d0 90 2b 0c 	lds	r13, 0x0C2B	; 0x800c2b <gfByteTransTime_us+0x3>
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6f8:	c6 01       	movw	r24, r12
     6fa:	b5 01       	movw	r22, r10
     6fc:	2b ea       	ldi	r18, 0xAB	; 171
     6fe:	3a ea       	ldi	r19, 0xAA	; 170
     700:	4a ea       	ldi	r20, 0xAA	; 170
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3>
     708:	7b 01       	movw	r14, r22
     70a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
     718:	88 23       	and	r24, r24
     71a:	14 f4       	brge	.+4      	; 0x720 <dxl_hal_timeout+0x76>
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	54 c0       	rjmp	.+168    	; 0x7c8 <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     720:	c8 01       	movw	r24, r16
     722:	b7 01       	movw	r22, r14
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	4f e7       	ldi	r20, 0x7F	; 127
     72a:	53 e4       	ldi	r21, 0x43	; 67
     72c:	0e 94 29 11 	call	0x2252	; 0x2252 <__gesf2>
     730:	18 16       	cp	r1, r24
     732:	0c f0       	brlt	.+2      	; 0x736 <dxl_hal_timeout+0x8c>
     734:	45 c0       	rjmp	.+138    	; 0x7c0 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     736:	c6 01       	movw	r24, r12
     738:	b5 01       	movw	r22, r10
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4a e7       	ldi	r20, 0x7A	; 122
     740:	54 e4       	ldi	r21, 0x44	; 68
     742:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     746:	5b 01       	movw	r10, r22
     748:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	4a e7       	ldi	r20, 0x7A	; 122
     750:	55 e4       	ldi	r21, 0x45	; 69
     752:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3>
     756:	7b 01       	movw	r14, r22
     758:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e8       	ldi	r20, 0x80	; 128
     760:	5f e3       	ldi	r21, 0x3F	; 63
     762:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__cmpsf2>
     766:	88 23       	and	r24, r24
     768:	1c f4       	brge	.+6      	; 0x770 <dxl_hal_timeout+0xc6>
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	24 c0       	rjmp	.+72     	; 0x7b8 <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	3f ef       	ldi	r19, 0xFF	; 255
     778:	4f e7       	ldi	r20, 0x7F	; 127
     77a:	57 e4       	ldi	r21, 0x47	; 71
     77c:	0e 94 29 11 	call	0x2252	; 0x2252 <__gesf2>
     780:	18 16       	cp	r1, r24
     782:	b4 f4       	brge	.+44     	; 0x7b0 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     784:	c6 01       	movw	r24, r12
     786:	b5 01       	movw	r22, r10
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	0e 94 2d 11 	call	0x225a	; 0x225a <__mulsf3>
     794:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     798:	80 e9       	ldi	r24, 0x90	; 144
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	05 c0       	rjmp	.+10     	; 0x7a8 <dxl_hal_timeout+0xfe>
     79e:	fc 01       	movw	r30, r24
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a4:	61 50       	subi	r22, 0x01	; 1
     7a6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	c1 f7       	brne	.-16     	; 0x79e <dxl_hal_timeout+0xf4>
     7ae:	0e c0       	rjmp	.+28     	; 0x7cc <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b0:	c8 01       	movw	r24, r16
     7b2:	b7 01       	movw	r22, r14
     7b4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
     7b8:	cb 01       	movw	r24, r22
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <dxl_hal_timeout+0x110>
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7c0:	c8 01       	movw	r24, r16
     7c2:	b7 01       	movw	r22, r14
     7c4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7c8:	6a 95       	dec	r22
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <dxl_hal_timeout+0x11e>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	c9 01       	movw	r24, r18
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	08 95       	ret

000007e4 <dxl_hal_get_qstate>:
     7e4:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     7e8:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     7ec:	98 17       	cp	r25, r24
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <dxl_hal_get_qstate+0x12>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	17 c0       	rjmp	.+46     	; 0x824 <dxl_hal_get_qstate+0x40>
     7f6:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     7fa:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     7fe:	98 17       	cp	r25, r24
     800:	38 f4       	brcc	.+14     	; 0x810 <dxl_hal_get_qstate+0x2c>
     802:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     806:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     80a:	28 2f       	mov	r18, r24
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	08 c0       	rjmp	.+16     	; 0x820 <dxl_hal_get_qstate+0x3c>
     810:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     814:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     818:	28 2f       	mov	r18, r24
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	20 50       	subi	r18, 0x00	; 0
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	29 1b       	sub	r18, r25
     822:	31 09       	sbc	r19, r1
     824:	c9 01       	movw	r24, r18
     826:	08 95       	ret

00000828 <dxl_hal_put_queue>:
     828:	1f 93       	push	r17
     82a:	18 2f       	mov	r17, r24
     82c:	db df       	rcall	.-74     	; 0x7e4 <dxl_hal_get_qstate>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	91 05       	cpc	r25, r1
     832:	91 f0       	breq	.+36     	; 0x858 <dxl_hal_put_queue+0x30>
     834:	e0 91 87 0a 	lds	r30, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	ea 57       	subi	r30, 0x7A	; 122
     83c:	f6 4f       	sbci	r31, 0xF6	; 246
     83e:	10 83       	st	Z, r17
     840:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     844:	8f 3f       	cpi	r24, 0xFF	; 255
     846:	19 f4       	brne	.+6      	; 0x84e <dxl_hal_put_queue+0x26>
     848:	10 92 87 0a 	sts	0x0A87, r1	; 0x800a87 <gbDxlBufferTail>
     84c:	05 c0       	rjmp	.+10     	; 0x858 <dxl_hal_put_queue+0x30>
     84e:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     852:	8f 5f       	subi	r24, 0xFF	; 255
     854:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <gbDxlBufferTail>
     858:	1f 91       	pop	r17
     85a:	08 95       	ret

0000085c <dxl_hal_get_queue>:
     85c:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     860:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     864:	98 17       	cp	r25, r24
     866:	11 f4       	brne	.+4      	; 0x86c <dxl_hal_get_queue+0x10>
     868:	ef ef       	ldi	r30, 0xFF	; 255
     86a:	12 c0       	rjmp	.+36     	; 0x890 <dxl_hal_get_queue+0x34>
     86c:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ea 57       	subi	r30, 0x7A	; 122
     874:	f6 4f       	sbci	r31, 0xF6	; 246
     876:	e0 81       	ld	r30, Z
     878:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     87c:	8f 3f       	cpi	r24, 0xFF	; 255
     87e:	19 f4       	brne	.+6      	; 0x886 <dxl_hal_get_queue+0x2a>
     880:	10 92 86 0a 	sts	0x0A86, r1	; 0x800a86 <gbDxlBufferHead>
     884:	05 c0       	rjmp	.+10     	; 0x890 <dxl_hal_get_queue+0x34>
     886:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <gbDxlBufferHead>
     890:	8e 2f       	mov	r24, r30
     892:	08 95       	ret

00000894 <dxl_hal_rx>:
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	7c 01       	movw	r14, r24
     8a2:	eb 01       	movw	r28, r22
     8a4:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <gbDxlBufferHead>
     8a8:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <gbDxlBufferTail>
     8ac:	98 17       	cp	r25, r24
     8ae:	19 f4       	brne	.+6      	; 0x8b6 <dxl_hal_rx+0x22>
     8b0:	00 e0       	ldi	r16, 0x00	; 0
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <dxl_hal_rx+0x46>
     8b6:	96 df       	rcall	.-212    	; 0x7e4 <dxl_hal_get_qstate>
     8b8:	8c 01       	movw	r16, r24
     8ba:	c8 17       	cp	r28, r24
     8bc:	d9 07       	cpc	r29, r25
     8be:	0c f4       	brge	.+2      	; 0x8c2 <dxl_hal_rx+0x2e>
     8c0:	8e 01       	movw	r16, r28
     8c2:	c0 e0       	ldi	r28, 0x00	; 0
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <dxl_hal_rx+0x40>
     8c8:	c9 df       	rcall	.-110    	; 0x85c <dxl_hal_get_queue>
     8ca:	f7 01       	movw	r30, r14
     8cc:	ec 0f       	add	r30, r28
     8ce:	fd 1f       	adc	r31, r29
     8d0:	80 83       	st	Z, r24
     8d2:	21 96       	adiw	r28, 0x01	; 1
     8d4:	c0 17       	cp	r28, r16
     8d6:	d1 07       	cpc	r29, r17
     8d8:	bc f3       	brlt	.-18     	; 0x8c8 <dxl_hal_rx+0x34>
     8da:	c8 01       	movw	r24, r16
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <__vector_25>:
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	0b b6       	in	r0, 0x3b	; 59
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     914:	89 df       	rcall	.-238    	; 0x828 <dxl_hal_put_queue>
     916:	ff 91       	pop	r31
     918:	ef 91       	pop	r30
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0b be       	out	0x3b, r0	; 59
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <serial_write>:
     93c:	ac 01       	movw	r20, r24
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	0c c0       	rjmp	.+24     	; 0x95c <serial_write+0x20>
     944:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     948:	85 ff       	sbrs	r24, 5
     94a:	fc cf       	rjmp	.-8      	; 0x944 <serial_write+0x8>
     94c:	fa 01       	movw	r30, r20
     94e:	e2 0f       	add	r30, r18
     950:	f3 1f       	adc	r31, r19
     952:	80 81       	ld	r24, Z
     954:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	26 17       	cp	r18, r22
     95e:	37 07       	cpc	r19, r23
     960:	8c f3       	brlt	.-30     	; 0x944 <serial_write+0x8>
     962:	08 95       	ret

00000964 <serial_read>:
     964:	dc 01       	movw	r26, r24
     966:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     96a:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     96e:	98 17       	cp	r25, r24
     970:	11 f4       	brne	.+4      	; 0x976 <serial_read+0x12>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	08 95       	ret
     976:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     97a:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     97e:	98 17       	cp	r25, r24
     980:	19 f4       	brne	.+6      	; 0x988 <serial_read+0x24>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	17 c0       	rjmp	.+46     	; 0x9b6 <serial_read+0x52>
     988:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     98c:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     990:	98 17       	cp	r25, r24
     992:	38 f4       	brcc	.+14     	; 0x9a2 <serial_read+0x3e>
     994:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     998:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     99c:	28 2f       	mov	r18, r24
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <serial_read+0x4e>
     9a2:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     9a6:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     9aa:	28 2f       	mov	r18, r24
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	20 58       	subi	r18, 0x80	; 128
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	29 1b       	sub	r18, r25
     9b4:	31 09       	sbc	r19, r1
     9b6:	a9 01       	movw	r20, r18
     9b8:	62 17       	cp	r22, r18
     9ba:	73 07       	cpc	r23, r19
     9bc:	0c f4       	brge	.+2      	; 0x9c0 <serial_read+0x5c>
     9be:	ab 01       	movw	r20, r22
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	20 c0       	rjmp	.+64     	; 0xa06 <serial_read+0xa2>
     9c6:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     9ca:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     9ce:	98 17       	cp	r25, r24
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <serial_read+0x72>
     9d2:	9f ef       	ldi	r25, 0xFF	; 255
     9d4:	12 c0       	rjmp	.+36     	; 0x9fa <serial_read+0x96>
     9d6:	e0 91 08 0b 	lds	r30, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	e8 57       	subi	r30, 0x78	; 120
     9de:	f5 4f       	sbci	r31, 0xF5	; 245
     9e0:	90 81       	ld	r25, Z
     9e2:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     9e6:	8f 37       	cpi	r24, 0x7F	; 127
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <serial_read+0x8c>
     9ea:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <gbSerialBufferHead>
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <serial_read+0x96>
     9f0:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <gbSerialBufferHead>
     9fa:	fd 01       	movw	r30, r26
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	90 83       	st	Z, r25
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	24 17       	cp	r18, r20
     a08:	35 07       	cpc	r19, r21
     a0a:	ec f2       	brlt	.-70     	; 0x9c6 <serial_read+0x62>
     a0c:	84 2f       	mov	r24, r20
     a0e:	08 95       	ret

00000a10 <serial_get_qstate>:
     a10:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a14:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a18:	98 17       	cp	r25, r24
     a1a:	19 f4       	brne	.+6      	; 0xa22 <serial_get_qstate+0x12>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	17 c0       	rjmp	.+46     	; 0xa50 <serial_get_qstate+0x40>
     a22:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a26:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a2a:	98 17       	cp	r25, r24
     a2c:	38 f4       	brcc	.+14     	; 0xa3c <serial_get_qstate+0x2c>
     a2e:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a32:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <serial_get_qstate+0x3c>
     a3c:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a40:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a44:	28 2f       	mov	r18, r24
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	20 58       	subi	r18, 0x80	; 128
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	29 1b       	sub	r18, r25
     a4e:	31 09       	sbc	r19, r1
     a50:	c9 01       	movw	r24, r18
     a52:	08 95       	ret

00000a54 <serial_put_queue>:
     a54:	48 2f       	mov	r20, r24
     a56:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a5a:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a5e:	98 17       	cp	r25, r24
     a60:	d1 f0       	breq	.+52     	; 0xa96 <serial_put_queue+0x42>
     a62:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a66:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a6a:	98 17       	cp	r25, r24
     a6c:	38 f4       	brcc	.+14     	; 0xa7c <serial_put_queue+0x28>
     a6e:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a72:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	08 c0       	rjmp	.+16     	; 0xa8c <serial_put_queue+0x38>
     a7c:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a80:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     a84:	28 2f       	mov	r18, r24
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	20 58       	subi	r18, 0x80	; 128
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	29 1b       	sub	r18, r25
     a8e:	31 09       	sbc	r19, r1
     a90:	2f 37       	cpi	r18, 0x7F	; 127
     a92:	31 05       	cpc	r19, r1
     a94:	91 f0       	breq	.+36     	; 0xaba <serial_put_queue+0x66>
     a96:	e0 91 09 0b 	lds	r30, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	e8 57       	subi	r30, 0x78	; 120
     a9e:	f5 4f       	sbci	r31, 0xF5	; 245
     aa0:	40 83       	st	Z, r20
     aa2:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     aa6:	8f 37       	cpi	r24, 0x7F	; 127
     aa8:	19 f4       	brne	.+6      	; 0xab0 <serial_put_queue+0x5c>
     aaa:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <gbSerialBufferTail>
     aae:	08 95       	ret
     ab0:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 09 0b 	sts	0x0B09, r24	; 0x800b09 <gbSerialBufferTail>
     aba:	08 95       	ret

00000abc <serial_get_queue>:
     abc:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     ac0:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     ac4:	98 17       	cp	r25, r24
     ac6:	11 f4       	brne	.+4      	; 0xacc <serial_get_queue+0x10>
     ac8:	ef ef       	ldi	r30, 0xFF	; 255
     aca:	12 c0       	rjmp	.+36     	; 0xaf0 <serial_get_queue+0x34>
     acc:	e0 91 08 0b 	lds	r30, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	e8 57       	subi	r30, 0x78	; 120
     ad4:	f5 4f       	sbci	r31, 0xF5	; 245
     ad6:	e0 81       	ld	r30, Z
     ad8:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     adc:	8f 37       	cpi	r24, 0x7F	; 127
     ade:	19 f4       	brne	.+6      	; 0xae6 <serial_get_queue+0x2a>
     ae0:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <gbSerialBufferHead>
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <serial_get_queue+0x34>
     ae6:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <gbSerialBufferHead>
     af0:	8e 2f       	mov	r24, r30
     af2:	08 95       	ret

00000af4 <__vector_36>:
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b1e:	9a df       	rcall	.-204    	; 0xa54 <serial_put_queue>
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0b be       	out	0x3b, r0	; 59
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <std_putchar>:
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	98 2f       	mov	r25, r24
     b54:	8a 30       	cpi	r24, 0x0A	; 10
     b56:	99 f4       	brne	.+38     	; 0xb7e <std_putchar+0x38>
     b58:	8d e0       	ldi	r24, 0x0D	; 13
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	fe 01       	movw	r30, r28
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	9e 01       	movw	r18, r28
     b64:	2d 5f       	subi	r18, 0xFD	; 253
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b6c:	85 ff       	sbrs	r24, 5
     b6e:	fc cf       	rjmp	.-8      	; 0xb68 <std_putchar+0x22>
     b70:	81 91       	ld	r24, Z+
     b72:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b76:	e2 17       	cp	r30, r18
     b78:	f3 07       	cpc	r31, r19
     b7a:	b1 f7       	brne	.-20     	; 0xb68 <std_putchar+0x22>
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <std_putchar+0x44>
     b7e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b82:	85 ff       	sbrs	r24, 5
     b84:	fc cf       	rjmp	.-8      	; 0xb7e <std_putchar+0x38>
     b86:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <std_getchar>:
     b98:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     b9c:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     ba0:	98 17       	cp	r25, r24
     ba2:	d1 f3       	breq	.-12     	; 0xb98 <std_getchar>
     ba4:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     ba8:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     bac:	98 17       	cp	r25, r24
     bae:	38 f4       	brcc	.+14     	; 0xbbe <std_getchar+0x26>
     bb0:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     bb4:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	08 c0       	rjmp	.+16     	; 0xbce <std_getchar+0x36>
     bbe:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     bc2:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	20 58       	subi	r18, 0x80	; 128
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	29 1b       	sub	r18, r25
     bd0:	31 09       	sbc	r19, r1
     bd2:	23 2b       	or	r18, r19
     bd4:	09 f3       	breq	.-62     	; 0xb98 <std_getchar>
     bd6:	90 91 08 0b 	lds	r25, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     bda:	80 91 09 0b 	lds	r24, 0x0B09	; 0x800b09 <gbSerialBufferTail>
     bde:	98 17       	cp	r25, r24
     be0:	11 f4       	brne	.+4      	; 0xbe6 <std_getchar+0x4e>
     be2:	ef ef       	ldi	r30, 0xFF	; 255
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <std_getchar+0x78>
     be6:	e0 91 08 0b 	lds	r30, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	e8 57       	subi	r30, 0x78	; 120
     bee:	f5 4f       	sbci	r31, 0xF5	; 245
     bf0:	e0 81       	ld	r30, Z
     bf2:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     bf6:	8f 37       	cpi	r24, 0x7F	; 127
     bf8:	19 f4       	brne	.+6      	; 0xc00 <std_getchar+0x68>
     bfa:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <gbSerialBufferHead>
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <std_getchar+0x72>
     c00:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <gbSerialBufferHead>
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <gbSerialBufferHead>
     c0a:	ed 30       	cpi	r30, 0x0D	; 13
     c0c:	09 f4       	brne	.+2      	; 0xc10 <std_getchar+0x78>
     c0e:	ea e0       	ldi	r30, 0x0A	; 10
     c10:	8e 2f       	mov	r24, r30
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret

00000c16 <serial_initialize>:
     c16:	0e 94 28 10 	call	0x2050	; 0x2050 <__floatsisf>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	74 e2       	ldi	r23, 0x24	; 36
     c22:	84 ef       	ldi	r24, 0xF4	; 244
     c24:	99 e4       	ldi	r25, 0x49	; 73
     c26:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3>
     c2a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__fixunssfsi>
     c2e:	61 50       	subi	r22, 0x01	; 1
     c30:	70 40       	sbci	r23, 0x00	; 0
     c32:	22 e4       	ldi	r18, 0x42	; 66
     c34:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     c38:	28 e9       	ldi	r18, 0x98	; 152
     c3a:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c3e:	26 e0       	ldi	r18, 0x06	; 6
     c40:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     c44:	2f ef       	ldi	r18, 0xFF	; 255
     c46:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     c4a:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <gbSerialBufferHead>
     c4e:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <gbSerialBufferTail>
     c52:	27 2f       	mov	r18, r23
     c54:	33 27       	eor	r19, r19
     c56:	27 fd       	sbrc	r18, 7
     c58:	3a 95       	dec	r19
     c5a:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c5e:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c62:	72 98       	cbi	0x0e, 2	; 14
     c64:	73 9a       	sbi	0x0e, 3	; 14
     c66:	83 ea       	ldi	r24, 0xA3	; 163
     c68:	95 e0       	ldi	r25, 0x05	; 5
     c6a:	6c ec       	ldi	r22, 0xCC	; 204
     c6c:	75 e0       	ldi	r23, 0x05	; 5
     c6e:	0e 94 36 12 	call	0x246c	; 0x246c <fdevopen>
     c72:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <device+0x1>
     c76:	80 93 0a 0b 	sts	0x0B0A, r24	; 0x800b0a <device>
     c7a:	08 95       	ret

00000c7c <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     c7c:	88 ea       	ldi	r24, 0xA8	; 168
     c7e:	95 e0       	ldi	r25, 0x05	; 5
     c80:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	71 ee       	ldi	r23, 0xE1	; 225
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	c4 df       	rcall	.-120    	; 0xc16 <serial_initialize>
     c8e:	78 94       	sei
     c90:	86 e8       	ldi	r24, 0x86	; 134
     c92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c9c:	08 95       	ret

00000c9e <sensorTest>:
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	51 f0       	breq	.+20     	; 0xcbc <sensorTest+0x1e>
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	91 05       	cpc	r25, r1
     cac:	61 f0       	breq	.+24     	; 0xcc6 <sensorTest+0x28>
     cae:	89 2b       	or	r24, r25
     cb0:	71 f4       	brne	.+28     	; 0xcce <sensorTest+0x30>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     cb8:	17 98       	cbi	0x02, 7	; 2
     cba:	09 c0       	rjmp	.+18     	; 0xcce <sensorTest+0x30>
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     cc2:	16 98       	cbi	0x02, 6	; 2
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <sensorTest+0x30>
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     ccc:	15 98       	cbi	0x02, 5	; 2
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	8a 95       	dec	r24
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <sensorTest+0x32>
     cd4:	ea e7       	ldi	r30, 0x7A	; 122
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 61       	ori	r24, 0x10	; 16
     cdc:	80 83       	st	Z, r24
     cde:	80 81       	ld	r24, Z
     ce0:	80 64       	ori	r24, 0x40	; 64
     ce2:	80 83       	st	Z, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	84 ff       	sbrs	r24, 4
     ce8:	fd cf       	rjmp	.-6      	; 0xce4 <sensorTest+0x46>
     cea:	8e ef       	ldi	r24, 0xFE	; 254
     cec:	82 b9       	out	0x02, r24	; 2
     cee:	c8 e7       	ldi	r28, 0x78	; 120
     cf0:	d0 e0       	ldi	r29, 0x00	; 0
     cf2:	88 81       	ld	r24, Y
     cf4:	99 81       	ldd	r25, Y+1	; 0x01
     cf6:	1f d7       	rcall	.+3646   	; 0x1b36 <setGyroX>
     cf8:	28 81       	ld	r18, Y
     cfa:	39 81       	ldd	r19, Y+1	; 0x01
     cfc:	80 91 12 0b 	lds	r24, 0x0B12	; 0x800b12 <gyroTemp>
     d00:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <gyroTemp+0x1>
     d04:	28 0f       	add	r18, r24
     d06:	39 1f       	adc	r19, r25
     d08:	30 93 13 0b 	sts	0x0B13, r19	; 0x800b13 <gyroTemp+0x1>
     d0c:	20 93 12 0b 	sts	0x0B12, r18	; 0x800b12 <gyroTemp>
     d10:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <gyroCount>
     d14:	90 91 11 0b 	lds	r25, 0x0B11	; 0x800b11 <gyroCount+0x1>
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	90 93 11 0b 	sts	0x0B11, r25	; 0x800b11 <gyroCount+0x1>
     d1e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <gyroCount>
     d22:	05 97       	sbiw	r24, 0x05	; 5
     d24:	a4 f0       	brlt	.+40     	; 0xd4e <sensorTest+0xb0>
     d26:	80 91 14 0b 	lds	r24, 0x0B14	; 0x800b14 <gyroValue>
     d2a:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <gyroValue+0x1>
     d2e:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <preGyroValue+0x1>
     d32:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <preGyroValue>
     d36:	30 93 15 0b 	sts	0x0B15, r19	; 0x800b15 <gyroValue+0x1>
     d3a:	20 93 14 0b 	sts	0x0B14, r18	; 0x800b14 <gyroValue>
     d3e:	10 92 11 0b 	sts	0x0B11, r1	; 0x800b11 <gyroCount+0x1>
     d42:	10 92 10 0b 	sts	0x0B10, r1	; 0x800b10 <gyroCount>
     d46:	10 92 13 0b 	sts	0x0B13, r1	; 0x800b13 <gyroTemp+0x1>
     d4a:	10 92 12 0b 	sts	0x0B12, r1	; 0x800b12 <gyroTemp>
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <sendAck>:
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	87 eb       	ldi	r24, 0xB7	; 183
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	08 95       	ret

00000d6e <MotorInit>:
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	d9 db       	rcall	.-2126   	; 0x52a <dxl_initialize>
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	6f e2       	ldi	r22, 0x2F	; 47
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8f e1       	ldi	r24, 0x1F	; 31
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	56 db       	rcall	.-2388   	; 0x432 <dxl_write_word>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e2       	ldi	r22, 0x20	; 32
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	8e ef       	ldi	r24, 0xFE	; 254
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	4f db       	rcall	.-2402   	; 0x432 <dxl_write_word>
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	68 e1       	ldi	r22, 0x18	; 24
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	8e ef       	ldi	r24, 0xFE	; 254
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	80 db       	rcall	.-2304   	; 0x4a2 <dxl_write_byte>
     da2:	2f e3       	ldi	r18, 0x3F	; 63
     da4:	8d e0       	ldi	r24, 0x0D	; 13
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <MotorInit+0x3a>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <MotorInit+0x44>
     db2:	00 00       	nop
     db4:	08 95       	ret

00000db6 <split>:
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <split+0xa>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	20 e2       	ldi	r18, 0x20	; 32
     dc6:	3c e2       	ldi	r19, 0x2C	; 44
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	29 83       	std	Y+1, r18	; 0x01
     dcc:	3a 83       	std	Y+2, r19	; 0x02
     dce:	4b 83       	std	Y+3, r20	; 0x03
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	0e 94 04 12 	call	0x2408	; 0x2408 <strtok>
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	89 f0       	breq	.+34     	; 0xe00 <split+0x4a>
     dde:	0a e2       	ldi	r16, 0x2A	; 42
     de0:	1b e0       	ldi	r17, 0x0B	; 11
     de2:	0e 94 e7 11 	call	0x23ce	; 0x23ce <atoi>
     de6:	f8 01       	movw	r30, r16
     de8:	81 93       	st	Z+, r24
     dea:	91 93       	st	Z+, r25
     dec:	8f 01       	movw	r16, r30
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 04 12 	call	0x2408	; 0x2408 <strtok>
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	89 f7       	brne	.-30     	; 0xde2 <split+0x2c>
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <setAngle>:
     e10:	20 91 2c 0b 	lds	r18, 0x0B2C	; 0x800b2c <serCmd+0x2>
     e14:	30 91 2d 0b 	lds	r19, 0x0B2D	; 0x800b2d <serCmd+0x3>
     e18:	22 33       	cpi	r18, 0x32	; 50
     e1a:	31 05       	cpc	r19, r1
     e1c:	cc f4       	brge	.+50     	; 0xe50 <setAngle+0x40>
     e1e:	ae e2       	ldi	r26, 0x2E	; 46
     e20:	bb e0       	ldi	r27, 0x0B	; 11
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	c9 01       	movw	r24, r18
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	28 0f       	add	r18, r24
     e36:	39 1f       	adc	r19, r25
     e38:	f9 01       	movw	r30, r18
     e3a:	e4 5f       	subi	r30, 0xF4	; 244
     e3c:	fd 4f       	sbci	r31, 0xFD	; 253
     e3e:	22 5e       	subi	r18, 0xE2	; 226
     e40:	3d 4f       	sbci	r19, 0xFD	; 253
     e42:	8d 91       	ld	r24, X+
     e44:	9d 91       	ld	r25, X+
     e46:	81 93       	st	Z+, r24
     e48:	91 93       	st	Z+, r25
     e4a:	e2 17       	cp	r30, r18
     e4c:	f3 07       	cpc	r31, r19
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <setAngle+0x32>
     e50:	08 95       	ret

00000e52 <getAngle>:
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	60 97       	sbiw	r28, 0x10	; 16
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	fe 01       	movw	r30, r28
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	80 e1       	ldi	r24, 0x10	; 16
     e78:	df 01       	movw	r26, r30
     e7a:	1d 92       	st	X+, r1
     e7c:	8a 95       	dec	r24
     e7e:	e9 f7       	brne	.-6      	; 0xe7a <getAngle+0x28>
     e80:	00 e9       	ldi	r16, 0x90	; 144
     e82:	15 e0       	ldi	r17, 0x05	; 5
     e84:	7f 01       	movw	r14, r30
     e86:	0f 2e       	mov	r0, r31
     e88:	f0 ea       	ldi	r31, 0xA0	; 160
     e8a:	cf 2e       	mov	r12, r31
     e8c:	f5 e0       	ldi	r31, 0x05	; 5
     e8e:	df 2e       	mov	r13, r31
     e90:	f0 2d       	mov	r31, r0
     e92:	64 e2       	ldi	r22, 0x24	; 36
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	f8 01       	movw	r30, r16
     e98:	81 91       	ld	r24, Z+
     e9a:	91 91       	ld	r25, Z+
     e9c:	8f 01       	movw	r16, r30
     e9e:	e3 da       	rcall	.-2618   	; 0x466 <dxl_read_word>
     ea0:	d7 01       	movw	r26, r14
     ea2:	8d 93       	st	X+, r24
     ea4:	9d 93       	st	X+, r25
     ea6:	7d 01       	movw	r14, r26
     ea8:	0c 15       	cp	r16, r12
     eaa:	1d 05       	cpc	r17, r13
     eac:	91 f7       	brne	.-28     	; 0xe92 <getAngle+0x40>
     eae:	88 89       	ldd	r24, Y+16	; 0x10
     eb0:	8f 93       	push	r24
     eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb4:	8f 93       	push	r24
     eb6:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb8:	8f 93       	push	r24
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	8f 93       	push	r24
     ebe:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec0:	8f 93       	push	r24
     ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec4:	8f 93       	push	r24
     ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec8:	8f 93       	push	r24
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	8f 93       	push	r24
     ece:	88 85       	ldd	r24, Y+8	; 0x08
     ed0:	8f 93       	push	r24
     ed2:	8f 81       	ldd	r24, Y+7	; 0x07
     ed4:	8f 93       	push	r24
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	8f 93       	push	r24
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	8f 93       	push	r24
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	8f 93       	push	r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	8f 93       	push	r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	8f 93       	push	r24
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	8f 93       	push	r24
     eee:	1f 92       	push	r1
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	8f 93       	push	r24
     ef4:	8c eb       	ldi	r24, 0xBC	; 188
     ef6:	95 e0       	ldi	r25, 0x05	; 5
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	60 96       	adiw	r28, 0x10	; 16
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	08 95       	ret

00000f28 <sendActAngle>:
     f28:	fc 01       	movw	r30, r24
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	9f 01       	movw	r18, r30
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	e2 0f       	add	r30, r18
     f3e:	f3 1f       	adc	r31, r19
     f40:	e4 5f       	subi	r30, 0xF4	; 244
     f42:	fd 4f       	sbci	r31, 0xFD	; 253
     f44:	21 8d       	ldd	r18, Z+25	; 0x19
     f46:	2f 93       	push	r18
     f48:	20 8d       	ldd	r18, Z+24	; 0x18
     f4a:	2f 93       	push	r18
     f4c:	27 89       	ldd	r18, Z+23	; 0x17
     f4e:	2f 93       	push	r18
     f50:	26 89       	ldd	r18, Z+22	; 0x16
     f52:	2f 93       	push	r18
     f54:	25 89       	ldd	r18, Z+21	; 0x15
     f56:	2f 93       	push	r18
     f58:	24 89       	ldd	r18, Z+20	; 0x14
     f5a:	2f 93       	push	r18
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	dc 01       	movw	r26, r24
     f64:	aa 0f       	add	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	aa 0f       	add	r26, r26
     f6a:	bb 1f       	adc	r27, r27
     f6c:	aa 0f       	add	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	8a 0f       	add	r24, r26
     f72:	9b 1f       	adc	r25, r27
     f74:	dc 01       	movw	r26, r24
     f76:	a4 5f       	subi	r26, 0xF4	; 244
     f78:	bd 4f       	sbci	r27, 0xFD	; 253
     f7a:	11 96       	adiw	r26, 0x01	; 1
     f7c:	8c 91       	ld	r24, X
     f7e:	11 97       	sbiw	r26, 0x01	; 1
     f80:	8f 93       	push	r24
     f82:	8c 91       	ld	r24, X
     f84:	8f 93       	push	r24
     f86:	81 89       	ldd	r24, Z+17	; 0x11
     f88:	8f 93       	push	r24
     f8a:	80 89       	ldd	r24, Z+16	; 0x10
     f8c:	8f 93       	push	r24
     f8e:	87 85       	ldd	r24, Z+15	; 0x0f
     f90:	8f 93       	push	r24
     f92:	86 85       	ldd	r24, Z+14	; 0x0e
     f94:	8f 93       	push	r24
     f96:	85 85       	ldd	r24, Z+13	; 0x0d
     f98:	8f 93       	push	r24
     f9a:	84 85       	ldd	r24, Z+12	; 0x0c
     f9c:	8f 93       	push	r24
     f9e:	83 85       	ldd	r24, Z+11	; 0x0b
     fa0:	8f 93       	push	r24
     fa2:	82 85       	ldd	r24, Z+10	; 0x0a
     fa4:	8f 93       	push	r24
     fa6:	81 85       	ldd	r24, Z+9	; 0x09
     fa8:	8f 93       	push	r24
     faa:	80 85       	ldd	r24, Z+8	; 0x08
     fac:	8f 93       	push	r24
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	8f 93       	push	r24
     fb2:	86 81       	ldd	r24, Z+6	; 0x06
     fb4:	8f 93       	push	r24
     fb6:	85 81       	ldd	r24, Z+5	; 0x05
     fb8:	8f 93       	push	r24
     fba:	84 81       	ldd	r24, Z+4	; 0x04
     fbc:	8f 93       	push	r24
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	8f 93       	push	r24
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	8f 93       	push	r24
     fc6:	81 81       	ldd	r24, Z+1	; 0x01
     fc8:	8f 93       	push	r24
     fca:	80 81       	ld	r24, Z
     fcc:	8f 93       	push	r24
     fce:	1f 92       	push	r1
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	8f 93       	push	r24
     fd4:	81 ee       	ldi	r24, 0xE1	; 225
     fd6:	95 e0       	ldi	r25, 0x05	; 5
     fd8:	9f 93       	push	r25
     fda:	8f 93       	push	r24
     fdc:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
     fe0:	8d b7       	in	r24, 0x3d	; 61
     fe2:	9e b7       	in	r25, 0x3e	; 62
     fe4:	4e 96       	adiw	r24, 0x1e	; 30
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	9e bf       	out	0x3e, r25	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	8d bf       	out	0x3d, r24	; 61
     ff0:	08 95       	ret

00000ff2 <getLoad>:
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	60 97       	sbiw	r28, 0x10	; 16
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	fe 01       	movw	r30, r28
    1014:	31 96       	adiw	r30, 0x01	; 1
    1016:	80 e1       	ldi	r24, 0x10	; 16
    1018:	df 01       	movw	r26, r30
    101a:	1d 92       	st	X+, r1
    101c:	8a 95       	dec	r24
    101e:	e9 f7       	brne	.-6      	; 0x101a <getLoad+0x28>
    1020:	00 e9       	ldi	r16, 0x90	; 144
    1022:	15 e0       	ldi	r17, 0x05	; 5
    1024:	7f 01       	movw	r14, r30
    1026:	0f 2e       	mov	r0, r31
    1028:	f0 ea       	ldi	r31, 0xA0	; 160
    102a:	cf 2e       	mov	r12, r31
    102c:	f5 e0       	ldi	r31, 0x05	; 5
    102e:	df 2e       	mov	r13, r31
    1030:	f0 2d       	mov	r31, r0
    1032:	68 e2       	ldi	r22, 0x28	; 40
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	f8 01       	movw	r30, r16
    1038:	81 91       	ld	r24, Z+
    103a:	91 91       	ld	r25, Z+
    103c:	8f 01       	movw	r16, r30
    103e:	13 da       	rcall	.-3034   	; 0x466 <dxl_read_word>
    1040:	d7 01       	movw	r26, r14
    1042:	8d 93       	st	X+, r24
    1044:	9d 93       	st	X+, r25
    1046:	7d 01       	movw	r14, r26
    1048:	0c 15       	cp	r16, r12
    104a:	1d 05       	cpc	r17, r13
    104c:	91 f7       	brne	.-28     	; 0x1032 <getLoad+0x40>
    104e:	88 8d       	ldd	r24, Y+24	; 0x18
    1050:	8f 93       	push	r24
    1052:	8f 89       	ldd	r24, Y+23	; 0x17
    1054:	8f 93       	push	r24
    1056:	8e 89       	ldd	r24, Y+22	; 0x16
    1058:	8f 93       	push	r24
    105a:	8d 89       	ldd	r24, Y+21	; 0x15
    105c:	8f 93       	push	r24
    105e:	8c 89       	ldd	r24, Y+20	; 0x14
    1060:	8f 93       	push	r24
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	8f 93       	push	r24
    1066:	8a 89       	ldd	r24, Y+18	; 0x12
    1068:	8f 93       	push	r24
    106a:	89 89       	ldd	r24, Y+17	; 0x11
    106c:	8f 93       	push	r24
    106e:	88 89       	ldd	r24, Y+16	; 0x10
    1070:	8f 93       	push	r24
    1072:	8f 85       	ldd	r24, Y+15	; 0x0f
    1074:	8f 93       	push	r24
    1076:	8e 85       	ldd	r24, Y+14	; 0x0e
    1078:	8f 93       	push	r24
    107a:	8d 85       	ldd	r24, Y+13	; 0x0d
    107c:	8f 93       	push	r24
    107e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1080:	8f 93       	push	r24
    1082:	8b 85       	ldd	r24, Y+11	; 0x0b
    1084:	8f 93       	push	r24
    1086:	8a 85       	ldd	r24, Y+10	; 0x0a
    1088:	8f 93       	push	r24
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	8f 93       	push	r24
    108e:	88 85       	ldd	r24, Y+8	; 0x08
    1090:	8f 93       	push	r24
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	8f 93       	push	r24
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	8f 93       	push	r24
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	8f 93       	push	r24
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	8f 93       	push	r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	8f 93       	push	r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	8f 93       	push	r24
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	8f 93       	push	r24
    10ae:	1f 92       	push	r1
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	8f 93       	push	r24
    10b4:	8c e0       	ldi	r24, 0x0C	; 12
    10b6:	96 e0       	ldi	r25, 0x06	; 6
    10b8:	9f 93       	push	r25
    10ba:	8f 93       	push	r24
    10bc:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	60 96       	adiw	r28, 0x10	; 16
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <getVoltage>:
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	60 97       	sbiw	r28, 0x10	; 16
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	fe 01       	movw	r30, r28
    110a:	31 96       	adiw	r30, 0x01	; 1
    110c:	80 e1       	ldi	r24, 0x10	; 16
    110e:	df 01       	movw	r26, r30
    1110:	1d 92       	st	X+, r1
    1112:	8a 95       	dec	r24
    1114:	e9 f7       	brne	.-6      	; 0x1110 <getVoltage+0x28>
    1116:	00 e9       	ldi	r16, 0x90	; 144
    1118:	15 e0       	ldi	r17, 0x05	; 5
    111a:	7f 01       	movw	r14, r30
    111c:	0f 2e       	mov	r0, r31
    111e:	f0 ea       	ldi	r31, 0xA0	; 160
    1120:	cf 2e       	mov	r12, r31
    1122:	f5 e0       	ldi	r31, 0x05	; 5
    1124:	df 2e       	mov	r13, r31
    1126:	f0 2d       	mov	r31, r0
    1128:	6a e2       	ldi	r22, 0x2A	; 42
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	f8 01       	movw	r30, r16
    112e:	81 91       	ld	r24, Z+
    1130:	91 91       	ld	r25, Z+
    1132:	8f 01       	movw	r16, r30
    1134:	98 d9       	rcall	.-3280   	; 0x466 <dxl_read_word>
    1136:	37 d8       	rcall	.-3986   	; 0x1a6 <dxl_get_lowbyte>
    1138:	d7 01       	movw	r26, r14
    113a:	8d 93       	st	X+, r24
    113c:	9d 93       	st	X+, r25
    113e:	7d 01       	movw	r14, r26
    1140:	0c 15       	cp	r16, r12
    1142:	1d 05       	cpc	r17, r13
    1144:	89 f7       	brne	.-30     	; 0x1128 <getVoltage+0x40>
    1146:	88 8d       	ldd	r24, Y+24	; 0x18
    1148:	8f 93       	push	r24
    114a:	8f 89       	ldd	r24, Y+23	; 0x17
    114c:	8f 93       	push	r24
    114e:	8e 89       	ldd	r24, Y+22	; 0x16
    1150:	8f 93       	push	r24
    1152:	8d 89       	ldd	r24, Y+21	; 0x15
    1154:	8f 93       	push	r24
    1156:	8c 89       	ldd	r24, Y+20	; 0x14
    1158:	8f 93       	push	r24
    115a:	8b 89       	ldd	r24, Y+19	; 0x13
    115c:	8f 93       	push	r24
    115e:	8a 89       	ldd	r24, Y+18	; 0x12
    1160:	8f 93       	push	r24
    1162:	89 89       	ldd	r24, Y+17	; 0x11
    1164:	8f 93       	push	r24
    1166:	88 89       	ldd	r24, Y+16	; 0x10
    1168:	8f 93       	push	r24
    116a:	8f 85       	ldd	r24, Y+15	; 0x0f
    116c:	8f 93       	push	r24
    116e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1170:	8f 93       	push	r24
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	8f 93       	push	r24
    1176:	8c 85       	ldd	r24, Y+12	; 0x0c
    1178:	8f 93       	push	r24
    117a:	8b 85       	ldd	r24, Y+11	; 0x0b
    117c:	8f 93       	push	r24
    117e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1180:	8f 93       	push	r24
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	8f 93       	push	r24
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	8f 93       	push	r24
    118a:	8f 81       	ldd	r24, Y+7	; 0x07
    118c:	8f 93       	push	r24
    118e:	8e 81       	ldd	r24, Y+6	; 0x06
    1190:	8f 93       	push	r24
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	8f 93       	push	r24
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	8f 93       	push	r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	8f 93       	push	r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	8f 93       	push	r24
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8f 93       	push	r24
    11a6:	1f 92       	push	r1
    11a8:	85 e0       	ldi	r24, 0x05	; 5
    11aa:	8f 93       	push	r24
    11ac:	8c e0       	ldi	r24, 0x0C	; 12
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	60 96       	adiw	r28, 0x10	; 16
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	08 95       	ret

000011e0 <startMotion>:
    11e0:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <nextMotionNumber+0x1>
    11e4:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <nextMotionNumber>
    11e8:	70 93 1f 0b 	sts	0x0B1F, r23	; 0x800b1f <nextMotionTimes+0x1>
    11ec:	60 93 1e 0b 	sts	0x0B1E, r22	; 0x800b1e <nextMotionTimes>
    11f0:	20 91 26 0b 	lds	r18, 0x0B26	; 0x800b26 <motionTimes>
    11f4:	30 91 27 0b 	lds	r19, 0x0B27	; 0x800b27 <motionTimes+0x1>
    11f8:	23 2b       	or	r18, r19
    11fa:	61 f4       	brne	.+24     	; 0x1214 <startMotion+0x34>
    11fc:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <motionNumber+0x1>
    1200:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <motionNumber>
    1204:	70 93 27 0b 	sts	0x0B27, r23	; 0x800b27 <motionTimes+0x1>
    1208:	60 93 26 0b 	sts	0x0B26, r22	; 0x800b26 <motionTimes>
    120c:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <nextMotionTimes+0x1>
    1210:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <nextMotionTimes>
    1214:	08 95       	ret

00001216 <forceMotion>:
    1216:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <motionNumber+0x1>
    121a:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <motionNumber>
    121e:	70 93 27 0b 	sts	0x0B27, r23	; 0x800b27 <motionTimes+0x1>
    1222:	60 93 26 0b 	sts	0x0B26, r22	; 0x800b26 <motionTimes>
    1226:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <nextMotionTimes+0x1>
    122a:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <nextMotionTimes>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    1236:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    123a:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <motionTime+0x1>
    123e:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <motionTime>
    1242:	08 95       	ret

00001244 <stopMotion>:
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    124c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    1250:	10 92 27 0b 	sts	0x0B27, r1	; 0x800b27 <motionTimes+0x1>
    1254:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <motionTimes>
    1258:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <motionTime+0x1>
    125c:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <motionTime>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <motionFirst+0x1>
    1268:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motionFirst>
    126c:	08 95       	ret

0000126e <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	21 f4       	brne	.+8      	; 0x1282 <PrintErrorCode+0x14>
	printf("Input voltage error!\n");
    127a:	89 e3       	ldi	r24, 0x39	; 57
    127c:	96 e0       	ldi	r25, 0x06	; 6
    127e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	21 f4       	brne	.+8      	; 0x1296 <PrintErrorCode+0x28>
	printf("Angle limit error!\n");
    128e:	8e e4       	ldi	r24, 0x4E	; 78
    1290:	96 e0       	ldi	r25, 0x06	; 6
    1292:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	21 f4       	brne	.+8      	; 0x12aa <PrintErrorCode+0x3c>
	printf("Overheat error!\n");
    12a2:	81 e6       	ldi	r24, 0x61	; 97
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    12aa:	88 e0       	ldi	r24, 0x08	; 8
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	21 f4       	brne	.+8      	; 0x12be <PrintErrorCode+0x50>
	printf("Out of range error!\n");
    12b6:	81 e7       	ldi	r24, 0x71	; 113
    12b8:	96 e0       	ldi	r25, 0x06	; 6
    12ba:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    12be:	80 e1       	ldi	r24, 0x10	; 16
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <PrintErrorCode+0x64>
	printf("Checksum error!\n");
    12ca:	85 e8       	ldi	r24, 0x85	; 133
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    12d2:	80 e2       	ldi	r24, 0x20	; 32
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <PrintErrorCode+0x78>
	printf("Overload error!\n");
    12de:	85 e9       	ldi	r24, 0x95	; 149
    12e0:	96 e0       	ldi	r25, 0x06	; 6
    12e2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    12e6:	80 e4       	ldi	r24, 0x40	; 64
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_rxpacket_error>
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	21 f4       	brne	.+8      	; 0x12fa <PrintErrorCode+0x8c>
	printf("Instruction code error!\n");
    12f2:	85 ea       	ldi	r24, 0xA5	; 165
    12f4:	96 e0       	ldi	r25, 0x06	; 6
    12f6:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
    12fa:	08 95       	ret

000012fc <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	91 05       	cpc	r25, r1
    1300:	99 f0       	breq	.+38     	; 0x1328 <PrintCommStatus+0x2c>
    1302:	34 f4       	brge	.+12     	; 0x1310 <PrintCommStatus+0x14>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	51 f0       	breq	.+20     	; 0x131e <PrintCommStatus+0x22>
    130a:	03 97       	sbiw	r24, 0x03	; 3
    130c:	91 f0       	breq	.+36     	; 0x1332 <PrintCommStatus+0x36>
    130e:	25 c0       	rjmp	.+74     	; 0x135a <PrintCommStatus+0x5e>
    1310:	86 30       	cpi	r24, 0x06	; 6
    1312:	91 05       	cpc	r25, r1
    1314:	c1 f0       	breq	.+48     	; 0x1346 <PrintCommStatus+0x4a>
    1316:	94 f0       	brlt	.+36     	; 0x133c <PrintCommStatus+0x40>
    1318:	07 97       	sbiw	r24, 0x07	; 7
    131a:	d1 f0       	breq	.+52     	; 0x1350 <PrintCommStatus+0x54>
    131c:	1e c0       	rjmp	.+60     	; 0x135a <PrintCommStatus+0x5e>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    131e:	8d eb       	ldi	r24, 0xBD	; 189
    1320:	96 e0       	ldi	r25, 0x06	; 6
    1322:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    1326:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    1328:	8e ee       	ldi	r24, 0xEE	; 238
    132a:	96 e0       	ldi	r25, 0x06	; 6
    132c:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    1330:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    1332:	8a e1       	ldi	r24, 0x1A	; 26
    1334:	97 e0       	ldi	r25, 0x07	; 7
    1336:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    133a:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    133c:	8d e4       	ldi	r24, 0x4D	; 77
    133e:	97 e0       	ldi	r25, 0x07	; 7
    1340:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    1344:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    1346:	8a e7       	ldi	r24, 0x7A	; 122
    1348:	97 e0       	ldi	r25, 0x07	; 7
    134a:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    134e:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    1350:	85 ea       	ldi	r24, 0xA5	; 165
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
		break;
    1358:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    135a:	8e ec       	ldi	r24, 0xCE	; 206
    135c:	97 e0       	ldi	r25, 0x07	; 7
    135e:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <puts>
    1362:	08 95       	ret

00001364 <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	08 2f       	mov	r16, r24
    136e:	19 2f       	mov	r17, r25
    1370:	d6 2f       	mov	r29, r22
    1372:	c7 2f       	mov	r28, r23
	int CommStatus;
	printf( "%d %d\n", id, power );
    1374:	7f 93       	push	r23
    1376:	6f 93       	push	r22
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	8a ee       	ldi	r24, 0xEA	; 234
    137e:	97 e0       	ldi	r25, 0x07	; 7
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	0e 94 be 12 	call	0x257c	; 0x257c <printf>
		if( CommStatus == COMM_RXSUCCESS )
			PrintErrorCode();
		else
			PrintCommStatus(CommStatus);
	}else{
		dxl_set_txpacket_id(BROADCAST_ID);
    1388:	8e ef       	ldi	r24, 0xFE	; 254
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 ab 00 	call	0x156	; 0x156 <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1390:	83 e8       	ldi	r24, 0x83	; 131
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 ae 00 	call	0x15c	; 0x15c <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1398:	60 e2       	ldi	r22, 0x20	; 32
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    13b0:	60 2f       	mov	r22, r16
    13b2:	71 2f       	mov	r23, r17
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    13bc:	8d 2f       	mov	r24, r29
    13be:	9c 2f       	mov	r25, r28
    13c0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <dxl_get_lowbyte>
    13c4:	bc 01       	movw	r22, r24
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    13ce:	8d 2f       	mov	r24, r29
    13d0:	9c 2f       	mov	r25, r28
    13d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dxl_get_highbyte>
    13d6:	bc 01       	movw	r22, r24
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 b6 00 	call	0x16c	; 0x16c <dxl_set_txpacket_length>
		dxl_txrx_packet();
    13e8:	15 d8       	rcall	.-4054   	; 0x414 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    13ea:	0e 94 a6 00 	call	0x14c	; 0x14c <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	11 f4       	brne	.+4      	; 0x1404 <MotorControl+0xa0>
			PrintErrorCode();
    1400:	36 df       	rcall	.-404    	; 0x126e <PrintErrorCode>
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <MotorControl+0xa2>
		else
			PrintCommStatus(CommStatus);
    1404:	7b df       	rcall	.-266    	; 0x12fc <PrintCommStatus>
	}
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    1410:	2f 92       	push	r2
    1412:	3f 92       	push	r3
    1414:	4f 92       	push	r4
    1416:	5f 92       	push	r5
    1418:	6f 92       	push	r6
    141a:	7f 92       	push	r7
    141c:	8f 92       	push	r8
    141e:	9f 92       	push	r9
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	ae 97       	sbiw	r28, 0x2e	; 46
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    1444:	82 33       	cpi	r24, 0x32	; 50
    1446:	91 05       	cpc	r25, r1
    1448:	0c f0       	brlt	.+2      	; 0x144c <ServoControl+0x3c>
    144a:	77 c1       	rjmp	.+750    	; 0x173a <ServoControl+0x32a>
    144c:	9a a7       	std	Y+42, r25	; 0x2a
    144e:	89 a7       	std	Y+41, r24	; 0x29
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    1450:	fe 01       	movw	r30, r28
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	80 e1       	ldi	r24, 0x10	; 16
    1456:	df 01       	movw	r26, r30
    1458:	1d 92       	st	X+, r1
    145a:	8a 95       	dec	r24
    145c:	e9 f7       	brne	.-6      	; 0x1458 <ServoControl+0x48>
    145e:	20 e9       	ldi	r18, 0x90	; 144
    1460:	35 e0       	ldi	r19, 0x05	; 5
    1462:	3e a7       	std	Y+46, r19	; 0x2e
    1464:	2d a7       	std	Y+45, r18	; 0x2d
    1466:	29 a5       	ldd	r18, Y+41	; 0x29
    1468:	3a a5       	ldd	r19, Y+42	; 0x2a
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	c9 01       	movw	r24, r18
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	ac 01       	movw	r20, r24
    1482:	44 5f       	subi	r20, 0xF4	; 244
    1484:	5d 4f       	sbci	r21, 0xFD	; 253
    1486:	5c a7       	std	Y+44, r21	; 0x2c
    1488:	4b a7       	std	Y+43, r20	; 0x2b
    148a:	1f 01       	movw	r2, r30
    148c:	5e 01       	movw	r10, r28
    148e:	51 e1       	ldi	r21, 0x11	; 17
    1490:	a5 0e       	add	r10, r21
    1492:	b1 1c       	adc	r11, r1
    1494:	8f 01       	movw	r16, r30
    1496:	cb a4       	ldd	r12, Y+43	; 0x2b
    1498:	dc a4       	ldd	r13, Y+44	; 0x2c
    149a:	0f 2e       	mov	r0, r31
    149c:	f0 e9       	ldi	r31, 0x90	; 144
    149e:	ef 2e       	mov	r14, r31
    14a0:	f5 e0       	ldi	r31, 0x05	; 5
    14a2:	ff 2e       	mov	r15, r31
    14a4:	f0 2d       	mov	r31, r0
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    14a6:	81 2c       	mov	r8, r1
    14a8:	91 2c       	mov	r9, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    14aa:	64 e2       	ldi	r22, 0x24	; 36
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	d7 01       	movw	r26, r14
    14b0:	8d 91       	ld	r24, X+
    14b2:	9d 91       	ld	r25, X+
    14b4:	7d 01       	movw	r14, r26
    14b6:	0e 94 33 02 	call	0x466	; 0x466 <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    14ba:	f6 01       	movw	r30, r12
    14bc:	21 91       	ld	r18, Z+
    14be:	31 91       	ld	r19, Z+
    14c0:	6f 01       	movw	r12, r30
    14c2:	a9 01       	movw	r20, r18
    14c4:	48 1b       	sub	r20, r24
    14c6:	59 0b       	sbc	r21, r25
    14c8:	ca 01       	movw	r24, r20
		if( angleDiff[i] < 0 ){
    14ca:	99 23       	and	r25, r25
    14cc:	24 f0       	brlt	.+8      	; 0x14d6 <ServoControl+0xc6>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    14ce:	d8 01       	movw	r26, r16
    14d0:	4d 93       	st	X+, r20
    14d2:	5c 93       	st	X, r21
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <ServoControl+0xd2>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    14d6:	91 95       	neg	r25
    14d8:	81 95       	neg	r24
    14da:	91 09       	sbc	r25, r1
    14dc:	f8 01       	movw	r30, r16
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    14e2:	d8 01       	movw	r26, r16
    14e4:	8d 91       	ld	r24, X+
    14e6:	9d 91       	ld	r25, X+
    14e8:	8d 01       	movw	r16, r26
    14ea:	88 16       	cp	r8, r24
    14ec:	99 06       	cpc	r9, r25
    14ee:	0c f4       	brge	.+2      	; 0x14f2 <ServoControl+0xe2>
    14f0:	4c 01       	movw	r8, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    14f2:	0a 15       	cp	r16, r10
    14f4:	1b 05       	cpc	r17, r11
    14f6:	c9 f6       	brne	.-78     	; 0x14aa <ServoControl+0x9a>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    14f8:	8e 01       	movw	r16, r28
    14fa:	0f 5e       	subi	r16, 0xEF	; 239
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	80 e1       	ldi	r24, 0x10	; 16
    1500:	f8 01       	movw	r30, r16
    1502:	11 92       	st	Z+, r1
    1504:	8a 95       	dec	r24
    1506:	e9 f7       	brne	.-6      	; 0x1502 <ServoControl+0xf2>
    1508:	84 e6       	ldi	r24, 0x64	; 100
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9a 8b       	std	Y+18, r25	; 0x12
    150e:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1510:	e9 a5       	ldd	r30, Y+41	; 0x29
    1512:	fa a5       	ldd	r31, Y+42	; 0x2a
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	cf 01       	movw	r24, r30
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	e8 0f       	add	r30, r24
    1528:	f9 1f       	adc	r31, r25
    152a:	e4 5f       	subi	r30, 0xF4	; 244
    152c:	fd 4f       	sbci	r31, 0xFD	; 253
    152e:	60 89       	ldd	r22, Z+16	; 0x10
    1530:	71 89       	ldd	r23, Z+17	; 0x11
    1532:	07 2e       	mov	r0, r23
    1534:	00 0c       	add	r0, r0
    1536:	88 0b       	sbc	r24, r24
    1538:	99 0b       	sbc	r25, r25
    153a:	8a d5       	rcall	.+2836   	; 0x2050 <__floatsisf>
    153c:	69 a3       	std	Y+33, r22	; 0x21
    153e:	7a a3       	std	Y+34, r23	; 0x22
    1540:	8b a3       	std	Y+35, r24	; 0x23
    1542:	9c a3       	std	Y+36, r25	; 0x24
    1544:	58 01       	movw	r10, r16
    1546:	6e 01       	movw	r12, r28
    1548:	f1 e2       	ldi	r31, 0x21	; 33
    154a:	cf 0e       	add	r12, r31
    154c:	d1 1c       	adc	r13, r1
    154e:	94 01       	movw	r18, r8
    1550:	99 0c       	add	r9, r9
    1552:	44 0b       	sbc	r20, r20
    1554:	55 0b       	sbc	r21, r21
    1556:	2d a3       	std	Y+37, r18	; 0x25
    1558:	3e a3       	std	Y+38, r19	; 0x26
    155a:	4f a3       	std	Y+39, r20	; 0x27
    155c:	58 a7       	std	Y+40, r21	; 0x28
		if( speed[i] == 0 ){
			speed[i] = 1;
    155e:	88 24       	eor	r8, r8
    1560:	83 94       	inc	r8
    1562:	91 2c       	mov	r9, r1
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1564:	d1 01       	movw	r26, r2
    1566:	ed 90       	ld	r14, X+
    1568:	fd 90       	ld	r15, X+
    156a:	1d 01       	movw	r2, r26
    156c:	6d a1       	ldd	r22, Y+37	; 0x25
    156e:	7e a1       	ldd	r23, Y+38	; 0x26
    1570:	8f a1       	ldd	r24, Y+39	; 0x27
    1572:	98 a5       	ldd	r25, Y+40	; 0x28
    1574:	6d d5       	rcall	.+2778   	; 0x2050 <__floatsisf>
    1576:	2b 01       	movw	r4, r22
    1578:	3c 01       	movw	r6, r24
    157a:	b7 01       	movw	r22, r14
    157c:	ff 0c       	add	r15, r15
    157e:	88 0b       	sbc	r24, r24
    1580:	99 0b       	sbc	r25, r25
    1582:	66 d5       	rcall	.+2764   	; 0x2050 <__floatsisf>
    1584:	a3 01       	movw	r20, r6
    1586:	92 01       	movw	r18, r4
    1588:	c8 d4       	rcall	.+2448   	; 0x1f1a <__divsf3>
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	69 a1       	ldd	r22, Y+33	; 0x21
    1590:	7a a1       	ldd	r23, Y+34	; 0x22
    1592:	8b a1       	ldd	r24, Y+35	; 0x23
    1594:	9c a1       	ldd	r25, Y+36	; 0x24
    1596:	61 d6       	rcall	.+3266   	; 0x225a <__mulsf3>
    1598:	28 d5       	rcall	.+2640   	; 0x1fea <__fixsfsi>
		if( speed[i] == 0 ){
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	21 f0       	breq	.+8      	; 0x15a8 <ServoControl+0x198>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    15a0:	f8 01       	movw	r30, r16
    15a2:	71 83       	std	Z+1, r23	; 0x01
    15a4:	60 83       	st	Z, r22
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <ServoControl+0x19e>
		if( speed[i] == 0 ){
			speed[i] = 1;
    15a8:	d8 01       	movw	r26, r16
    15aa:	8d 92       	st	X+, r8
    15ac:	9c 92       	st	X, r9
    15ae:	0e 5f       	subi	r16, 0xFE	; 254
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    15b2:	0c 15       	cp	r16, r12
    15b4:	1d 05       	cpc	r17, r13
    15b6:	b1 f6       	brne	.-84     	; 0x1564 <ServoControl+0x154>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    15b8:	89 a5       	ldd	r24, Y+41	; 0x29
    15ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	fc 01       	movw	r30, r24
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	8e 0f       	add	r24, r30
    15d0:	9f 1f       	adc	r25, r31
    15d2:	fc 01       	movw	r30, r24
    15d4:	e4 5f       	subi	r30, 0xF4	; 244
    15d6:	fd 4f       	sbci	r31, 0xFD	; 253
    15d8:	60 89       	ldd	r22, Z+16	; 0x10
    15da:	71 89       	ldd	r23, Z+17	; 0x11
    15dc:	8b ef       	ldi	r24, 0xFB	; 251
    15de:	93 e1       	ldi	r25, 0x13	; 19
    15e0:	b7 d3       	rcall	.+1902   	; 0x1d50 <__divmodhi4>
    15e2:	07 2e       	mov	r0, r23
    15e4:	00 0c       	add	r0, r0
    15e6:	88 0b       	sbc	r24, r24
    15e8:	99 0b       	sbc	r25, r25
    15ea:	32 d5       	rcall	.+2660   	; 0x2050 <__floatsisf>
    15ec:	a3 01       	movw	r20, r6
    15ee:	92 01       	movw	r18, r4
    15f0:	34 d6       	rcall	.+3176   	; 0x225a <__mulsf3>
    15f2:	fb d4       	rcall	.+2550   	; 0x1fea <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    15f4:	16 16       	cp	r1, r22
    15f6:	17 06       	cpc	r1, r23
    15f8:	2c f4       	brge	.+10     	; 0x1604 <ServoControl+0x1f4>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    15fa:	70 93 23 0b 	sts	0x0B23, r23	; 0x800b23 <movingTime+0x1>
    15fe:	60 93 22 0b 	sts	0x0B22, r22	; 0x800b22 <movingTime>
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <ServoControl+0x200>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <movingTime+0x1>
    160c:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <movingTime>
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    1610:	8e ef       	ldi	r24, 0xFE	; 254
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 ab 00 	call	0x156	; 0x156 <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1618:	83 e8       	ldi	r24, 0x83	; 131
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 ae 00 	call	0x15c	; 0x15c <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1620:	60 e2       	ldi	r22, 0x20	; 32
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
    1638:	0f 2e       	mov	r0, r31
    163a:	f0 e9       	ldi	r31, 0x90	; 144
    163c:	cf 2e       	mov	r12, r31
    163e:	f5 e0       	ldi	r31, 0x05	; 5
    1640:	df 2e       	mov	r13, r31
    1642:	f0 2d       	mov	r31, r0
    1644:	02 e0       	ldi	r16, 0x02	; 2
    1646:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1648:	f6 01       	movw	r30, r12
    164a:	61 91       	ld	r22, Z+
    164c:	71 91       	ld	r23, Z+
    164e:	6f 01       	movw	r12, r30
    1650:	c8 01       	movw	r24, r16
    1652:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    1656:	d5 01       	movw	r26, r10
    1658:	ed 90       	ld	r14, X+
    165a:	fd 90       	ld	r15, X+
    165c:	5d 01       	movw	r10, r26
    165e:	c7 01       	movw	r24, r14
    1660:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <dxl_get_lowbyte>
    1664:	bc 01       	movw	r22, r24
    1666:	c8 01       	movw	r24, r16
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dxl_get_highbyte>
    1674:	bc 01       	movw	r22, r24
    1676:	c8 01       	movw	r24, r16
    1678:	02 96       	adiw	r24, 0x02	; 2
    167a:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
    167e:	0d 5f       	subi	r16, 0xFD	; 253
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    1682:	0a 31       	cpi	r16, 0x1A	; 26
    1684:	11 05       	cpc	r17, r1
    1686:	01 f7       	brne	.-64     	; 0x1648 <ServoControl+0x238>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    1688:	8c e1       	ldi	r24, 0x1C	; 28
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 b6 00 	call	0x16c	; 0x16c <dxl_set_txpacket_length>
	dxl_txrx_packet();
    1690:	0e 94 0a 02 	call	0x414	; 0x414 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    1694:	0e 94 a6 00 	call	0x14c	; 0x14c <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <ServoControl+0x290>
    169e:	4c c0       	rjmp	.+152    	; 0x1738 <ServoControl+0x328>
		PrintErrorCode();
    16a0:	e6 dd       	rcall	.-1076   	; 0x126e <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    16a2:	8e ef       	ldi	r24, 0xFE	; 254
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 ab 00 	call	0x156	; 0x156 <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    16aa:	83 e8       	ldi	r24, 0x83	; 131
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 ae 00 	call	0x15c	; 0x15c <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    16b2:	6e e1       	ldi	r22, 0x1E	; 30
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
    16ca:	02 e0       	ldi	r16, 0x02	; 2
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	cd a4       	ldd	r12, Y+45	; 0x2d
    16d0:	de a4       	ldd	r13, Y+46	; 0x2e
    16d2:	eb a4       	ldd	r14, Y+43	; 0x2b
    16d4:	fc a4       	ldd	r15, Y+44	; 0x2c
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    16d6:	f6 01       	movw	r30, r12
    16d8:	61 91       	ld	r22, Z+
    16da:	71 91       	ld	r23, Z+
    16dc:	6f 01       	movw	r12, r30
    16de:	c8 01       	movw	r24, r16
    16e0:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
    16e4:	57 01       	movw	r10, r14
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    16e6:	d7 01       	movw	r26, r14
    16e8:	8d 91       	ld	r24, X+
    16ea:	9d 91       	ld	r25, X+
    16ec:	7d 01       	movw	r14, r26
    16ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <dxl_get_lowbyte>
    16f2:	bc 01       	movw	r22, r24
    16f4:	c8 01       	movw	r24, r16
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    16fc:	f5 01       	movw	r30, r10
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dxl_get_highbyte>
    1706:	bc 01       	movw	r22, r24
    1708:	c8 01       	movw	r24, r16
    170a:	02 96       	adiw	r24, 0x02	; 2
    170c:	0e 94 b1 00 	call	0x162	; 0x162 <dxl_set_txpacket_parameter>
    1710:	0d 5f       	subi	r16, 0xFD	; 253
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    1714:	0a 31       	cpi	r16, 0x1A	; 26
    1716:	11 05       	cpc	r17, r1
    1718:	f1 f6       	brne	.-68     	; 0x16d6 <ServoControl+0x2c6>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    171a:	8c e1       	ldi	r24, 0x1C	; 28
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 b6 00 	call	0x16c	; 0x16c <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1722:	0e 94 0a 02 	call	0x414	; 0x414 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1726:	0e 94 a6 00 	call	0x14c	; 0x14c <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	11 f4       	brne	.+4      	; 0x1734 <ServoControl+0x324>
			PrintErrorCode();
    1730:	9e dd       	rcall	.-1220   	; 0x126e <PrintErrorCode>
    1732:	03 c0       	rjmp	.+6      	; 0x173a <ServoControl+0x32a>
		}else{
			PrintCommStatus(CommStatus);
    1734:	e3 dd       	rcall	.-1082   	; 0x12fc <PrintCommStatus>
    1736:	01 c0       	rjmp	.+2      	; 0x173a <ServoControl+0x32a>
		}
	}else{
		PrintCommStatus(CommStatus);
    1738:	e1 dd       	rcall	.-1086   	; 0x12fc <PrintCommStatus>
	}
}
    173a:	ae 96       	adiw	r28, 0x2e	; 46
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	8f 90       	pop	r8
    175e:	7f 90       	pop	r7
    1760:	6f 90       	pop	r6
    1762:	5f 90       	pop	r5
    1764:	4f 90       	pop	r4
    1766:	3f 90       	pop	r3
    1768:	2f 90       	pop	r2
    176a:	08 95       	ret

0000176c <main>:
int gyroTemp = 0;
int gyroCount = 0;
int mainCount = 0;

#if 1
int main(void){
    176c:	9f 92       	push	r9
    176e:	af 92       	push	r10
    1770:	bf 92       	push	r11
    1772:	cf 92       	push	r12
    1774:	df 92       	push	r13
    1776:	ef 92       	push	r14
    1778:	ff 92       	push	r15
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
	
//	int (*atest)[] = test();
//	int a = atest[0][0];
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    1782:	8c ef       	ldi	r24, 0xFC	; 252
    1784:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    1786:	8e ef       	ldi	r24, 0xFE	; 254
    1788:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    178a:	8f e7       	ldi	r24, 0x7F	; 127
    178c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    178e:	8e e7       	ldi	r24, 0x7E	; 126
    1790:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1792:	80 e7       	ldi	r24, 0x70	; 112
    1794:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1796:	81 e1       	ldi	r24, 0x11	; 17
    1798:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    179a:	e9 da       	rcall	.-2606   	; 0xd6e <MotorInit>
	initSerial();
    179c:	70 d2       	rcall	.+1248   	; 0x1c7e <initSerial>
	int isFinish = 0;
	int gyro = 0; //45 - 455
	int direction = 0;
	int speed = 0;

    sensorInit();
    179e:	6e da       	rcall	.-2852   	; 0xc7c <sensorInit>
	printf( "### start\r\n");
    17a0:	81 ef       	ldi	r24, 0xF1	; 241
    17a2:	97 e0       	ldi	r25, 0x07	; 7
    17a4:	fe d6       	rcall	.+3580   	; 0x25a2 <puts>
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    17a6:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <isCaptureMode>
    17aa:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <isCaptureMode+0x1>
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <main+0x56>
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	68 e1       	ldi	r22, 0x18	; 24
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	8e ef       	ldi	r24, 0xFE	; 254
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dxl_write_byte>
        sensorTest(0);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    17c2:	0f 2e       	mov	r0, r31
    17c4:	fc e2       	ldi	r31, 0x2C	; 44
    17c6:	9f 2e       	mov	r9, r31
    17c8:	f0 2d       	mov	r31, r0
    17ca:	aa 24       	eor	r10, r10
    17cc:	a3 94       	inc	r10
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    17ce:	0f 2e       	mov	r0, r31
    17d0:	fc eb       	ldi	r31, 0xBC	; 188
    17d2:	cf 2e       	mov	r12, r31
    17d4:	f0 2d       	mov	r31, r0
    17d6:	68 94       	set
    17d8:	dd 24       	eor	r13, r13
    17da:	d1 f8       	bld	r13, 1
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    17dc:	0a e2       	ldi	r16, 0x2A	; 42
    17de:	1b e0       	ldi	r17, 0x0B	; 11
    17e0:	0f 2e       	mov	r0, r31
    17e2:	f0 ea       	ldi	r31, 0xA0	; 160
    17e4:	ff 2e       	mov	r15, r31
    17e6:	f0 2d       	mov	r31, r0
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    17e8:	0f 2e       	mov	r0, r31
    17ea:	f0 e5       	ldi	r31, 0x50	; 80
    17ec:	ef 2e       	mov	r14, r31
    17ee:	f0 2d       	mov	r31, r0
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
						break;
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
						PORTC = ~(1 << (LED_MAX - 2));
    17f0:	0f 2e       	mov	r0, r31
    17f2:	ff ed       	ldi	r31, 0xDF	; 223
    17f4:	bf 2e       	mov	r11, r31
    17f6:	f0 2d       	mov	r31, r0
    sensorInit();
	printf( "### start\r\n");
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	50 da       	rcall	.-2912   	; 0xc9e <sensorTest>
		if (gyroValue > 0 && preGyroValue > 0) {
    17fe:	80 91 14 0b 	lds	r24, 0x0B14	; 0x800b14 <gyroValue>
    1802:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <gyroValue+0x1>
    1806:	18 16       	cp	r1, r24
    1808:	19 06       	cpc	r1, r25
    180a:	f4 f4       	brge	.+60     	; 0x1848 <main+0xdc>
    180c:	40 91 16 0b 	lds	r20, 0x0B16	; 0x800b16 <preGyroValue>
    1810:	50 91 17 0b 	lds	r21, 0x0B17	; 0x800b17 <preGyroValue+0x1>
    1814:	14 16       	cp	r1, r20
    1816:	15 06       	cpc	r1, r21
    1818:	bc f4       	brge	.+46     	; 0x1848 <main+0xdc>
			gyro = preGyroValue - gyroValue;
    181a:	48 1b       	sub	r20, r24
    181c:	59 0b       	sbc	r21, r25
			if(gyro != 0 && gyroValue != 0) {
    181e:	a1 f0       	breq	.+40     	; 0x1848 <main+0xdc>
				if (gyro < 0) {
    1820:	1a f0       	brmi	.+6      	; 0x1828 <main+0xbc>
					direction = 300;
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    1822:	dc 2d       	mov	r29, r12
    1824:	cd 2d       	mov	r28, r13
    1826:	02 c0       	rjmp	.+4      	; 0x182c <main+0xc0>
        sensorTest(0);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    1828:	d9 2d       	mov	r29, r9
    182a:	ca 2d       	mov	r28, r10
				}else{
					direction = 700;
					speed = ((float)gyro / (float)410) * 1023;
				}
				// printf( "### GYRO = %d, SPEED = %d, GOAL = %d\r\n", gyro, speed, direction);
				dxl_write_word( 17, P_GOAL_SPEED_L, gyro );
    182c:	60 e2       	ldi	r22, 0x20	; 32
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	81 e1       	ldi	r24, 0x11	; 17
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 19 02 	call	0x432	; 0x432 <dxl_write_word>
				dxl_write_word( 17, P_GOAL_POSITION_L, direction );
    1838:	4d 2f       	mov	r20, r29
    183a:	5c 2f       	mov	r21, r28
    183c:	6e e1       	ldi	r22, 0x1E	; 30
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	81 e1       	ldi	r24, 0x11	; 17
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 19 02 	call	0x432	; 0x432 <dxl_write_word>
		
//        sensorTest(1);
//        sensorTest(2);

//		setMode();
		if (++mainCount > 1000) {
    1848:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <mainCount>
    184c:	90 91 0f 0b 	lds	r25, 0x0B0F	; 0x800b0f <mainCount+0x1>
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	89 3e       	cpi	r24, 0xE9	; 233
    1854:	23 e0       	ldi	r18, 0x03	; 3
    1856:	92 07       	cpc	r25, r18
    1858:	2c f4       	brge	.+10     	; 0x1864 <main+0xf8>
    185a:	90 93 0f 0b 	sts	0x0B0F, r25	; 0x800b0f <mainCount+0x1>
    185e:	80 93 0e 0b 	sts	0x0B0E, r24	; 0x800b0e <mainCount>
    1862:	8f c0       	rjmp	.+286    	; 0x1982 <main+0x216>
			mainCount = 0;
    1864:	10 92 0f 0b 	sts	0x0B0F, r1	; 0x800b0f <mainCount+0x1>
    1868:	10 92 0e 0b 	sts	0x0B0E, r1	; 0x800b0e <mainCount>
			if( checkSerialRead() > 0 ){
    186c:	10 d2       	rcall	.+1056   	; 0x1c8e <checkSerialRead>
    186e:	18 16       	cp	r1, r24
    1870:	19 06       	cpc	r1, r25
    1872:	0c f0       	brlt	.+2      	; 0x1876 <main+0x10a>
    1874:	81 c0       	rjmp	.+258    	; 0x1978 <main+0x20c>
				readData = getReadBuffer();
    1876:	5b d2       	rcall	.+1206   	; 0x1d2e <getReadBuffer>
    1878:	ec 01       	movw	r28, r24
				if( readData != NULL ){
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	09 f4       	brne	.+2      	; 0x1880 <main+0x114>
    187e:	7c c0       	rjmp	.+248    	; 0x1978 <main+0x20c>
	//				printf( "readData=%s\n", &readData[0] );
					split( &readData[0] );
    1880:	9a da       	rcall	.-2764   	; 0xdb6 <split>
					switch( serCmd[0] ){
    1882:	f8 01       	movw	r30, r16
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	86 30       	cpi	r24, 0x06	; 6
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <main+0x124>
    188e:	5a c0       	rjmp	.+180    	; 0x1944 <main+0x1d8>
    1890:	94 f4       	brge	.+36     	; 0x18b6 <main+0x14a>
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <main+0x12e>
    1898:	42 c0       	rjmp	.+132    	; 0x191e <main+0x1b2>
    189a:	34 f4       	brge	.+12     	; 0x18a8 <main+0x13c>
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	01 f1       	breq	.+64     	; 0x18e0 <main+0x174>
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <main+0x13a>
    18a4:	3e c0       	rjmp	.+124    	; 0x1922 <main+0x1b6>
    18a6:	60 c0       	rjmp	.+192    	; 0x1968 <main+0x1fc>
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <main+0x144>
    18ae:	46 c0       	rjmp	.+140    	; 0x193c <main+0x1d0>
    18b0:	0c f4       	brge	.+2      	; 0x18b4 <main+0x148>
    18b2:	38 c0       	rjmp	.+112    	; 0x1924 <main+0x1b8>
    18b4:	45 c0       	rjmp	.+138    	; 0x1940 <main+0x1d4>
    18b6:	89 30       	cpi	r24, 0x09	; 9
    18b8:	91 05       	cpc	r25, r1
    18ba:	51 f1       	breq	.+84     	; 0x1910 <main+0x1a4>
    18bc:	34 f4       	brge	.+12     	; 0x18ca <main+0x15e>
    18be:	87 30       	cpi	r24, 0x07	; 7
    18c0:	91 05       	cpc	r25, r1
    18c2:	b1 f0       	breq	.+44     	; 0x18f0 <main+0x184>
    18c4:	08 97       	sbiw	r24, 0x08	; 8
    18c6:	f9 f0       	breq	.+62     	; 0x1906 <main+0x19a>
    18c8:	4f c0       	rjmp	.+158    	; 0x1968 <main+0x1fc>
    18ca:	8b 30       	cpi	r24, 0x0B	; 11
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <main+0x166>
    18d0:	4e c0       	rjmp	.+156    	; 0x196e <main+0x202>
    18d2:	0c f4       	brge	.+2      	; 0x18d6 <main+0x16a>
    18d4:	40 c0       	rjmp	.+128    	; 0x1956 <main+0x1ea>
    18d6:	87 3e       	cpi	r24, 0xE7	; 231
    18d8:	93 40       	sbci	r25, 0x03	; 3
    18da:	09 f4       	brne	.+2      	; 0x18de <main+0x172>
    18dc:	6c c0       	rjmp	.+216    	; 0x19b6 <main+0x24a>
    18de:	44 c0       	rjmp	.+136    	; 0x1968 <main+0x1fc>
					case EVT_ACTION:
						ServoControl( serCmd[1] );
    18e0:	f8 01       	movw	r30, r16
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	94 dd       	rcall	.-1240   	; 0x1410 <ServoControl>
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	33 da       	rcall	.-2970   	; 0xd54 <sendAck>
						break;
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <main+0x202>
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
    18f0:	f8 01       	movw	r30, r16
    18f2:	64 81       	ldd	r22, Z+4	; 0x04
    18f4:	75 81       	ldd	r23, Z+5	; 0x05
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	72 dc       	rcall	.-1820   	; 0x11e0 <startMotion>
						PORTC = ~(1 << (LED_MAX - 2));
    18fc:	b8 b8       	out	0x08, r11	; 8
						sendAck(1);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	28 da       	rcall	.-2992   	; 0xd54 <sendAck>
						break;
    1904:	34 c0       	rjmp	.+104    	; 0x196e <main+0x202>
					case EVT_STOP_MOTION:
						stopMotion();
    1906:	9e dc       	rcall	.-1732   	; 0x1244 <stopMotion>
						sendAck(1);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	23 da       	rcall	.-3002   	; 0xd54 <sendAck>
						break;
    190e:	2f c0       	rjmp	.+94     	; 0x196e <main+0x202>
					case EVT_FORCE_MOTION:
						forceMotion( serCmd[1], serCmd[2] );
    1910:	f8 01       	movw	r30, r16
    1912:	64 81       	ldd	r22, Z+4	; 0x04
    1914:	75 81       	ldd	r23, Z+5	; 0x05
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	7d dc       	rcall	.-1798   	; 0x1216 <forceMotion>
						break;
    191c:	28 c0       	rjmp	.+80     	; 0x196e <main+0x202>
					case EVT_GET_NOW_ANGLE:
						getAngle();
    191e:	99 da       	rcall	.-2766   	; 0xe52 <getAngle>
						break;
    1920:	26 c0       	rjmp	.+76     	; 0x196e <main+0x202>
					case EVT_SET_ANGLE:
						setAngle();
    1922:	76 da       	rcall	.-2836   	; 0xe10 <setAngle>
					case EVT_GET_ACT_ANGLE:
						if( serCmd[1] >= ACT_MAX ){
    1924:	f8 01       	movw	r30, r16
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	82 33       	cpi	r24, 0x32	; 50
    192c:	91 05       	cpc	r25, r1
    192e:	24 f0       	brlt	.+8      	; 0x1938 <main+0x1cc>
							sendAck(0);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0f da       	rcall	.-3042   	; 0xd54 <sendAck>
    1936:	1b c0       	rjmp	.+54     	; 0x196e <main+0x202>
						}else{
							sendActAngle(serCmd[1]);
    1938:	f7 da       	rcall	.-2578   	; 0xf28 <sendActAngle>
    193a:	19 c0       	rjmp	.+50     	; 0x196e <main+0x202>
						}
						break;
					case EVT_GET_LOAD:
						getLoad();
    193c:	5a db       	rcall	.-2380   	; 0xff2 <getLoad>
	//					printf( "%d\n", movingTime );
						break;
    193e:	17 c0       	rjmp	.+46     	; 0x196e <main+0x202>
					case EVT_GET_VOLTAGE:
						getVoltage();
    1940:	d3 db       	rcall	.-2138   	; 0x10e8 <getVoltage>
						break;
    1942:	15 c0       	rjmp	.+42     	; 0x196e <main+0x202>
					case EVT_TORQUE_DISABLE:
						dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	68 e1       	ldi	r22, 0x18	; 24
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	8e ef       	ldi	r24, 0xFE	; 254
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 51 02 	call	0x4a2	; 0x4a2 <dxl_write_byte>
						break;
    1954:	0c c0       	rjmp	.+24     	; 0x196e <main+0x202>
					case EVT_WATCH_DOG:
						watchDogCnt = 0;
    1956:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <watchDogCnt>
    195a:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <watchDogCnt+0x1>
    195e:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <watchDogCnt+0x2>
    1962:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <watchDogCnt+0x3>
						break;
    1966:	03 c0       	rjmp	.+6      	; 0x196e <main+0x202>
	//					printf( "finish\n");
						sendAck(999);
						isFinish = 1;
						break;
					default:
						sendAck(0);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	f3 d9       	rcall	.-3098   	; 0xd54 <sendAck>
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    196e:	fe 01       	movw	r30, r28
    1970:	2e 2d       	mov	r18, r14
    1972:	11 92       	st	Z+, r1
    1974:	2a 95       	dec	r18
    1976:	e9 f7       	brne	.-6      	; 0x1972 <main+0x206>
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1978:	f8 01       	movw	r30, r16
    197a:	2f 2d       	mov	r18, r15
    197c:	11 92       	st	Z+, r1
    197e:	2a 95       	dec	r18
    1980:	e9 f7       	brne	.-6      	; 0x197c <main+0x210>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1982:	89 ef       	ldi	r24, 0xF9	; 249
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <main+0x21a>
    198a:	00 c0       	rjmp	.+0      	; 0x198c <main+0x220>
    198c:	00 00       	nop
			sensorValueOld[2] = sensorValue[2];
#endif
		}
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    198e:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <watchDogCnt>
    1992:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <watchDogCnt+0x1>
    1996:	a0 91 1c 0b 	lds	r26, 0x0B1C	; 0x800b1c <watchDogCnt+0x2>
    199a:	b0 91 1d 0b 	lds	r27, 0x0B1D	; 0x800b1d <watchDogCnt+0x3>
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	a1 1d       	adc	r26, r1
    19a2:	b1 1d       	adc	r27, r1
    19a4:	80 93 1a 0b 	sts	0x0B1A, r24	; 0x800b1a <watchDogCnt>
    19a8:	90 93 1b 0b 	sts	0x0B1B, r25	; 0x800b1b <watchDogCnt+0x1>
    19ac:	a0 93 1c 0b 	sts	0x0B1C, r26	; 0x800b1c <watchDogCnt+0x2>
    19b0:	b0 93 1d 0b 	sts	0x0B1D, r27	; 0x800b1d <watchDogCnt+0x3>
		if (caputureCount1 == 25){
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
    19b4:	21 cf       	rjmp	.-446    	; 0x17f8 <main+0x8c>
						break;
					case EVT_MOTION_EDIT:
						break;
					case 999:
	//					printf( "finish\n");
						sendAck(999);
    19b6:	87 ee       	ldi	r24, 0xE7	; 231
    19b8:	93 e0       	ldi	r25, 0x03	; 3
    19ba:	cc d9       	rcall	.-3176   	; 0xd54 <sendAck>
						break;
					default:
						sendAck(0);
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	cf dc       	rcall	.-1634   	; 0x1364 <MotorControl>
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
}
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	08 95       	ret

000019e2 <getAngleX>:
		mGyroCount = 0;
		mTempX = 0;
	}
}

float getAngleX() {
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
    19fa:	20 91 a4 05 	lds	r18, 0x05A4	; 0x8005a4 <GYRO_X_MIN>
    19fe:	30 91 a5 05 	lds	r19, 0x05A5	; 0x8005a5 <GYRO_X_MIN+0x1>
    1a02:	40 91 a6 05 	lds	r20, 0x05A6	; 0x8005a6 <GYRO_X_MIN+0x2>
    1a06:	50 91 a7 05 	lds	r21, 0x05A7	; 0x8005a7 <GYRO_X_MIN+0x3>
    1a0a:	60 91 a0 05 	lds	r22, 0x05A0	; 0x8005a0 <GYRO_X_MAX>
    1a0e:	70 91 a1 05 	lds	r23, 0x05A1	; 0x8005a1 <GYRO_X_MAX+0x1>
    1a12:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <GYRO_X_MAX+0x2>
    1a16:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <GYRO_X_MAX+0x3>
    1a1a:	00 d2       	rcall	.+1024   	; 0x1e1c <__addsf3>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	1a d4       	rcall	.+2100   	; 0x225a <__mulsf3>
    1a26:	6b 01       	movw	r12, r22
    1a28:	7c 01       	movw	r14, r24
	float gravityX = (mGyroX - gyroXMid)/(gyroXMid/2);
    1a2a:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mGyroX>
    1a2e:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mGyroX+0x1>
    1a32:	bc 01       	movw	r22, r24
    1a34:	99 0f       	add	r25, r25
    1a36:	88 0b       	sbc	r24, r24
    1a38:	99 0b       	sbc	r25, r25
    1a3a:	0a d3       	rcall	.+1556   	; 0x2050 <__floatsisf>
    1a3c:	a7 01       	movw	r20, r14
    1a3e:	96 01       	movw	r18, r12
    1a40:	ec d1       	rcall	.+984    	; 0x1e1a <__subsf3>
    1a42:	4b 01       	movw	r8, r22
    1a44:	5c 01       	movw	r10, r24
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	03 d4       	rcall	.+2054   	; 0x225a <__mulsf3>
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	c5 01       	movw	r24, r10
    1a5a:	b4 01       	movw	r22, r8
    1a5c:	5e d2       	rcall	.+1212   	; 0x1f1a <__divsf3>
    1a5e:	e6 2e       	mov	r14, r22
    1a60:	f7 2e       	mov	r15, r23
    1a62:	08 2f       	mov	r16, r24
    1a64:	19 2f       	mov	r17, r25
	char *sign;
	if (signbit(gravityX)) {
    1a66:	97 fd       	sbrc	r25, 7
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <getAngleX+0x8e>
		sign = "-";
	} else {
		sign = "+";
    1a6a:	cc e4       	ldi	r28, 0x4C	; 76
    1a6c:	d8 e0       	ldi	r29, 0x08	; 8
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <getAngleX+0x92>
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
	float gravityX = (mGyroX - gyroXMid)/(gyroXMid/2);
	char *sign;
	if (signbit(gravityX)) {
		sign = "-";
    1a70:	ca e4       	ldi	r28, 0x4A	; 74
    1a72:	d8 e0       	ldi	r29, 0x08	; 8
	} else {
		sign = "+";
	}
	printf( "### gravityX %s%d.%d%dG\r\n", sign, (int)(gravityX), abs(((int)(gravityX * 10) % 10)), abs(((int)(gravityX * 100) % 10)));
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	48 ec       	ldi	r20, 0xC8	; 200
    1a7a:	52 e4       	ldi	r21, 0x42	; 66
    1a7c:	6e 2d       	mov	r22, r14
    1a7e:	7f 2d       	mov	r23, r15
    1a80:	80 2f       	mov	r24, r16
    1a82:	91 2f       	mov	r25, r17
    1a84:	ea d3       	rcall	.+2004   	; 0x225a <__mulsf3>
    1a86:	b1 d2       	rcall	.+1378   	; 0x1fea <__fixsfsi>
    1a88:	cb 01       	movw	r24, r22
    1a8a:	6a e0       	ldi	r22, 0x0A	; 10
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	60 d1       	rcall	.+704    	; 0x1d50 <__divmodhi4>
    1a90:	9c 01       	movw	r18, r24
    1a92:	99 23       	and	r25, r25
    1a94:	24 f4       	brge	.+8      	; 0x1a9e <getAngleX+0xbc>
    1a96:	22 27       	eor	r18, r18
    1a98:	33 27       	eor	r19, r19
    1a9a:	28 1b       	sub	r18, r24
    1a9c:	39 0b       	sbc	r19, r25
    1a9e:	3f 93       	push	r19
    1aa0:	2f 93       	push	r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	6e 2d       	mov	r22, r14
    1aac:	7f 2d       	mov	r23, r15
    1aae:	80 2f       	mov	r24, r16
    1ab0:	91 2f       	mov	r25, r17
    1ab2:	d3 d3       	rcall	.+1958   	; 0x225a <__mulsf3>
    1ab4:	9a d2       	rcall	.+1332   	; 0x1fea <__fixsfsi>
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	6a e0       	ldi	r22, 0x0A	; 10
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	49 d1       	rcall	.+658    	; 0x1d50 <__divmodhi4>
    1abe:	9c 01       	movw	r18, r24
    1ac0:	99 23       	and	r25, r25
    1ac2:	24 f4       	brge	.+8      	; 0x1acc <getAngleX+0xea>
    1ac4:	22 27       	eor	r18, r18
    1ac6:	33 27       	eor	r19, r19
    1ac8:	28 1b       	sub	r18, r24
    1aca:	39 0b       	sbc	r19, r25
    1acc:	3f 93       	push	r19
    1ace:	2f 93       	push	r18
    1ad0:	6e 2d       	mov	r22, r14
    1ad2:	7f 2d       	mov	r23, r15
    1ad4:	80 2f       	mov	r24, r16
    1ad6:	91 2f       	mov	r25, r17
    1ad8:	88 d2       	rcall	.+1296   	; 0x1fea <__fixsfsi>
    1ada:	7f 93       	push	r23
    1adc:	6f 93       	push	r22
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	8e e4       	ldi	r24, 0x4E	; 78
    1ae4:	98 e0       	ldi	r25, 0x08	; 8
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	48 d5       	rcall	.+2704   	; 0x257c <printf>
	
	// ラジアンから度への変換
	float angleX = asin(gravityX) * 180 / PI;
    1aec:	6e 2d       	mov	r22, r14
    1aee:	7f 2d       	mov	r23, r15
    1af0:	80 2f       	mov	r24, r16
    1af2:	91 2f       	mov	r25, r17
    1af4:	f7 d1       	rcall	.+1006   	; 0x1ee4 <asin>
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	44 e3       	ldi	r20, 0x34	; 52
    1afc:	53 e4       	ldi	r21, 0x43	; 67
    1afe:	ad d3       	rcall	.+1882   	; 0x225a <__mulsf3>
    1b00:	28 ed       	ldi	r18, 0xD8	; 216
    1b02:	3f e0       	ldi	r19, 0x0F	; 15
    1b04:	49 e4       	ldi	r20, 0x49	; 73
    1b06:	50 e4       	ldi	r21, 0x40	; 64
    1b08:	08 d2       	rcall	.+1040   	; 0x1f1a <__divsf3>
	
	return angleX;
    1b0a:	2d b7       	in	r18, 0x3d	; 61
    1b0c:	3e b7       	in	r19, 0x3e	; 62
    1b0e:	26 5f       	subi	r18, 0xF6	; 246
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	3e bf       	out	0x3e, r19	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	2d bf       	out	0x3d, r18	; 61
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	08 95       	ret

00001b36 <setGyroX>:

int mAngleX = 0;
void setGyroX(int);
float getAngleX();

void setGyroX(int gyroX) {
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
	// Get AVEREGE
	if (mGyroCount >= 0 && mGyroCount < AVEREGE_TIMES) {
    1b3e:	20 91 ca 0b 	lds	r18, 0x0BCA	; 0x800bca <mGyroCount>
    1b42:	30 91 cb 0b 	lds	r19, 0x0BCB	; 0x800bcb <mGyroCount+0x1>
    1b46:	24 36       	cpi	r18, 0x64	; 100
    1b48:	31 05       	cpc	r19, r1
    1b4a:	f8 f4       	brcc	.+62     	; 0x1b8a <setGyroX+0x54>
		mTempX = mTempX + gyroX;
    1b4c:	09 2e       	mov	r0, r25
    1b4e:	00 0c       	add	r0, r0
    1b50:	aa 0b       	sbc	r26, r26
    1b52:	bb 0b       	sbc	r27, r27
    1b54:	40 91 ce 0b 	lds	r20, 0x0BCE	; 0x800bce <mTempX>
    1b58:	50 91 cf 0b 	lds	r21, 0x0BCF	; 0x800bcf <mTempX+0x1>
    1b5c:	60 91 d0 0b 	lds	r22, 0x0BD0	; 0x800bd0 <mTempX+0x2>
    1b60:	70 91 d1 0b 	lds	r23, 0x0BD1	; 0x800bd1 <mTempX+0x3>
    1b64:	84 0f       	add	r24, r20
    1b66:	95 1f       	adc	r25, r21
    1b68:	a6 1f       	adc	r26, r22
    1b6a:	b7 1f       	adc	r27, r23
    1b6c:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <mTempX>
    1b70:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <mTempX+0x1>
    1b74:	a0 93 d0 0b 	sts	0x0BD0, r26	; 0x800bd0 <mTempX+0x2>
    1b78:	b0 93 d1 0b 	sts	0x0BD1, r27	; 0x800bd1 <mTempX+0x3>
		mGyroCount++;
    1b7c:	2f 5f       	subi	r18, 0xFF	; 255
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	30 93 cb 0b 	sts	0x0BCB, r19	; 0x800bcb <mGyroCount+0x1>
    1b84:	20 93 ca 0b 	sts	0x0BCA, r18	; 0x800bca <mGyroCount>
    1b88:	75 c0       	rjmp	.+234    	; 0x1c74 <setGyroX+0x13e>
	} else if (mGyroCount >= AVEREGE_TIMES)  {
    1b8a:	24 36       	cpi	r18, 0x64	; 100
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	0c f4       	brge	.+2      	; 0x1b92 <setGyroX+0x5c>
    1b90:	62 c0       	rjmp	.+196    	; 0x1c56 <setGyroX+0x120>
		mGyroX = mTempX / AVEREGE_TIMES;
    1b92:	60 91 ce 0b 	lds	r22, 0x0BCE	; 0x800bce <mTempX>
    1b96:	70 91 cf 0b 	lds	r23, 0x0BCF	; 0x800bcf <mTempX+0x1>
    1b9a:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <mTempX+0x2>
    1b9e:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <mTempX+0x3>
    1ba2:	24 e6       	ldi	r18, 0x64	; 100
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	e5 d0       	rcall	.+458    	; 0x1d76 <__divmodsi4>
    1bac:	20 93 cc 0b 	sts	0x0BCC, r18	; 0x800bcc <mGyroX>
    1bb0:	30 93 cd 0b 	sts	0x0BCD, r19	; 0x800bcd <mGyroX+0x1>
		printf( "### mGyroX %d\r\n", mGyroX);
    1bb4:	3f 93       	push	r19
    1bb6:	2f 93       	push	r18
    1bb8:	88 e6       	ldi	r24, 0x68	; 104
    1bba:	98 e0       	ldi	r25, 0x08	; 8
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	dd d4       	rcall	.+2490   	; 0x257c <printf>
		mGyroCount = 0;
    1bc2:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <mGyroCount+0x1>
    1bc6:	10 92 ca 0b 	sts	0x0BCA, r1	; 0x800bca <mGyroCount>
		mTempX = 0;
    1bca:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <mTempX>
    1bce:	10 92 cf 0b 	sts	0x0BCF, r1	; 0x800bcf <mTempX+0x1>
    1bd2:	10 92 d0 0b 	sts	0x0BD0, r1	; 0x800bd0 <mTempX+0x2>
    1bd6:	10 92 d1 0b 	sts	0x0BD1, r1	; 0x800bd1 <mTempX+0x3>
		
		float angleX = getAngleX();
    1bda:	03 df       	rcall	.-506    	; 0x19e2 <getAngleX>
    1bdc:	6b 01       	movw	r12, r22
    1bde:	7c 01       	movw	r14, r24
		printf( "### getAngleX %d.%d%d\r\n", (int)(angleX), abs(((int)(angleX * 10) % 10)), abs(((int)(angleX * 100) % 10)));
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	48 ec       	ldi	r20, 0xC8	; 200
    1be6:	52 e4       	ldi	r21, 0x42	; 66
    1be8:	38 d3       	rcall	.+1648   	; 0x225a <__mulsf3>
    1bea:	ff d1       	rcall	.+1022   	; 0x1fea <__fixsfsi>
    1bec:	cb 01       	movw	r24, r22
    1bee:	6a e0       	ldi	r22, 0x0A	; 10
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	ae d0       	rcall	.+348    	; 0x1d50 <__divmodhi4>
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	99 23       	and	r25, r25
    1bf8:	24 f4       	brge	.+8      	; 0x1c02 <setGyroX+0xcc>
    1bfa:	22 27       	eor	r18, r18
    1bfc:	33 27       	eor	r19, r19
    1bfe:	28 1b       	sub	r18, r24
    1c00:	39 0b       	sbc	r19, r25
    1c02:	3f 93       	push	r19
    1c04:	2f 93       	push	r18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	c7 01       	movw	r24, r14
    1c10:	b6 01       	movw	r22, r12
    1c12:	23 d3       	rcall	.+1606   	; 0x225a <__mulsf3>
    1c14:	ea d1       	rcall	.+980    	; 0x1fea <__fixsfsi>
    1c16:	cb 01       	movw	r24, r22
    1c18:	6a e0       	ldi	r22, 0x0A	; 10
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	99 d0       	rcall	.+306    	; 0x1d50 <__divmodhi4>
    1c1e:	9c 01       	movw	r18, r24
    1c20:	99 23       	and	r25, r25
    1c22:	24 f4       	brge	.+8      	; 0x1c2c <setGyroX+0xf6>
    1c24:	22 27       	eor	r18, r18
    1c26:	33 27       	eor	r19, r19
    1c28:	28 1b       	sub	r18, r24
    1c2a:	39 0b       	sbc	r19, r25
    1c2c:	3f 93       	push	r19
    1c2e:	2f 93       	push	r18
    1c30:	c7 01       	movw	r24, r14
    1c32:	b6 01       	movw	r22, r12
    1c34:	da d1       	rcall	.+948    	; 0x1fea <__fixsfsi>
    1c36:	7f 93       	push	r23
    1c38:	6f 93       	push	r22
    1c3a:	88 e7       	ldi	r24, 0x78	; 120
    1c3c:	98 e0       	ldi	r25, 0x08	; 8
    1c3e:	9f 93       	push	r25
    1c40:	8f 93       	push	r24
    1c42:	9c d4       	rcall	.+2360   	; 0x257c <printf>
    1c44:	8d b7       	in	r24, 0x3d	; 61
    1c46:	9e b7       	in	r25, 0x3e	; 62
    1c48:	0c 96       	adiw	r24, 0x0c	; 12
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	9e bf       	out	0x3e, r25	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	8d bf       	out	0x3d, r24	; 61
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <setGyroX+0x13e>
		
	} else {
		printf( "### Oops!\r\n");
    1c56:	80 e9       	ldi	r24, 0x90	; 144
    1c58:	98 e0       	ldi	r25, 0x08	; 8
    1c5a:	a3 d4       	rcall	.+2374   	; 0x25a2 <puts>
		mGyroCount = 0;
    1c5c:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <mGyroCount+0x1>
    1c60:	10 92 ca 0b 	sts	0x0BCA, r1	; 0x800bca <mGyroCount>
		mTempX = 0;
    1c64:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <mTempX>
    1c68:	10 92 cf 0b 	sts	0x0BCF, r1	; 0x800bcf <mTempX+0x1>
    1c6c:	10 92 d0 0b 	sts	0x0BD0, r1	; 0x800bd0 <mTempX+0x2>
    1c70:	10 92 d1 0b 	sts	0x0BD1, r1	; 0x800bd1 <mTempX+0x3>
	}
}
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	08 95       	ret

00001c7e <initSerial>:
			}
		}
		//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	71 ee       	ldi	r23, 0xE1	; 225
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 0b 06 	call	0xc16	; 0xc16 <serial_initialize>
    1c8a:	78 94       	sei
    1c8c:	08 95       	ret

00001c8e <checkSerialRead>:
    1c8e:	0e 94 08 05 	call	0xa10	; 0xa10 <serial_get_qstate>
    1c92:	18 16       	cp	r1, r24
    1c94:	19 06       	cpc	r1, r25
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <checkSerialRead+0xc>
    1c98:	3e c0       	rjmp	.+124    	; 0x1d16 <checkSerialRead+0x88>
    1c9a:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <__iob>
    1c9e:	90 91 31 0c 	lds	r25, 0x0C31	; 0x800c31 <__iob+0x1>
    1ca2:	2e d4       	rcall	.+2140   	; 0x2500 <fgetc>
    1ca4:	8a 30       	cpi	r24, 0x0A	; 10
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <checkSerialRead+0x1e>
    1ca8:	8d 30       	cpi	r24, 0x0D	; 13
    1caa:	91 f4       	brne	.+36     	; 0x1cd0 <checkSerialRead+0x42>
    1cac:	80 91 22 0c 	lds	r24, 0x0C22	; 0x800c22 <buffCnt>
    1cb0:	90 91 23 0c 	lds	r25, 0x0C23	; 0x800c23 <buffCnt+0x1>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	19 06       	cpc	r1, r25
    1cb8:	8c f5       	brge	.+98     	; 0x1d1c <checkSerialRead+0x8e>
    1cba:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <buffCnt+0x1>
    1cbe:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <buffCnt>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <isRead+0x1>
    1cca:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <isRead>
    1cce:	08 95       	ret
    1cd0:	88 23       	and	r24, r24
    1cd2:	39 f1       	breq	.+78     	; 0x1d22 <checkSerialRead+0x94>
    1cd4:	20 91 22 0c 	lds	r18, 0x0C22	; 0x800c22 <buffCnt>
    1cd8:	30 91 23 0c 	lds	r19, 0x0C23	; 0x800c23 <buffCnt+0x1>
    1cdc:	a9 01       	movw	r20, r18
    1cde:	4f 5f       	subi	r20, 0xFF	; 255
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	50 93 23 0c 	sts	0x0C23, r21	; 0x800c23 <buffCnt+0x1>
    1ce6:	40 93 22 0c 	sts	0x0C22, r20	; 0x800c22 <buffCnt>
    1cea:	f9 01       	movw	r30, r18
    1cec:	ee 52       	subi	r30, 0x2E	; 46
    1cee:	f4 4f       	sbci	r31, 0xF4	; 244
    1cf0:	80 83       	st	Z, r24
    1cf2:	80 91 22 0c 	lds	r24, 0x0C22	; 0x800c22 <buffCnt>
    1cf6:	90 91 23 0c 	lds	r25, 0x0C23	; 0x800c23 <buffCnt+0x1>
    1cfa:	8f 34       	cpi	r24, 0x4F	; 79
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	a4 f0       	brlt	.+40     	; 0x1d28 <checkSerialRead+0x9a>
    1d00:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <buffCnt+0x1>
    1d04:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <buffCnt>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 25 0c 	sts	0x0C25, r25	; 0x800c25 <isRead+0x1>
    1d10:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <isRead>
    1d14:	08 95       	ret
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	08 95       	ret
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	08 95       	ret
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	08 95       	ret
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	08 95       	ret

00001d2e <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
    1d2e:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <isRead>
    1d32:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <isRead+0x1>
    1d36:	18 16       	cp	r1, r24
    1d38:	19 06       	cpc	r1, r25
    1d3a:	3c f4       	brge	.+14     	; 0x1d4a <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
    1d3c:	10 92 25 0c 	sts	0x0C25, r1	; 0x800c25 <isRead+0x1>
    1d40:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <isRead>
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
    1d44:	82 ed       	ldi	r24, 0xD2	; 210
    1d46:	9b e0       	ldi	r25, 0x0B	; 11
    1d48:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
    1d4e:	08 95       	ret

00001d50 <__divmodhi4>:
    1d50:	97 fb       	bst	r25, 7
    1d52:	07 2e       	mov	r0, r23
    1d54:	16 f4       	brtc	.+4      	; 0x1d5a <__divmodhi4+0xa>
    1d56:	00 94       	com	r0
    1d58:	06 d0       	rcall	.+12     	; 0x1d66 <__divmodhi4_neg1>
    1d5a:	77 fd       	sbrc	r23, 7
    1d5c:	08 d0       	rcall	.+16     	; 0x1d6e <__divmodhi4_neg2>
    1d5e:	27 d0       	rcall	.+78     	; 0x1dae <__udivmodhi4>
    1d60:	07 fc       	sbrc	r0, 7
    1d62:	05 d0       	rcall	.+10     	; 0x1d6e <__divmodhi4_neg2>
    1d64:	3e f4       	brtc	.+14     	; 0x1d74 <__divmodhi4_exit>

00001d66 <__divmodhi4_neg1>:
    1d66:	90 95       	com	r25
    1d68:	81 95       	neg	r24
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	08 95       	ret

00001d6e <__divmodhi4_neg2>:
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255

00001d74 <__divmodhi4_exit>:
    1d74:	08 95       	ret

00001d76 <__divmodsi4>:
    1d76:	05 2e       	mov	r0, r21
    1d78:	97 fb       	bst	r25, 7
    1d7a:	16 f4       	brtc	.+4      	; 0x1d80 <__divmodsi4+0xa>
    1d7c:	00 94       	com	r0
    1d7e:	0f d0       	rcall	.+30     	; 0x1d9e <__negsi2>
    1d80:	57 fd       	sbrc	r21, 7
    1d82:	05 d0       	rcall	.+10     	; 0x1d8e <__divmodsi4_neg2>
    1d84:	28 d0       	rcall	.+80     	; 0x1dd6 <__udivmodsi4>
    1d86:	07 fc       	sbrc	r0, 7
    1d88:	02 d0       	rcall	.+4      	; 0x1d8e <__divmodsi4_neg2>
    1d8a:	46 f4       	brtc	.+16     	; 0x1d9c <__divmodsi4_exit>
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <__negsi2>

00001d8e <__divmodsi4_neg2>:
    1d8e:	50 95       	com	r21
    1d90:	40 95       	com	r20
    1d92:	30 95       	com	r19
    1d94:	21 95       	neg	r18
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	4f 4f       	sbci	r20, 0xFF	; 255
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255

00001d9c <__divmodsi4_exit>:
    1d9c:	08 95       	ret

00001d9e <__negsi2>:
    1d9e:	90 95       	com	r25
    1da0:	80 95       	com	r24
    1da2:	70 95       	com	r23
    1da4:	61 95       	neg	r22
    1da6:	7f 4f       	sbci	r23, 0xFF	; 255
    1da8:	8f 4f       	sbci	r24, 0xFF	; 255
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <__udivmodhi4>:
    1dae:	aa 1b       	sub	r26, r26
    1db0:	bb 1b       	sub	r27, r27
    1db2:	51 e1       	ldi	r21, 0x11	; 17
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <__udivmodhi4_ep>

00001db6 <__udivmodhi4_loop>:
    1db6:	aa 1f       	adc	r26, r26
    1db8:	bb 1f       	adc	r27, r27
    1dba:	a6 17       	cp	r26, r22
    1dbc:	b7 07       	cpc	r27, r23
    1dbe:	10 f0       	brcs	.+4      	; 0x1dc4 <__udivmodhi4_ep>
    1dc0:	a6 1b       	sub	r26, r22
    1dc2:	b7 0b       	sbc	r27, r23

00001dc4 <__udivmodhi4_ep>:
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	5a 95       	dec	r21
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <__udivmodhi4_loop>
    1dcc:	80 95       	com	r24
    1dce:	90 95       	com	r25
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	08 95       	ret

00001dd6 <__udivmodsi4>:
    1dd6:	a1 e2       	ldi	r26, 0x21	; 33
    1dd8:	1a 2e       	mov	r1, r26
    1dda:	aa 1b       	sub	r26, r26
    1ddc:	bb 1b       	sub	r27, r27
    1dde:	fd 01       	movw	r30, r26
    1de0:	0d c0       	rjmp	.+26     	; 0x1dfc <__udivmodsi4_ep>

00001de2 <__udivmodsi4_loop>:
    1de2:	aa 1f       	adc	r26, r26
    1de4:	bb 1f       	adc	r27, r27
    1de6:	ee 1f       	adc	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	a2 17       	cp	r26, r18
    1dec:	b3 07       	cpc	r27, r19
    1dee:	e4 07       	cpc	r30, r20
    1df0:	f5 07       	cpc	r31, r21
    1df2:	20 f0       	brcs	.+8      	; 0x1dfc <__udivmodsi4_ep>
    1df4:	a2 1b       	sub	r26, r18
    1df6:	b3 0b       	sbc	r27, r19
    1df8:	e4 0b       	sbc	r30, r20
    1dfa:	f5 0b       	sbc	r31, r21

00001dfc <__udivmodsi4_ep>:
    1dfc:	66 1f       	adc	r22, r22
    1dfe:	77 1f       	adc	r23, r23
    1e00:	88 1f       	adc	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	1a 94       	dec	r1
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <__udivmodsi4_loop>
    1e08:	60 95       	com	r22
    1e0a:	70 95       	com	r23
    1e0c:	80 95       	com	r24
    1e0e:	90 95       	com	r25
    1e10:	9b 01       	movw	r18, r22
    1e12:	ac 01       	movw	r20, r24
    1e14:	bd 01       	movw	r22, r26
    1e16:	cf 01       	movw	r24, r30
    1e18:	08 95       	ret

00001e1a <__subsf3>:
    1e1a:	50 58       	subi	r21, 0x80	; 128

00001e1c <__addsf3>:
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	aa 27       	eor	r26, r26
    1e20:	0e d0       	rcall	.+28     	; 0x1e3e <__addsf3x>
    1e22:	dd c1       	rjmp	.+954    	; 0x21de <__fp_round>
    1e24:	ce d1       	rcall	.+924    	; 0x21c2 <__fp_pscA>
    1e26:	30 f0       	brcs	.+12     	; 0x1e34 <__addsf3+0x18>
    1e28:	d3 d1       	rcall	.+934    	; 0x21d0 <__fp_pscB>
    1e2a:	20 f0       	brcs	.+8      	; 0x1e34 <__addsf3+0x18>
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <__addsf3+0x1e>
    1e2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <__addsf3+0x1a>
    1e32:	1e f4       	brtc	.+6      	; 0x1e3a <__addsf3+0x1e>
    1e34:	8d c1       	rjmp	.+794    	; 0x2150 <__fp_nan>
    1e36:	0e f4       	brtc	.+2      	; 0x1e3a <__addsf3+0x1e>
    1e38:	e0 95       	com	r30
    1e3a:	e7 fb       	bst	r30, 7
    1e3c:	83 c1       	rjmp	.+774    	; 0x2144 <__fp_inf>

00001e3e <__addsf3x>:
    1e3e:	e9 2f       	mov	r30, r25
    1e40:	df d1       	rcall	.+958    	; 0x2200 <__fp_split3>
    1e42:	80 f3       	brcs	.-32     	; 0x1e24 <__addsf3+0x8>
    1e44:	ba 17       	cp	r27, r26
    1e46:	62 07       	cpc	r22, r18
    1e48:	73 07       	cpc	r23, r19
    1e4a:	84 07       	cpc	r24, r20
    1e4c:	95 07       	cpc	r25, r21
    1e4e:	18 f0       	brcs	.+6      	; 0x1e56 <__addsf3x+0x18>
    1e50:	71 f4       	brne	.+28     	; 0x1e6e <__addsf3x+0x30>
    1e52:	9e f5       	brtc	.+102    	; 0x1eba <__addsf3x+0x7c>
    1e54:	f7 c1       	rjmp	.+1006   	; 0x2244 <__fp_zero>
    1e56:	0e f4       	brtc	.+2      	; 0x1e5a <__addsf3x+0x1c>
    1e58:	e0 95       	com	r30
    1e5a:	0b 2e       	mov	r0, r27
    1e5c:	ba 2f       	mov	r27, r26
    1e5e:	a0 2d       	mov	r26, r0
    1e60:	0b 01       	movw	r0, r22
    1e62:	b9 01       	movw	r22, r18
    1e64:	90 01       	movw	r18, r0
    1e66:	0c 01       	movw	r0, r24
    1e68:	ca 01       	movw	r24, r20
    1e6a:	a0 01       	movw	r20, r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	ff 27       	eor	r31, r31
    1e70:	59 1b       	sub	r21, r25
    1e72:	99 f0       	breq	.+38     	; 0x1e9a <__addsf3x+0x5c>
    1e74:	59 3f       	cpi	r21, 0xF9	; 249
    1e76:	50 f4       	brcc	.+20     	; 0x1e8c <__addsf3x+0x4e>
    1e78:	50 3e       	cpi	r21, 0xE0	; 224
    1e7a:	68 f1       	brcs	.+90     	; 0x1ed6 <__addsf3x+0x98>
    1e7c:	1a 16       	cp	r1, r26
    1e7e:	f0 40       	sbci	r31, 0x00	; 0
    1e80:	a2 2f       	mov	r26, r18
    1e82:	23 2f       	mov	r18, r19
    1e84:	34 2f       	mov	r19, r20
    1e86:	44 27       	eor	r20, r20
    1e88:	58 5f       	subi	r21, 0xF8	; 248
    1e8a:	f3 cf       	rjmp	.-26     	; 0x1e72 <__addsf3x+0x34>
    1e8c:	46 95       	lsr	r20
    1e8e:	37 95       	ror	r19
    1e90:	27 95       	ror	r18
    1e92:	a7 95       	ror	r26
    1e94:	f0 40       	sbci	r31, 0x00	; 0
    1e96:	53 95       	inc	r21
    1e98:	c9 f7       	brne	.-14     	; 0x1e8c <__addsf3x+0x4e>
    1e9a:	7e f4       	brtc	.+30     	; 0x1eba <__addsf3x+0x7c>
    1e9c:	1f 16       	cp	r1, r31
    1e9e:	ba 0b       	sbc	r27, r26
    1ea0:	62 0b       	sbc	r22, r18
    1ea2:	73 0b       	sbc	r23, r19
    1ea4:	84 0b       	sbc	r24, r20
    1ea6:	ba f0       	brmi	.+46     	; 0x1ed6 <__addsf3x+0x98>
    1ea8:	91 50       	subi	r25, 0x01	; 1
    1eaa:	a1 f0       	breq	.+40     	; 0x1ed4 <__addsf3x+0x96>
    1eac:	ff 0f       	add	r31, r31
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	66 1f       	adc	r22, r22
    1eb2:	77 1f       	adc	r23, r23
    1eb4:	88 1f       	adc	r24, r24
    1eb6:	c2 f7       	brpl	.-16     	; 0x1ea8 <__addsf3x+0x6a>
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <__addsf3x+0x98>
    1eba:	ba 0f       	add	r27, r26
    1ebc:	62 1f       	adc	r22, r18
    1ebe:	73 1f       	adc	r23, r19
    1ec0:	84 1f       	adc	r24, r20
    1ec2:	48 f4       	brcc	.+18     	; 0x1ed6 <__addsf3x+0x98>
    1ec4:	87 95       	ror	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	b7 95       	ror	r27
    1ecc:	f7 95       	ror	r31
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <__addsf3x+0x96>
    1ed2:	b3 cf       	rjmp	.-154    	; 0x1e3a <__addsf3+0x1e>
    1ed4:	93 95       	inc	r25
    1ed6:	88 0f       	add	r24, r24
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <__addsf3x+0x9e>
    1eda:	99 27       	eor	r25, r25
    1edc:	ee 0f       	add	r30, r30
    1ede:	97 95       	ror	r25
    1ee0:	87 95       	ror	r24
    1ee2:	08 95       	ret

00001ee4 <asin>:
    1ee4:	9f 93       	push	r25
    1ee6:	9f 77       	andi	r25, 0x7F	; 127
    1ee8:	ee e3       	ldi	r30, 0x3E	; 62
    1eea:	89 37       	cpi	r24, 0x79	; 121
    1eec:	9e 07       	cpc	r25, r30
    1eee:	20 f4       	brcc	.+8      	; 0x1ef8 <asin+0x14>
    1ef0:	ec ec       	ldi	r30, 0xCC	; 204
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	55 d1       	rcall	.+682    	; 0x21a0 <__fp_powsodd>
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <asin+0x26>
    1ef8:	e6 d0       	rcall	.+460    	; 0x20c6 <__fp_arccos>
    1efa:	90 58       	subi	r25, 0x80	; 128
    1efc:	a2 ea       	ldi	r26, 0xA2	; 162
    1efe:	2a ed       	ldi	r18, 0xDA	; 218
    1f00:	3f e0       	ldi	r19, 0x0F	; 15
    1f02:	49 ec       	ldi	r20, 0xC9	; 201
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	9b df       	rcall	.-202    	; 0x1e3e <__addsf3x>
    1f08:	6a d1       	rcall	.+724    	; 0x21de <__fp_round>
    1f0a:	0f 90       	pop	r0
    1f0c:	07 fc       	sbrc	r0, 7
    1f0e:	90 58       	subi	r25, 0x80	; 128
    1f10:	08 95       	ret

00001f12 <__cmpsf2>:
    1f12:	f4 d0       	rcall	.+488    	; 0x20fc <__fp_cmp>
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <__cmpsf2+0x6>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	08 95       	ret

00001f1a <__divsf3>:
    1f1a:	0c d0       	rcall	.+24     	; 0x1f34 <__divsf3x>
    1f1c:	60 c1       	rjmp	.+704    	; 0x21de <__fp_round>
    1f1e:	58 d1       	rcall	.+688    	; 0x21d0 <__fp_pscB>
    1f20:	40 f0       	brcs	.+16     	; 0x1f32 <__divsf3+0x18>
    1f22:	4f d1       	rcall	.+670    	; 0x21c2 <__fp_pscA>
    1f24:	30 f0       	brcs	.+12     	; 0x1f32 <__divsf3+0x18>
    1f26:	21 f4       	brne	.+8      	; 0x1f30 <__divsf3+0x16>
    1f28:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2a:	19 f0       	breq	.+6      	; 0x1f32 <__divsf3+0x18>
    1f2c:	0b c1       	rjmp	.+534    	; 0x2144 <__fp_inf>
    1f2e:	51 11       	cpse	r21, r1
    1f30:	8a c1       	rjmp	.+788    	; 0x2246 <__fp_szero>
    1f32:	0e c1       	rjmp	.+540    	; 0x2150 <__fp_nan>

00001f34 <__divsf3x>:
    1f34:	65 d1       	rcall	.+714    	; 0x2200 <__fp_split3>
    1f36:	98 f3       	brcs	.-26     	; 0x1f1e <__divsf3+0x4>

00001f38 <__divsf3_pse>:
    1f38:	99 23       	and	r25, r25
    1f3a:	c9 f3       	breq	.-14     	; 0x1f2e <__divsf3+0x14>
    1f3c:	55 23       	and	r21, r21
    1f3e:	b1 f3       	breq	.-20     	; 0x1f2c <__divsf3+0x12>
    1f40:	95 1b       	sub	r25, r21
    1f42:	55 0b       	sbc	r21, r21
    1f44:	bb 27       	eor	r27, r27
    1f46:	aa 27       	eor	r26, r26
    1f48:	62 17       	cp	r22, r18
    1f4a:	73 07       	cpc	r23, r19
    1f4c:	84 07       	cpc	r24, r20
    1f4e:	38 f0       	brcs	.+14     	; 0x1f5e <__divsf3_pse+0x26>
    1f50:	9f 5f       	subi	r25, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	44 1f       	adc	r20, r20
    1f5a:	aa 1f       	adc	r26, r26
    1f5c:	a9 f3       	breq	.-22     	; 0x1f48 <__divsf3_pse+0x10>
    1f5e:	33 d0       	rcall	.+102    	; 0x1fc6 <__divsf3_pse+0x8e>
    1f60:	0e 2e       	mov	r0, r30
    1f62:	3a f0       	brmi	.+14     	; 0x1f72 <__divsf3_pse+0x3a>
    1f64:	e0 e8       	ldi	r30, 0x80	; 128
    1f66:	30 d0       	rcall	.+96     	; 0x1fc8 <__divsf3_pse+0x90>
    1f68:	91 50       	subi	r25, 0x01	; 1
    1f6a:	50 40       	sbci	r21, 0x00	; 0
    1f6c:	e6 95       	lsr	r30
    1f6e:	00 1c       	adc	r0, r0
    1f70:	ca f7       	brpl	.-14     	; 0x1f64 <__divsf3_pse+0x2c>
    1f72:	29 d0       	rcall	.+82     	; 0x1fc6 <__divsf3_pse+0x8e>
    1f74:	fe 2f       	mov	r31, r30
    1f76:	27 d0       	rcall	.+78     	; 0x1fc6 <__divsf3_pse+0x8e>
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	bb 1f       	adc	r27, r27
    1f80:	26 17       	cp	r18, r22
    1f82:	37 07       	cpc	r19, r23
    1f84:	48 07       	cpc	r20, r24
    1f86:	ab 07       	cpc	r26, r27
    1f88:	b0 e8       	ldi	r27, 0x80	; 128
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <__divsf3_pse+0x56>
    1f8c:	bb 0b       	sbc	r27, r27
    1f8e:	80 2d       	mov	r24, r0
    1f90:	bf 01       	movw	r22, r30
    1f92:	ff 27       	eor	r31, r31
    1f94:	93 58       	subi	r25, 0x83	; 131
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	2a f0       	brmi	.+10     	; 0x1fa4 <__divsf3_pse+0x6c>
    1f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f9c:	51 05       	cpc	r21, r1
    1f9e:	68 f0       	brcs	.+26     	; 0x1fba <__divsf3_pse+0x82>
    1fa0:	d1 c0       	rjmp	.+418    	; 0x2144 <__fp_inf>
    1fa2:	51 c1       	rjmp	.+674    	; 0x2246 <__fp_szero>
    1fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa6:	ec f3       	brlt	.-6      	; 0x1fa2 <__divsf3_pse+0x6a>
    1fa8:	98 3e       	cpi	r25, 0xE8	; 232
    1faa:	dc f3       	brlt	.-10     	; 0x1fa2 <__divsf3_pse+0x6a>
    1fac:	86 95       	lsr	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	f7 95       	ror	r31
    1fb6:	9f 5f       	subi	r25, 0xFF	; 255
    1fb8:	c9 f7       	brne	.-14     	; 0x1fac <__divsf3_pse+0x74>
    1fba:	88 0f       	add	r24, r24
    1fbc:	91 1d       	adc	r25, r1
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret
    1fc6:	e1 e0       	ldi	r30, 0x01	; 1
    1fc8:	66 0f       	add	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	62 17       	cp	r22, r18
    1fd2:	73 07       	cpc	r23, r19
    1fd4:	84 07       	cpc	r24, r20
    1fd6:	ba 07       	cpc	r27, r26
    1fd8:	20 f0       	brcs	.+8      	; 0x1fe2 <__divsf3_pse+0xaa>
    1fda:	62 1b       	sub	r22, r18
    1fdc:	73 0b       	sbc	r23, r19
    1fde:	84 0b       	sbc	r24, r20
    1fe0:	ba 0b       	sbc	r27, r26
    1fe2:	ee 1f       	adc	r30, r30
    1fe4:	88 f7       	brcc	.-30     	; 0x1fc8 <__divsf3_pse+0x90>
    1fe6:	e0 95       	com	r30
    1fe8:	08 95       	ret

00001fea <__fixsfsi>:
    1fea:	04 d0       	rcall	.+8      	; 0x1ff4 <__fixunssfsi>
    1fec:	68 94       	set
    1fee:	b1 11       	cpse	r27, r1
    1ff0:	2a c1       	rjmp	.+596    	; 0x2246 <__fp_szero>
    1ff2:	08 95       	ret

00001ff4 <__fixunssfsi>:
    1ff4:	0d d1       	rcall	.+538    	; 0x2210 <__fp_splitA>
    1ff6:	88 f0       	brcs	.+34     	; 0x201a <__fixunssfsi+0x26>
    1ff8:	9f 57       	subi	r25, 0x7F	; 127
    1ffa:	90 f0       	brcs	.+36     	; 0x2020 <__fixunssfsi+0x2c>
    1ffc:	b9 2f       	mov	r27, r25
    1ffe:	99 27       	eor	r25, r25
    2000:	b7 51       	subi	r27, 0x17	; 23
    2002:	a0 f0       	brcs	.+40     	; 0x202c <__fixunssfsi+0x38>
    2004:	d1 f0       	breq	.+52     	; 0x203a <__fixunssfsi+0x46>
    2006:	66 0f       	add	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	1a f0       	brmi	.+6      	; 0x2016 <__fixunssfsi+0x22>
    2010:	ba 95       	dec	r27
    2012:	c9 f7       	brne	.-14     	; 0x2006 <__fixunssfsi+0x12>
    2014:	12 c0       	rjmp	.+36     	; 0x203a <__fixunssfsi+0x46>
    2016:	b1 30       	cpi	r27, 0x01	; 1
    2018:	81 f0       	breq	.+32     	; 0x203a <__fixunssfsi+0x46>
    201a:	14 d1       	rcall	.+552    	; 0x2244 <__fp_zero>
    201c:	b1 e0       	ldi	r27, 0x01	; 1
    201e:	08 95       	ret
    2020:	11 c1       	rjmp	.+546    	; 0x2244 <__fp_zero>
    2022:	67 2f       	mov	r22, r23
    2024:	78 2f       	mov	r23, r24
    2026:	88 27       	eor	r24, r24
    2028:	b8 5f       	subi	r27, 0xF8	; 248
    202a:	39 f0       	breq	.+14     	; 0x203a <__fixunssfsi+0x46>
    202c:	b9 3f       	cpi	r27, 0xF9	; 249
    202e:	cc f3       	brlt	.-14     	; 0x2022 <__fixunssfsi+0x2e>
    2030:	86 95       	lsr	r24
    2032:	77 95       	ror	r23
    2034:	67 95       	ror	r22
    2036:	b3 95       	inc	r27
    2038:	d9 f7       	brne	.-10     	; 0x2030 <__fixunssfsi+0x3c>
    203a:	3e f4       	brtc	.+14     	; 0x204a <__fixunssfsi+0x56>
    203c:	90 95       	com	r25
    203e:	80 95       	com	r24
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	08 95       	ret

0000204c <__floatunsisf>:
    204c:	e8 94       	clt
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <__floatsisf+0x12>

00002050 <__floatsisf>:
    2050:	97 fb       	bst	r25, 7
    2052:	3e f4       	brtc	.+14     	; 0x2062 <__floatsisf+0x12>
    2054:	90 95       	com	r25
    2056:	80 95       	com	r24
    2058:	70 95       	com	r23
    205a:	61 95       	neg	r22
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	8f 4f       	sbci	r24, 0xFF	; 255
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	99 23       	and	r25, r25
    2064:	a9 f0       	breq	.+42     	; 0x2090 <__floatsisf+0x40>
    2066:	f9 2f       	mov	r31, r25
    2068:	96 e9       	ldi	r25, 0x96	; 150
    206a:	bb 27       	eor	r27, r27
    206c:	93 95       	inc	r25
    206e:	f6 95       	lsr	r31
    2070:	87 95       	ror	r24
    2072:	77 95       	ror	r23
    2074:	67 95       	ror	r22
    2076:	b7 95       	ror	r27
    2078:	f1 11       	cpse	r31, r1
    207a:	f8 cf       	rjmp	.-16     	; 0x206c <__floatsisf+0x1c>
    207c:	fa f4       	brpl	.+62     	; 0x20bc <__floatsisf+0x6c>
    207e:	bb 0f       	add	r27, r27
    2080:	11 f4       	brne	.+4      	; 0x2086 <__floatsisf+0x36>
    2082:	60 ff       	sbrs	r22, 0
    2084:	1b c0       	rjmp	.+54     	; 0x20bc <__floatsisf+0x6c>
    2086:	6f 5f       	subi	r22, 0xFF	; 255
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	8f 4f       	sbci	r24, 0xFF	; 255
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	16 c0       	rjmp	.+44     	; 0x20bc <__floatsisf+0x6c>
    2090:	88 23       	and	r24, r24
    2092:	11 f0       	breq	.+4      	; 0x2098 <__floatsisf+0x48>
    2094:	96 e9       	ldi	r25, 0x96	; 150
    2096:	11 c0       	rjmp	.+34     	; 0x20ba <__floatsisf+0x6a>
    2098:	77 23       	and	r23, r23
    209a:	21 f0       	breq	.+8      	; 0x20a4 <__floatsisf+0x54>
    209c:	9e e8       	ldi	r25, 0x8E	; 142
    209e:	87 2f       	mov	r24, r23
    20a0:	76 2f       	mov	r23, r22
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <__floatsisf+0x5e>
    20a4:	66 23       	and	r22, r22
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <__floatsisf+0x74>
    20a8:	96 e8       	ldi	r25, 0x86	; 134
    20aa:	86 2f       	mov	r24, r22
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	2a f0       	brmi	.+10     	; 0x20bc <__floatsisf+0x6c>
    20b2:	9a 95       	dec	r25
    20b4:	66 0f       	add	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	88 1f       	adc	r24, r24
    20ba:	da f7       	brpl	.-10     	; 0x20b2 <__floatsisf+0x62>
    20bc:	88 0f       	add	r24, r24
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	97 f9       	bld	r25, 7
    20c4:	08 95       	ret

000020c6 <__fp_arccos>:
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	1f 93       	push	r17
    20cc:	0f 93       	push	r16
    20ce:	8b 01       	movw	r16, r22
    20d0:	ec 01       	movw	r28, r24
    20d2:	e0 ee       	ldi	r30, 0xE0	; 224
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	3f d0       	rcall	.+126    	; 0x2156 <__fp_powser>
    20d8:	82 d0       	rcall	.+260    	; 0x21de <__fp_round>
    20da:	98 01       	movw	r18, r16
    20dc:	ae 01       	movw	r20, r28
    20de:	8b 01       	movw	r16, r22
    20e0:	ec 01       	movw	r28, r24
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	9f e3       	ldi	r25, 0x3F	; 63
    20ea:	97 de       	rcall	.-722    	; 0x1e1a <__subsf3>
    20ec:	1d d1       	rcall	.+570    	; 0x2328 <sqrt>
    20ee:	98 01       	movw	r18, r16
    20f0:	ae 01       	movw	r20, r28
    20f2:	0f 91       	pop	r16
    20f4:	1f 91       	pop	r17
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	bb c0       	rjmp	.+374    	; 0x2272 <__mulsf3x>

000020fc <__fp_cmp>:
    20fc:	99 0f       	add	r25, r25
    20fe:	00 08       	sbc	r0, r0
    2100:	55 0f       	add	r21, r21
    2102:	aa 0b       	sbc	r26, r26
    2104:	e0 e8       	ldi	r30, 0x80	; 128
    2106:	fe ef       	ldi	r31, 0xFE	; 254
    2108:	16 16       	cp	r1, r22
    210a:	17 06       	cpc	r1, r23
    210c:	e8 07       	cpc	r30, r24
    210e:	f9 07       	cpc	r31, r25
    2110:	c0 f0       	brcs	.+48     	; 0x2142 <__fp_cmp+0x46>
    2112:	12 16       	cp	r1, r18
    2114:	13 06       	cpc	r1, r19
    2116:	e4 07       	cpc	r30, r20
    2118:	f5 07       	cpc	r31, r21
    211a:	98 f0       	brcs	.+38     	; 0x2142 <__fp_cmp+0x46>
    211c:	62 1b       	sub	r22, r18
    211e:	73 0b       	sbc	r23, r19
    2120:	84 0b       	sbc	r24, r20
    2122:	95 0b       	sbc	r25, r21
    2124:	39 f4       	brne	.+14     	; 0x2134 <__fp_cmp+0x38>
    2126:	0a 26       	eor	r0, r26
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_cmp+0x46>
    212a:	23 2b       	or	r18, r19
    212c:	24 2b       	or	r18, r20
    212e:	25 2b       	or	r18, r21
    2130:	21 f4       	brne	.+8      	; 0x213a <__fp_cmp+0x3e>
    2132:	08 95       	ret
    2134:	0a 26       	eor	r0, r26
    2136:	09 f4       	brne	.+2      	; 0x213a <__fp_cmp+0x3e>
    2138:	a1 40       	sbci	r26, 0x01	; 1
    213a:	a6 95       	lsr	r26
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	81 1d       	adc	r24, r1
    2140:	81 1d       	adc	r24, r1
    2142:	08 95       	ret

00002144 <__fp_inf>:
    2144:	97 f9       	bld	r25, 7
    2146:	9f 67       	ori	r25, 0x7F	; 127
    2148:	80 e8       	ldi	r24, 0x80	; 128
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	08 95       	ret

00002150 <__fp_nan>:
    2150:	9f ef       	ldi	r25, 0xFF	; 255
    2152:	80 ec       	ldi	r24, 0xC0	; 192
    2154:	08 95       	ret

00002156 <__fp_powser>:
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	1f 93       	push	r17
    215c:	0f 93       	push	r16
    215e:	ff 92       	push	r15
    2160:	ef 92       	push	r14
    2162:	df 92       	push	r13
    2164:	7b 01       	movw	r14, r22
    2166:	8c 01       	movw	r16, r24
    2168:	68 94       	set
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <__fp_powser+0x20>
    216c:	da 2e       	mov	r13, r26
    216e:	ef 01       	movw	r28, r30
    2170:	80 d0       	rcall	.+256    	; 0x2272 <__mulsf3x>
    2172:	fe 01       	movw	r30, r28
    2174:	e8 94       	clt
    2176:	a5 91       	lpm	r26, Z+
    2178:	25 91       	lpm	r18, Z+
    217a:	35 91       	lpm	r19, Z+
    217c:	45 91       	lpm	r20, Z+
    217e:	55 91       	lpm	r21, Z+
    2180:	ae f3       	brts	.-22     	; 0x216c <__fp_powser+0x16>
    2182:	ef 01       	movw	r28, r30
    2184:	5c de       	rcall	.-840    	; 0x1e3e <__addsf3x>
    2186:	fe 01       	movw	r30, r28
    2188:	97 01       	movw	r18, r14
    218a:	a8 01       	movw	r20, r16
    218c:	da 94       	dec	r13
    218e:	79 f7       	brne	.-34     	; 0x216e <__fp_powser+0x18>
    2190:	df 90       	pop	r13
    2192:	ef 90       	pop	r14
    2194:	ff 90       	pop	r15
    2196:	0f 91       	pop	r16
    2198:	1f 91       	pop	r17
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <__fp_powsodd>:
    21a0:	9f 93       	push	r25
    21a2:	8f 93       	push	r24
    21a4:	7f 93       	push	r23
    21a6:	6f 93       	push	r22
    21a8:	ff 93       	push	r31
    21aa:	ef 93       	push	r30
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	54 d0       	rcall	.+168    	; 0x225a <__mulsf3>
    21b2:	ef 91       	pop	r30
    21b4:	ff 91       	pop	r31
    21b6:	cf df       	rcall	.-98     	; 0x2156 <__fp_powser>
    21b8:	2f 91       	pop	r18
    21ba:	3f 91       	pop	r19
    21bc:	4f 91       	pop	r20
    21be:	5f 91       	pop	r21
    21c0:	4c c0       	rjmp	.+152    	; 0x225a <__mulsf3>

000021c2 <__fp_pscA>:
    21c2:	00 24       	eor	r0, r0
    21c4:	0a 94       	dec	r0
    21c6:	16 16       	cp	r1, r22
    21c8:	17 06       	cpc	r1, r23
    21ca:	18 06       	cpc	r1, r24
    21cc:	09 06       	cpc	r0, r25
    21ce:	08 95       	ret

000021d0 <__fp_pscB>:
    21d0:	00 24       	eor	r0, r0
    21d2:	0a 94       	dec	r0
    21d4:	12 16       	cp	r1, r18
    21d6:	13 06       	cpc	r1, r19
    21d8:	14 06       	cpc	r1, r20
    21da:	05 06       	cpc	r0, r21
    21dc:	08 95       	ret

000021de <__fp_round>:
    21de:	09 2e       	mov	r0, r25
    21e0:	03 94       	inc	r0
    21e2:	00 0c       	add	r0, r0
    21e4:	11 f4       	brne	.+4      	; 0x21ea <__fp_round+0xc>
    21e6:	88 23       	and	r24, r24
    21e8:	52 f0       	brmi	.+20     	; 0x21fe <__fp_round+0x20>
    21ea:	bb 0f       	add	r27, r27
    21ec:	40 f4       	brcc	.+16     	; 0x21fe <__fp_round+0x20>
    21ee:	bf 2b       	or	r27, r31
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <__fp_round+0x18>
    21f2:	60 ff       	sbrs	r22, 0
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <__fp_round+0x20>
    21f6:	6f 5f       	subi	r22, 0xFF	; 255
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	8f 4f       	sbci	r24, 0xFF	; 255
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	08 95       	ret

00002200 <__fp_split3>:
    2200:	57 fd       	sbrc	r21, 7
    2202:	90 58       	subi	r25, 0x80	; 128
    2204:	44 0f       	add	r20, r20
    2206:	55 1f       	adc	r21, r21
    2208:	59 f0       	breq	.+22     	; 0x2220 <__fp_splitA+0x10>
    220a:	5f 3f       	cpi	r21, 0xFF	; 255
    220c:	71 f0       	breq	.+28     	; 0x222a <__fp_splitA+0x1a>
    220e:	47 95       	ror	r20

00002210 <__fp_splitA>:
    2210:	88 0f       	add	r24, r24
    2212:	97 fb       	bst	r25, 7
    2214:	99 1f       	adc	r25, r25
    2216:	61 f0       	breq	.+24     	; 0x2230 <__fp_splitA+0x20>
    2218:	9f 3f       	cpi	r25, 0xFF	; 255
    221a:	79 f0       	breq	.+30     	; 0x223a <__fp_splitA+0x2a>
    221c:	87 95       	ror	r24
    221e:	08 95       	ret
    2220:	12 16       	cp	r1, r18
    2222:	13 06       	cpc	r1, r19
    2224:	14 06       	cpc	r1, r20
    2226:	55 1f       	adc	r21, r21
    2228:	f2 cf       	rjmp	.-28     	; 0x220e <__fp_split3+0xe>
    222a:	46 95       	lsr	r20
    222c:	f1 df       	rcall	.-30     	; 0x2210 <__fp_splitA>
    222e:	08 c0       	rjmp	.+16     	; 0x2240 <__fp_splitA+0x30>
    2230:	16 16       	cp	r1, r22
    2232:	17 06       	cpc	r1, r23
    2234:	18 06       	cpc	r1, r24
    2236:	99 1f       	adc	r25, r25
    2238:	f1 cf       	rjmp	.-30     	; 0x221c <__fp_splitA+0xc>
    223a:	86 95       	lsr	r24
    223c:	71 05       	cpc	r23, r1
    223e:	61 05       	cpc	r22, r1
    2240:	08 94       	sec
    2242:	08 95       	ret

00002244 <__fp_zero>:
    2244:	e8 94       	clt

00002246 <__fp_szero>:
    2246:	bb 27       	eor	r27, r27
    2248:	66 27       	eor	r22, r22
    224a:	77 27       	eor	r23, r23
    224c:	cb 01       	movw	r24, r22
    224e:	97 f9       	bld	r25, 7
    2250:	08 95       	ret

00002252 <__gesf2>:
    2252:	54 df       	rcall	.-344    	; 0x20fc <__fp_cmp>
    2254:	08 f4       	brcc	.+2      	; 0x2258 <__gesf2+0x6>
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	08 95       	ret

0000225a <__mulsf3>:
    225a:	0b d0       	rcall	.+22     	; 0x2272 <__mulsf3x>
    225c:	c0 cf       	rjmp	.-128    	; 0x21de <__fp_round>
    225e:	b1 df       	rcall	.-158    	; 0x21c2 <__fp_pscA>
    2260:	28 f0       	brcs	.+10     	; 0x226c <__mulsf3+0x12>
    2262:	b6 df       	rcall	.-148    	; 0x21d0 <__fp_pscB>
    2264:	18 f0       	brcs	.+6      	; 0x226c <__mulsf3+0x12>
    2266:	95 23       	and	r25, r21
    2268:	09 f0       	breq	.+2      	; 0x226c <__mulsf3+0x12>
    226a:	6c cf       	rjmp	.-296    	; 0x2144 <__fp_inf>
    226c:	71 cf       	rjmp	.-286    	; 0x2150 <__fp_nan>
    226e:	11 24       	eor	r1, r1
    2270:	ea cf       	rjmp	.-44     	; 0x2246 <__fp_szero>

00002272 <__mulsf3x>:
    2272:	c6 df       	rcall	.-116    	; 0x2200 <__fp_split3>
    2274:	a0 f3       	brcs	.-24     	; 0x225e <__mulsf3+0x4>

00002276 <__mulsf3_pse>:
    2276:	95 9f       	mul	r25, r21
    2278:	d1 f3       	breq	.-12     	; 0x226e <__mulsf3+0x14>
    227a:	95 0f       	add	r25, r21
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	55 1f       	adc	r21, r21
    2280:	62 9f       	mul	r22, r18
    2282:	f0 01       	movw	r30, r0
    2284:	72 9f       	mul	r23, r18
    2286:	bb 27       	eor	r27, r27
    2288:	f0 0d       	add	r31, r0
    228a:	b1 1d       	adc	r27, r1
    228c:	63 9f       	mul	r22, r19
    228e:	aa 27       	eor	r26, r26
    2290:	f0 0d       	add	r31, r0
    2292:	b1 1d       	adc	r27, r1
    2294:	aa 1f       	adc	r26, r26
    2296:	64 9f       	mul	r22, r20
    2298:	66 27       	eor	r22, r22
    229a:	b0 0d       	add	r27, r0
    229c:	a1 1d       	adc	r26, r1
    229e:	66 1f       	adc	r22, r22
    22a0:	82 9f       	mul	r24, r18
    22a2:	22 27       	eor	r18, r18
    22a4:	b0 0d       	add	r27, r0
    22a6:	a1 1d       	adc	r26, r1
    22a8:	62 1f       	adc	r22, r18
    22aa:	73 9f       	mul	r23, r19
    22ac:	b0 0d       	add	r27, r0
    22ae:	a1 1d       	adc	r26, r1
    22b0:	62 1f       	adc	r22, r18
    22b2:	83 9f       	mul	r24, r19
    22b4:	a0 0d       	add	r26, r0
    22b6:	61 1d       	adc	r22, r1
    22b8:	22 1f       	adc	r18, r18
    22ba:	74 9f       	mul	r23, r20
    22bc:	33 27       	eor	r19, r19
    22be:	a0 0d       	add	r26, r0
    22c0:	61 1d       	adc	r22, r1
    22c2:	23 1f       	adc	r18, r19
    22c4:	84 9f       	mul	r24, r20
    22c6:	60 0d       	add	r22, r0
    22c8:	21 1d       	adc	r18, r1
    22ca:	82 2f       	mov	r24, r18
    22cc:	76 2f       	mov	r23, r22
    22ce:	6a 2f       	mov	r22, r26
    22d0:	11 24       	eor	r1, r1
    22d2:	9f 57       	subi	r25, 0x7F	; 127
    22d4:	50 40       	sbci	r21, 0x00	; 0
    22d6:	8a f0       	brmi	.+34     	; 0x22fa <__mulsf3_pse+0x84>
    22d8:	e1 f0       	breq	.+56     	; 0x2312 <__mulsf3_pse+0x9c>
    22da:	88 23       	and	r24, r24
    22dc:	4a f0       	brmi	.+18     	; 0x22f0 <__mulsf3_pse+0x7a>
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	bb 1f       	adc	r27, r27
    22e4:	66 1f       	adc	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	88 1f       	adc	r24, r24
    22ea:	91 50       	subi	r25, 0x01	; 1
    22ec:	50 40       	sbci	r21, 0x00	; 0
    22ee:	a9 f7       	brne	.-22     	; 0x22da <__mulsf3_pse+0x64>
    22f0:	9e 3f       	cpi	r25, 0xFE	; 254
    22f2:	51 05       	cpc	r21, r1
    22f4:	70 f0       	brcs	.+28     	; 0x2312 <__mulsf3_pse+0x9c>
    22f6:	26 cf       	rjmp	.-436    	; 0x2144 <__fp_inf>
    22f8:	a6 cf       	rjmp	.-180    	; 0x2246 <__fp_szero>
    22fa:	5f 3f       	cpi	r21, 0xFF	; 255
    22fc:	ec f3       	brlt	.-6      	; 0x22f8 <__mulsf3_pse+0x82>
    22fe:	98 3e       	cpi	r25, 0xE8	; 232
    2300:	dc f3       	brlt	.-10     	; 0x22f8 <__mulsf3_pse+0x82>
    2302:	86 95       	lsr	r24
    2304:	77 95       	ror	r23
    2306:	67 95       	ror	r22
    2308:	b7 95       	ror	r27
    230a:	f7 95       	ror	r31
    230c:	e7 95       	ror	r30
    230e:	9f 5f       	subi	r25, 0xFF	; 255
    2310:	c1 f7       	brne	.-16     	; 0x2302 <__mulsf3_pse+0x8c>
    2312:	fe 2b       	or	r31, r30
    2314:	88 0f       	add	r24, r24
    2316:	91 1d       	adc	r25, r1
    2318:	96 95       	lsr	r25
    231a:	87 95       	ror	r24
    231c:	97 f9       	bld	r25, 7
    231e:	08 95       	ret
    2320:	11 f4       	brne	.+4      	; 0x2326 <__mulsf3_pse+0xb0>
    2322:	0e f4       	brtc	.+2      	; 0x2326 <__mulsf3_pse+0xb0>
    2324:	15 cf       	rjmp	.-470    	; 0x2150 <__fp_nan>
    2326:	3e c0       	rjmp	.+124    	; 0x23a4 <__fp_mpack>

00002328 <sqrt>:
    2328:	73 df       	rcall	.-282    	; 0x2210 <__fp_splitA>
    232a:	d0 f3       	brcs	.-12     	; 0x2320 <__mulsf3_pse+0xaa>
    232c:	99 23       	and	r25, r25
    232e:	d9 f3       	breq	.-10     	; 0x2326 <__mulsf3_pse+0xb0>
    2330:	ce f3       	brts	.-14     	; 0x2324 <__mulsf3_pse+0xae>
    2332:	9f 57       	subi	r25, 0x7F	; 127
    2334:	55 0b       	sbc	r21, r21
    2336:	87 ff       	sbrs	r24, 7
    2338:	43 d0       	rcall	.+134    	; 0x23c0 <__fp_norm2>
    233a:	00 24       	eor	r0, r0
    233c:	a0 e6       	ldi	r26, 0x60	; 96
    233e:	40 ea       	ldi	r20, 0xA0	; 160
    2340:	90 01       	movw	r18, r0
    2342:	80 58       	subi	r24, 0x80	; 128
    2344:	56 95       	lsr	r21
    2346:	97 95       	ror	r25
    2348:	28 f4       	brcc	.+10     	; 0x2354 <sqrt+0x2c>
    234a:	80 5c       	subi	r24, 0xC0	; 192
    234c:	66 0f       	add	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	20 f0       	brcs	.+8      	; 0x235c <sqrt+0x34>
    2354:	26 17       	cp	r18, r22
    2356:	37 07       	cpc	r19, r23
    2358:	48 07       	cpc	r20, r24
    235a:	30 f4       	brcc	.+12     	; 0x2368 <sqrt+0x40>
    235c:	62 1b       	sub	r22, r18
    235e:	73 0b       	sbc	r23, r19
    2360:	84 0b       	sbc	r24, r20
    2362:	20 29       	or	r18, r0
    2364:	31 29       	or	r19, r1
    2366:	4a 2b       	or	r20, r26
    2368:	a6 95       	lsr	r26
    236a:	17 94       	ror	r1
    236c:	07 94       	ror	r0
    236e:	20 25       	eor	r18, r0
    2370:	31 25       	eor	r19, r1
    2372:	4a 27       	eor	r20, r26
    2374:	58 f7       	brcc	.-42     	; 0x234c <sqrt+0x24>
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	20 f0       	brcs	.+8      	; 0x2386 <sqrt+0x5e>
    237e:	26 17       	cp	r18, r22
    2380:	37 07       	cpc	r19, r23
    2382:	48 07       	cpc	r20, r24
    2384:	30 f4       	brcc	.+12     	; 0x2392 <sqrt+0x6a>
    2386:	62 0b       	sbc	r22, r18
    2388:	73 0b       	sbc	r23, r19
    238a:	84 0b       	sbc	r24, r20
    238c:	20 0d       	add	r18, r0
    238e:	31 1d       	adc	r19, r1
    2390:	41 1d       	adc	r20, r1
    2392:	a0 95       	com	r26
    2394:	81 f7       	brne	.-32     	; 0x2376 <sqrt+0x4e>
    2396:	b9 01       	movw	r22, r18
    2398:	84 2f       	mov	r24, r20
    239a:	91 58       	subi	r25, 0x81	; 129
    239c:	88 0f       	add	r24, r24
    239e:	96 95       	lsr	r25
    23a0:	87 95       	ror	r24
    23a2:	08 95       	ret

000023a4 <__fp_mpack>:
    23a4:	9f 3f       	cpi	r25, 0xFF	; 255
    23a6:	31 f0       	breq	.+12     	; 0x23b4 <__fp_mpack_finite+0xc>

000023a8 <__fp_mpack_finite>:
    23a8:	91 50       	subi	r25, 0x01	; 1
    23aa:	20 f4       	brcc	.+8      	; 0x23b4 <__fp_mpack_finite+0xc>
    23ac:	87 95       	ror	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	b7 95       	ror	r27
    23b4:	88 0f       	add	r24, r24
    23b6:	91 1d       	adc	r25, r1
    23b8:	96 95       	lsr	r25
    23ba:	87 95       	ror	r24
    23bc:	97 f9       	bld	r25, 7
    23be:	08 95       	ret

000023c0 <__fp_norm2>:
    23c0:	91 50       	subi	r25, 0x01	; 1
    23c2:	50 40       	sbci	r21, 0x00	; 0
    23c4:	66 0f       	add	r22, r22
    23c6:	77 1f       	adc	r23, r23
    23c8:	88 1f       	adc	r24, r24
    23ca:	d2 f7       	brpl	.-12     	; 0x23c0 <__fp_norm2>
    23cc:	08 95       	ret

000023ce <atoi>:
    23ce:	fc 01       	movw	r30, r24
    23d0:	88 27       	eor	r24, r24
    23d2:	99 27       	eor	r25, r25
    23d4:	e8 94       	clt
    23d6:	21 91       	ld	r18, Z+
    23d8:	20 32       	cpi	r18, 0x20	; 32
    23da:	e9 f3       	breq	.-6      	; 0x23d6 <atoi+0x8>
    23dc:	29 30       	cpi	r18, 0x09	; 9
    23de:	10 f0       	brcs	.+4      	; 0x23e4 <atoi+0x16>
    23e0:	2e 30       	cpi	r18, 0x0E	; 14
    23e2:	c8 f3       	brcs	.-14     	; 0x23d6 <atoi+0x8>
    23e4:	2b 32       	cpi	r18, 0x2B	; 43
    23e6:	39 f0       	breq	.+14     	; 0x23f6 <atoi+0x28>
    23e8:	2d 32       	cpi	r18, 0x2D	; 45
    23ea:	31 f4       	brne	.+12     	; 0x23f8 <atoi+0x2a>
    23ec:	68 94       	set
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <atoi+0x28>
    23f0:	35 d0       	rcall	.+106    	; 0x245c <__mulhi_const_10>
    23f2:	82 0f       	add	r24, r18
    23f4:	91 1d       	adc	r25, r1
    23f6:	21 91       	ld	r18, Z+
    23f8:	20 53       	subi	r18, 0x30	; 48
    23fa:	2a 30       	cpi	r18, 0x0A	; 10
    23fc:	c8 f3       	brcs	.-14     	; 0x23f0 <atoi+0x22>
    23fe:	1e f4       	brtc	.+6      	; 0x2406 <atoi+0x38>
    2400:	90 95       	com	r25
    2402:	81 95       	neg	r24
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	08 95       	ret

00002408 <strtok>:
    2408:	4c e0       	ldi	r20, 0x0C	; 12
    240a:	5b e0       	ldi	r21, 0x0B	; 11
    240c:	00 c0       	rjmp	.+0      	; 0x240e <strtok_r>

0000240e <strtok_r>:
    240e:	fa 01       	movw	r30, r20
    2410:	a1 91       	ld	r26, Z+
    2412:	b0 81       	ld	r27, Z
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	19 f4       	brne	.+6      	; 0x241e <strtok_r+0x10>
    2418:	10 97       	sbiw	r26, 0x00	; 0
    241a:	e1 f0       	breq	.+56     	; 0x2454 <strtok_r+0x46>
    241c:	cd 01       	movw	r24, r26
    241e:	dc 01       	movw	r26, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0d 90       	ld	r0, X+
    2424:	00 20       	and	r0, r0
    2426:	11 f4       	brne	.+4      	; 0x242c <strtok_r+0x1e>
    2428:	c0 01       	movw	r24, r0
    242a:	13 c0       	rjmp	.+38     	; 0x2452 <strtok_r+0x44>
    242c:	fb 01       	movw	r30, r22
    242e:	21 91       	ld	r18, Z+
    2430:	22 23       	and	r18, r18
    2432:	19 f0       	breq	.+6      	; 0x243a <strtok_r+0x2c>
    2434:	20 15       	cp	r18, r0
    2436:	d9 f7       	brne	.-10     	; 0x242e <strtok_r+0x20>
    2438:	f3 cf       	rjmp	.-26     	; 0x2420 <strtok_r+0x12>
    243a:	fb 01       	movw	r30, r22
    243c:	21 91       	ld	r18, Z+
    243e:	20 15       	cp	r18, r0
    2440:	19 f4       	brne	.+6      	; 0x2448 <strtok_r+0x3a>
    2442:	1e 92       	st	-X, r1
    2444:	11 96       	adiw	r26, 0x01	; 1
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <strtok_r+0x46>
    2448:	22 23       	and	r18, r18
    244a:	c1 f7       	brne	.-16     	; 0x243c <strtok_r+0x2e>
    244c:	0d 90       	ld	r0, X+
    244e:	00 20       	and	r0, r0
    2450:	a1 f7       	brne	.-24     	; 0x243a <strtok_r+0x2c>
    2452:	d0 01       	movw	r26, r0
    2454:	fa 01       	movw	r30, r20
    2456:	a1 93       	st	Z+, r26
    2458:	b0 83       	st	Z, r27
    245a:	08 95       	ret

0000245c <__mulhi_const_10>:
    245c:	7a e0       	ldi	r23, 0x0A	; 10
    245e:	97 9f       	mul	r25, r23
    2460:	90 2d       	mov	r25, r0
    2462:	87 9f       	mul	r24, r23
    2464:	80 2d       	mov	r24, r0
    2466:	91 0d       	add	r25, r1
    2468:	11 24       	eor	r1, r1
    246a:	08 95       	ret

0000246c <fdevopen>:
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	31 f4       	brne	.+12     	; 0x2484 <fdevopen+0x18>
    2478:	61 15       	cp	r22, r1
    247a:	71 05       	cpc	r23, r1
    247c:	19 f4       	brne	.+6      	; 0x2484 <fdevopen+0x18>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	39 c0       	rjmp	.+114    	; 0x24f6 <fdevopen+0x8a>
    2484:	8b 01       	movw	r16, r22
    2486:	ec 01       	movw	r28, r24
    2488:	6e e0       	ldi	r22, 0x0E	; 14
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a6 d2       	rcall	.+1356   	; 0x29de <calloc>
    2492:	fc 01       	movw	r30, r24
    2494:	89 2b       	or	r24, r25
    2496:	99 f3       	breq	.-26     	; 0x247e <fdevopen+0x12>
    2498:	80 e8       	ldi	r24, 0x80	; 128
    249a:	83 83       	std	Z+3, r24	; 0x03
    249c:	01 15       	cp	r16, r1
    249e:	11 05       	cpc	r17, r1
    24a0:	71 f0       	breq	.+28     	; 0x24be <fdevopen+0x52>
    24a2:	13 87       	std	Z+11, r17	; 0x0b
    24a4:	02 87       	std	Z+10, r16	; 0x0a
    24a6:	81 e8       	ldi	r24, 0x81	; 129
    24a8:	83 83       	std	Z+3, r24	; 0x03
    24aa:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <__iob>
    24ae:	90 91 31 0c 	lds	r25, 0x0C31	; 0x800c31 <__iob+0x1>
    24b2:	89 2b       	or	r24, r25
    24b4:	21 f4       	brne	.+8      	; 0x24be <fdevopen+0x52>
    24b6:	f0 93 31 0c 	sts	0x0C31, r31	; 0x800c31 <__iob+0x1>
    24ba:	e0 93 30 0c 	sts	0x0C30, r30	; 0x800c30 <__iob>
    24be:	20 97       	sbiw	r28, 0x00	; 0
    24c0:	c9 f0       	breq	.+50     	; 0x24f4 <fdevopen+0x88>
    24c2:	d1 87       	std	Z+9, r29	; 0x09
    24c4:	c0 87       	std	Z+8, r28	; 0x08
    24c6:	83 81       	ldd	r24, Z+3	; 0x03
    24c8:	82 60       	ori	r24, 0x02	; 2
    24ca:	83 83       	std	Z+3, r24	; 0x03
    24cc:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <__iob+0x2>
    24d0:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <__iob+0x3>
    24d4:	89 2b       	or	r24, r25
    24d6:	71 f4       	brne	.+28     	; 0x24f4 <fdevopen+0x88>
    24d8:	f0 93 33 0c 	sts	0x0C33, r31	; 0x800c33 <__iob+0x3>
    24dc:	e0 93 32 0c 	sts	0x0C32, r30	; 0x800c32 <__iob+0x2>
    24e0:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <__iob+0x4>
    24e4:	90 91 35 0c 	lds	r25, 0x0C35	; 0x800c35 <__iob+0x5>
    24e8:	89 2b       	or	r24, r25
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <fdevopen+0x88>
    24ec:	f0 93 35 0c 	sts	0x0C35, r31	; 0x800c35 <__iob+0x5>
    24f0:	e0 93 34 0c 	sts	0x0C34, r30	; 0x800c34 <__iob+0x4>
    24f4:	cf 01       	movw	r24, r30
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <fgetc>:
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
    2506:	2b 81       	ldd	r18, Y+3	; 0x03
    2508:	20 ff       	sbrs	r18, 0
    250a:	33 c0       	rjmp	.+102    	; 0x2572 <fgetc+0x72>
    250c:	26 ff       	sbrs	r18, 6
    250e:	0a c0       	rjmp	.+20     	; 0x2524 <fgetc+0x24>
    2510:	2f 7b       	andi	r18, 0xBF	; 191
    2512:	2b 83       	std	Y+3, r18	; 0x03
    2514:	8e 81       	ldd	r24, Y+6	; 0x06
    2516:	9f 81       	ldd	r25, Y+7	; 0x07
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	9f 83       	std	Y+7, r25	; 0x07
    251c:	8e 83       	std	Y+6, r24	; 0x06
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	29 c0       	rjmp	.+82     	; 0x2576 <fgetc+0x76>
    2524:	22 ff       	sbrs	r18, 2
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <fgetc+0x46>
    2528:	e8 81       	ld	r30, Y
    252a:	f9 81       	ldd	r31, Y+1	; 0x01
    252c:	80 81       	ld	r24, Z
    252e:	08 2e       	mov	r0, r24
    2530:	00 0c       	add	r0, r0
    2532:	99 0b       	sbc	r25, r25
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	19 f4       	brne	.+6      	; 0x253e <fgetc+0x3e>
    2538:	20 62       	ori	r18, 0x20	; 32
    253a:	2b 83       	std	Y+3, r18	; 0x03
    253c:	1a c0       	rjmp	.+52     	; 0x2572 <fgetc+0x72>
    253e:	31 96       	adiw	r30, 0x01	; 1
    2540:	f9 83       	std	Y+1, r31	; 0x01
    2542:	e8 83       	st	Y, r30
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <fgetc+0x62>
    2546:	ea 85       	ldd	r30, Y+10	; 0x0a
    2548:	fb 85       	ldd	r31, Y+11	; 0x0b
    254a:	19 95       	eicall
    254c:	97 ff       	sbrs	r25, 7
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <fgetc+0x62>
    2550:	2b 81       	ldd	r18, Y+3	; 0x03
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	11 f0       	breq	.+4      	; 0x255a <fgetc+0x5a>
    2556:	80 e2       	ldi	r24, 0x20	; 32
    2558:	01 c0       	rjmp	.+2      	; 0x255c <fgetc+0x5c>
    255a:	80 e1       	ldi	r24, 0x10	; 16
    255c:	82 2b       	or	r24, r18
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	08 c0       	rjmp	.+16     	; 0x2572 <fgetc+0x72>
    2562:	2e 81       	ldd	r18, Y+6	; 0x06
    2564:	3f 81       	ldd	r19, Y+7	; 0x07
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	3f 83       	std	Y+7, r19	; 0x07
    256c:	2e 83       	std	Y+6, r18	; 0x06
    256e:	99 27       	eor	r25, r25
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <fgetc+0x76>
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

0000257c <printf>:
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	ae 01       	movw	r20, r28
    2586:	4a 5f       	subi	r20, 0xFA	; 250
    2588:	5f 4f       	sbci	r21, 0xFF	; 255
    258a:	fa 01       	movw	r30, r20
    258c:	61 91       	ld	r22, Z+
    258e:	71 91       	ld	r23, Z+
    2590:	af 01       	movw	r20, r30
    2592:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <__iob+0x2>
    2596:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <__iob+0x3>
    259a:	33 d0       	rcall	.+102    	; 0x2602 <vfprintf>
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <puts>:
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	e0 91 32 0c 	lds	r30, 0x0C32	; 0x800c32 <__iob+0x2>
    25ae:	f0 91 33 0c 	lds	r31, 0x0C33	; 0x800c33 <__iob+0x3>
    25b2:	23 81       	ldd	r18, Z+3	; 0x03
    25b4:	21 ff       	sbrs	r18, 1
    25b6:	1b c0       	rjmp	.+54     	; 0x25ee <puts+0x4c>
    25b8:	8c 01       	movw	r16, r24
    25ba:	d0 e0       	ldi	r29, 0x00	; 0
    25bc:	c0 e0       	ldi	r28, 0x00	; 0
    25be:	f8 01       	movw	r30, r16
    25c0:	81 91       	ld	r24, Z+
    25c2:	8f 01       	movw	r16, r30
    25c4:	60 91 32 0c 	lds	r22, 0x0C32	; 0x800c32 <__iob+0x2>
    25c8:	70 91 33 0c 	lds	r23, 0x0C33	; 0x800c33 <__iob+0x3>
    25cc:	db 01       	movw	r26, r22
    25ce:	18 96       	adiw	r26, 0x08	; 8
    25d0:	ed 91       	ld	r30, X+
    25d2:	fc 91       	ld	r31, X
    25d4:	19 97       	sbiw	r26, 0x09	; 9
    25d6:	88 23       	and	r24, r24
    25d8:	31 f0       	breq	.+12     	; 0x25e6 <puts+0x44>
    25da:	19 95       	eicall
    25dc:	89 2b       	or	r24, r25
    25de:	79 f3       	breq	.-34     	; 0x25be <puts+0x1c>
    25e0:	df ef       	ldi	r29, 0xFF	; 255
    25e2:	cf ef       	ldi	r28, 0xFF	; 255
    25e4:	ec cf       	rjmp	.-40     	; 0x25be <puts+0x1c>
    25e6:	8a e0       	ldi	r24, 0x0A	; 10
    25e8:	19 95       	eicall
    25ea:	89 2b       	or	r24, r25
    25ec:	19 f0       	breq	.+6      	; 0x25f4 <puts+0x52>
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	9f ef       	ldi	r25, 0xFF	; 255
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <puts+0x56>
    25f4:	8d 2f       	mov	r24, r29
    25f6:	9c 2f       	mov	r25, r28
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	08 95       	ret

00002602 <vfprintf>:
    2602:	2f 92       	push	r2
    2604:	3f 92       	push	r3
    2606:	4f 92       	push	r4
    2608:	5f 92       	push	r5
    260a:	6f 92       	push	r6
    260c:	7f 92       	push	r7
    260e:	8f 92       	push	r8
    2610:	9f 92       	push	r9
    2612:	af 92       	push	r10
    2614:	bf 92       	push	r11
    2616:	cf 92       	push	r12
    2618:	df 92       	push	r13
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	2c 97       	sbiw	r28, 0x0c	; 12
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	7c 01       	movw	r14, r24
    2638:	6b 01       	movw	r12, r22
    263a:	8a 01       	movw	r16, r20
    263c:	fc 01       	movw	r30, r24
    263e:	17 82       	std	Z+7, r1	; 0x07
    2640:	16 82       	std	Z+6, r1	; 0x06
    2642:	83 81       	ldd	r24, Z+3	; 0x03
    2644:	81 ff       	sbrs	r24, 1
    2646:	b0 c1       	rjmp	.+864    	; 0x29a8 <vfprintf+0x3a6>
    2648:	ce 01       	movw	r24, r28
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	4c 01       	movw	r8, r24
    264e:	f7 01       	movw	r30, r14
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	f6 01       	movw	r30, r12
    2654:	93 fd       	sbrc	r25, 3
    2656:	85 91       	lpm	r24, Z+
    2658:	93 ff       	sbrs	r25, 3
    265a:	81 91       	ld	r24, Z+
    265c:	6f 01       	movw	r12, r30
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <vfprintf+0x62>
    2662:	9e c1       	rjmp	.+828    	; 0x29a0 <vfprintf+0x39e>
    2664:	85 32       	cpi	r24, 0x25	; 37
    2666:	39 f4       	brne	.+14     	; 0x2676 <vfprintf+0x74>
    2668:	93 fd       	sbrc	r25, 3
    266a:	85 91       	lpm	r24, Z+
    266c:	93 ff       	sbrs	r25, 3
    266e:	81 91       	ld	r24, Z+
    2670:	6f 01       	movw	r12, r30
    2672:	85 32       	cpi	r24, 0x25	; 37
    2674:	21 f4       	brne	.+8      	; 0x267e <vfprintf+0x7c>
    2676:	b7 01       	movw	r22, r14
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	15 d3       	rcall	.+1578   	; 0x2ca6 <fputc>
    267c:	e8 cf       	rjmp	.-48     	; 0x264e <vfprintf+0x4c>
    267e:	51 2c       	mov	r5, r1
    2680:	31 2c       	mov	r3, r1
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	20 32       	cpi	r18, 0x20	; 32
    2686:	a0 f4       	brcc	.+40     	; 0x26b0 <vfprintf+0xae>
    2688:	8b 32       	cpi	r24, 0x2B	; 43
    268a:	69 f0       	breq	.+26     	; 0x26a6 <vfprintf+0xa4>
    268c:	30 f4       	brcc	.+12     	; 0x269a <vfprintf+0x98>
    268e:	80 32       	cpi	r24, 0x20	; 32
    2690:	59 f0       	breq	.+22     	; 0x26a8 <vfprintf+0xa6>
    2692:	83 32       	cpi	r24, 0x23	; 35
    2694:	69 f4       	brne	.+26     	; 0x26b0 <vfprintf+0xae>
    2696:	20 61       	ori	r18, 0x10	; 16
    2698:	2c c0       	rjmp	.+88     	; 0x26f2 <vfprintf+0xf0>
    269a:	8d 32       	cpi	r24, 0x2D	; 45
    269c:	39 f0       	breq	.+14     	; 0x26ac <vfprintf+0xaa>
    269e:	80 33       	cpi	r24, 0x30	; 48
    26a0:	39 f4       	brne	.+14     	; 0x26b0 <vfprintf+0xae>
    26a2:	21 60       	ori	r18, 0x01	; 1
    26a4:	26 c0       	rjmp	.+76     	; 0x26f2 <vfprintf+0xf0>
    26a6:	22 60       	ori	r18, 0x02	; 2
    26a8:	24 60       	ori	r18, 0x04	; 4
    26aa:	23 c0       	rjmp	.+70     	; 0x26f2 <vfprintf+0xf0>
    26ac:	28 60       	ori	r18, 0x08	; 8
    26ae:	21 c0       	rjmp	.+66     	; 0x26f2 <vfprintf+0xf0>
    26b0:	27 fd       	sbrc	r18, 7
    26b2:	27 c0       	rjmp	.+78     	; 0x2702 <vfprintf+0x100>
    26b4:	30 ed       	ldi	r19, 0xD0	; 208
    26b6:	38 0f       	add	r19, r24
    26b8:	3a 30       	cpi	r19, 0x0A	; 10
    26ba:	78 f4       	brcc	.+30     	; 0x26da <vfprintf+0xd8>
    26bc:	26 ff       	sbrs	r18, 6
    26be:	06 c0       	rjmp	.+12     	; 0x26cc <vfprintf+0xca>
    26c0:	fa e0       	ldi	r31, 0x0A	; 10
    26c2:	5f 9e       	mul	r5, r31
    26c4:	30 0d       	add	r19, r0
    26c6:	11 24       	eor	r1, r1
    26c8:	53 2e       	mov	r5, r19
    26ca:	13 c0       	rjmp	.+38     	; 0x26f2 <vfprintf+0xf0>
    26cc:	8a e0       	ldi	r24, 0x0A	; 10
    26ce:	38 9e       	mul	r3, r24
    26d0:	30 0d       	add	r19, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	33 2e       	mov	r3, r19
    26d6:	20 62       	ori	r18, 0x20	; 32
    26d8:	0c c0       	rjmp	.+24     	; 0x26f2 <vfprintf+0xf0>
    26da:	8e 32       	cpi	r24, 0x2E	; 46
    26dc:	21 f4       	brne	.+8      	; 0x26e6 <vfprintf+0xe4>
    26de:	26 fd       	sbrc	r18, 6
    26e0:	5f c1       	rjmp	.+702    	; 0x29a0 <vfprintf+0x39e>
    26e2:	20 64       	ori	r18, 0x40	; 64
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <vfprintf+0xf0>
    26e6:	8c 36       	cpi	r24, 0x6C	; 108
    26e8:	11 f4       	brne	.+4      	; 0x26ee <vfprintf+0xec>
    26ea:	20 68       	ori	r18, 0x80	; 128
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <vfprintf+0xf0>
    26ee:	88 36       	cpi	r24, 0x68	; 104
    26f0:	41 f4       	brne	.+16     	; 0x2702 <vfprintf+0x100>
    26f2:	f6 01       	movw	r30, r12
    26f4:	93 fd       	sbrc	r25, 3
    26f6:	85 91       	lpm	r24, Z+
    26f8:	93 ff       	sbrs	r25, 3
    26fa:	81 91       	ld	r24, Z+
    26fc:	6f 01       	movw	r12, r30
    26fe:	81 11       	cpse	r24, r1
    2700:	c1 cf       	rjmp	.-126    	; 0x2684 <vfprintf+0x82>
    2702:	98 2f       	mov	r25, r24
    2704:	9f 7d       	andi	r25, 0xDF	; 223
    2706:	95 54       	subi	r25, 0x45	; 69
    2708:	93 30       	cpi	r25, 0x03	; 3
    270a:	28 f4       	brcc	.+10     	; 0x2716 <vfprintf+0x114>
    270c:	0c 5f       	subi	r16, 0xFC	; 252
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	ff e3       	ldi	r31, 0x3F	; 63
    2712:	f9 83       	std	Y+1, r31	; 0x01
    2714:	0d c0       	rjmp	.+26     	; 0x2730 <vfprintf+0x12e>
    2716:	83 36       	cpi	r24, 0x63	; 99
    2718:	31 f0       	breq	.+12     	; 0x2726 <vfprintf+0x124>
    271a:	83 37       	cpi	r24, 0x73	; 115
    271c:	71 f0       	breq	.+28     	; 0x273a <vfprintf+0x138>
    271e:	83 35       	cpi	r24, 0x53	; 83
    2720:	09 f0       	breq	.+2      	; 0x2724 <vfprintf+0x122>
    2722:	57 c0       	rjmp	.+174    	; 0x27d2 <vfprintf+0x1d0>
    2724:	21 c0       	rjmp	.+66     	; 0x2768 <vfprintf+0x166>
    2726:	f8 01       	movw	r30, r16
    2728:	80 81       	ld	r24, Z
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	0e 5f       	subi	r16, 0xFE	; 254
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	44 24       	eor	r4, r4
    2732:	43 94       	inc	r4
    2734:	51 2c       	mov	r5, r1
    2736:	54 01       	movw	r10, r8
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <vfprintf+0x160>
    273a:	38 01       	movw	r6, r16
    273c:	f2 e0       	ldi	r31, 0x02	; 2
    273e:	6f 0e       	add	r6, r31
    2740:	71 1c       	adc	r7, r1
    2742:	f8 01       	movw	r30, r16
    2744:	a0 80       	ld	r10, Z
    2746:	b1 80       	ldd	r11, Z+1	; 0x01
    2748:	26 ff       	sbrs	r18, 6
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <vfprintf+0x150>
    274c:	65 2d       	mov	r22, r5
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <vfprintf+0x154>
    2752:	6f ef       	ldi	r22, 0xFF	; 255
    2754:	7f ef       	ldi	r23, 0xFF	; 255
    2756:	c5 01       	movw	r24, r10
    2758:	2c 87       	std	Y+12, r18	; 0x0c
    275a:	9a d2       	rcall	.+1332   	; 0x2c90 <strnlen>
    275c:	2c 01       	movw	r4, r24
    275e:	83 01       	movw	r16, r6
    2760:	2c 85       	ldd	r18, Y+12	; 0x0c
    2762:	2f 77       	andi	r18, 0x7F	; 127
    2764:	22 2e       	mov	r2, r18
    2766:	16 c0       	rjmp	.+44     	; 0x2794 <vfprintf+0x192>
    2768:	38 01       	movw	r6, r16
    276a:	f2 e0       	ldi	r31, 0x02	; 2
    276c:	6f 0e       	add	r6, r31
    276e:	71 1c       	adc	r7, r1
    2770:	f8 01       	movw	r30, r16
    2772:	a0 80       	ld	r10, Z
    2774:	b1 80       	ldd	r11, Z+1	; 0x01
    2776:	26 ff       	sbrs	r18, 6
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <vfprintf+0x17e>
    277a:	65 2d       	mov	r22, r5
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <vfprintf+0x182>
    2780:	6f ef       	ldi	r22, 0xFF	; 255
    2782:	7f ef       	ldi	r23, 0xFF	; 255
    2784:	c5 01       	movw	r24, r10
    2786:	2c 87       	std	Y+12, r18	; 0x0c
    2788:	71 d2       	rcall	.+1250   	; 0x2c6c <strnlen_P>
    278a:	2c 01       	movw	r4, r24
    278c:	2c 85       	ldd	r18, Y+12	; 0x0c
    278e:	20 68       	ori	r18, 0x80	; 128
    2790:	22 2e       	mov	r2, r18
    2792:	83 01       	movw	r16, r6
    2794:	23 fc       	sbrc	r2, 3
    2796:	19 c0       	rjmp	.+50     	; 0x27ca <vfprintf+0x1c8>
    2798:	83 2d       	mov	r24, r3
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	48 16       	cp	r4, r24
    279e:	59 06       	cpc	r5, r25
    27a0:	a0 f4       	brcc	.+40     	; 0x27ca <vfprintf+0x1c8>
    27a2:	b7 01       	movw	r22, r14
    27a4:	80 e2       	ldi	r24, 0x20	; 32
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	7e d2       	rcall	.+1276   	; 0x2ca6 <fputc>
    27aa:	3a 94       	dec	r3
    27ac:	f5 cf       	rjmp	.-22     	; 0x2798 <vfprintf+0x196>
    27ae:	f5 01       	movw	r30, r10
    27b0:	27 fc       	sbrc	r2, 7
    27b2:	85 91       	lpm	r24, Z+
    27b4:	27 fe       	sbrs	r2, 7
    27b6:	81 91       	ld	r24, Z+
    27b8:	5f 01       	movw	r10, r30
    27ba:	b7 01       	movw	r22, r14
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	73 d2       	rcall	.+1254   	; 0x2ca6 <fputc>
    27c0:	31 10       	cpse	r3, r1
    27c2:	3a 94       	dec	r3
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	4f 1a       	sub	r4, r31
    27c8:	51 08       	sbc	r5, r1
    27ca:	41 14       	cp	r4, r1
    27cc:	51 04       	cpc	r5, r1
    27ce:	79 f7       	brne	.-34     	; 0x27ae <vfprintf+0x1ac>
    27d0:	de c0       	rjmp	.+444    	; 0x298e <vfprintf+0x38c>
    27d2:	84 36       	cpi	r24, 0x64	; 100
    27d4:	11 f0       	breq	.+4      	; 0x27da <vfprintf+0x1d8>
    27d6:	89 36       	cpi	r24, 0x69	; 105
    27d8:	31 f5       	brne	.+76     	; 0x2826 <vfprintf+0x224>
    27da:	f8 01       	movw	r30, r16
    27dc:	27 ff       	sbrs	r18, 7
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <vfprintf+0x1ec>
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	0c 5f       	subi	r16, 0xFC	; 252
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	08 c0       	rjmp	.+16     	; 0x27fe <vfprintf+0x1fc>
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	07 2e       	mov	r0, r23
    27f4:	00 0c       	add	r0, r0
    27f6:	88 0b       	sbc	r24, r24
    27f8:	99 0b       	sbc	r25, r25
    27fa:	0e 5f       	subi	r16, 0xFE	; 254
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	2f 76       	andi	r18, 0x6F	; 111
    2800:	72 2e       	mov	r7, r18
    2802:	97 ff       	sbrs	r25, 7
    2804:	09 c0       	rjmp	.+18     	; 0x2818 <vfprintf+0x216>
    2806:	90 95       	com	r25
    2808:	80 95       	com	r24
    280a:	70 95       	com	r23
    280c:	61 95       	neg	r22
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	20 68       	ori	r18, 0x80	; 128
    2816:	72 2e       	mov	r7, r18
    2818:	2a e0       	ldi	r18, 0x0A	; 10
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	a4 01       	movw	r20, r8
    281e:	7b d2       	rcall	.+1270   	; 0x2d16 <__ultoa_invert>
    2820:	a8 2e       	mov	r10, r24
    2822:	a8 18       	sub	r10, r8
    2824:	43 c0       	rjmp	.+134    	; 0x28ac <vfprintf+0x2aa>
    2826:	85 37       	cpi	r24, 0x75	; 117
    2828:	29 f4       	brne	.+10     	; 0x2834 <vfprintf+0x232>
    282a:	2f 7e       	andi	r18, 0xEF	; 239
    282c:	b2 2e       	mov	r11, r18
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	25 c0       	rjmp	.+74     	; 0x287e <vfprintf+0x27c>
    2834:	f2 2f       	mov	r31, r18
    2836:	f9 7f       	andi	r31, 0xF9	; 249
    2838:	bf 2e       	mov	r11, r31
    283a:	8f 36       	cpi	r24, 0x6F	; 111
    283c:	c1 f0       	breq	.+48     	; 0x286e <vfprintf+0x26c>
    283e:	18 f4       	brcc	.+6      	; 0x2846 <vfprintf+0x244>
    2840:	88 35       	cpi	r24, 0x58	; 88
    2842:	79 f0       	breq	.+30     	; 0x2862 <vfprintf+0x260>
    2844:	ad c0       	rjmp	.+346    	; 0x29a0 <vfprintf+0x39e>
    2846:	80 37       	cpi	r24, 0x70	; 112
    2848:	19 f0       	breq	.+6      	; 0x2850 <vfprintf+0x24e>
    284a:	88 37       	cpi	r24, 0x78	; 120
    284c:	21 f0       	breq	.+8      	; 0x2856 <vfprintf+0x254>
    284e:	a8 c0       	rjmp	.+336    	; 0x29a0 <vfprintf+0x39e>
    2850:	2f 2f       	mov	r18, r31
    2852:	20 61       	ori	r18, 0x10	; 16
    2854:	b2 2e       	mov	r11, r18
    2856:	b4 fe       	sbrs	r11, 4
    2858:	0d c0       	rjmp	.+26     	; 0x2874 <vfprintf+0x272>
    285a:	8b 2d       	mov	r24, r11
    285c:	84 60       	ori	r24, 0x04	; 4
    285e:	b8 2e       	mov	r11, r24
    2860:	09 c0       	rjmp	.+18     	; 0x2874 <vfprintf+0x272>
    2862:	24 ff       	sbrs	r18, 4
    2864:	0a c0       	rjmp	.+20     	; 0x287a <vfprintf+0x278>
    2866:	9f 2f       	mov	r25, r31
    2868:	96 60       	ori	r25, 0x06	; 6
    286a:	b9 2e       	mov	r11, r25
    286c:	06 c0       	rjmp	.+12     	; 0x287a <vfprintf+0x278>
    286e:	28 e0       	ldi	r18, 0x08	; 8
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	05 c0       	rjmp	.+10     	; 0x287e <vfprintf+0x27c>
    2874:	20 e1       	ldi	r18, 0x10	; 16
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	02 c0       	rjmp	.+4      	; 0x287e <vfprintf+0x27c>
    287a:	20 e1       	ldi	r18, 0x10	; 16
    287c:	32 e0       	ldi	r19, 0x02	; 2
    287e:	f8 01       	movw	r30, r16
    2880:	b7 fe       	sbrs	r11, 7
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <vfprintf+0x290>
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	0c 5f       	subi	r16, 0xFC	; 252
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	06 c0       	rjmp	.+12     	; 0x289e <vfprintf+0x29c>
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 5f       	subi	r16, 0xFE	; 254
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	a4 01       	movw	r20, r8
    28a0:	3a d2       	rcall	.+1140   	; 0x2d16 <__ultoa_invert>
    28a2:	a8 2e       	mov	r10, r24
    28a4:	a8 18       	sub	r10, r8
    28a6:	fb 2d       	mov	r31, r11
    28a8:	ff 77       	andi	r31, 0x7F	; 127
    28aa:	7f 2e       	mov	r7, r31
    28ac:	76 fe       	sbrs	r7, 6
    28ae:	0b c0       	rjmp	.+22     	; 0x28c6 <vfprintf+0x2c4>
    28b0:	37 2d       	mov	r19, r7
    28b2:	3e 7f       	andi	r19, 0xFE	; 254
    28b4:	a5 14       	cp	r10, r5
    28b6:	50 f4       	brcc	.+20     	; 0x28cc <vfprintf+0x2ca>
    28b8:	74 fe       	sbrs	r7, 4
    28ba:	0a c0       	rjmp	.+20     	; 0x28d0 <vfprintf+0x2ce>
    28bc:	72 fc       	sbrc	r7, 2
    28be:	08 c0       	rjmp	.+16     	; 0x28d0 <vfprintf+0x2ce>
    28c0:	37 2d       	mov	r19, r7
    28c2:	3e 7e       	andi	r19, 0xEE	; 238
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <vfprintf+0x2ce>
    28c6:	ba 2c       	mov	r11, r10
    28c8:	37 2d       	mov	r19, r7
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <vfprintf+0x2d0>
    28cc:	ba 2c       	mov	r11, r10
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <vfprintf+0x2d0>
    28d0:	b5 2c       	mov	r11, r5
    28d2:	34 ff       	sbrs	r19, 4
    28d4:	0d c0       	rjmp	.+26     	; 0x28f0 <vfprintf+0x2ee>
    28d6:	fe 01       	movw	r30, r28
    28d8:	ea 0d       	add	r30, r10
    28da:	f1 1d       	adc	r31, r1
    28dc:	80 81       	ld	r24, Z
    28de:	80 33       	cpi	r24, 0x30	; 48
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <vfprintf+0x2e4>
    28e2:	39 7e       	andi	r19, 0xE9	; 233
    28e4:	09 c0       	rjmp	.+18     	; 0x28f8 <vfprintf+0x2f6>
    28e6:	32 ff       	sbrs	r19, 2
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <vfprintf+0x2f4>
    28ea:	b3 94       	inc	r11
    28ec:	b3 94       	inc	r11
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <vfprintf+0x2f6>
    28f0:	83 2f       	mov	r24, r19
    28f2:	86 78       	andi	r24, 0x86	; 134
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <vfprintf+0x2f6>
    28f6:	b3 94       	inc	r11
    28f8:	33 fd       	sbrc	r19, 3
    28fa:	12 c0       	rjmp	.+36     	; 0x2920 <vfprintf+0x31e>
    28fc:	30 ff       	sbrs	r19, 0
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <vfprintf+0x30a>
    2900:	5a 2c       	mov	r5, r10
    2902:	b3 14       	cp	r11, r3
    2904:	18 f4       	brcc	.+6      	; 0x290c <vfprintf+0x30a>
    2906:	53 0c       	add	r5, r3
    2908:	5b 18       	sub	r5, r11
    290a:	b3 2c       	mov	r11, r3
    290c:	b3 14       	cp	r11, r3
    290e:	60 f4       	brcc	.+24     	; 0x2928 <vfprintf+0x326>
    2910:	b7 01       	movw	r22, r14
    2912:	80 e2       	ldi	r24, 0x20	; 32
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	3c 87       	std	Y+12, r19	; 0x0c
    2918:	c6 d1       	rcall	.+908    	; 0x2ca6 <fputc>
    291a:	b3 94       	inc	r11
    291c:	3c 85       	ldd	r19, Y+12	; 0x0c
    291e:	f6 cf       	rjmp	.-20     	; 0x290c <vfprintf+0x30a>
    2920:	b3 14       	cp	r11, r3
    2922:	10 f4       	brcc	.+4      	; 0x2928 <vfprintf+0x326>
    2924:	3b 18       	sub	r3, r11
    2926:	01 c0       	rjmp	.+2      	; 0x292a <vfprintf+0x328>
    2928:	31 2c       	mov	r3, r1
    292a:	34 ff       	sbrs	r19, 4
    292c:	11 c0       	rjmp	.+34     	; 0x2950 <vfprintf+0x34e>
    292e:	b7 01       	movw	r22, r14
    2930:	80 e3       	ldi	r24, 0x30	; 48
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	3c 87       	std	Y+12, r19	; 0x0c
    2936:	b7 d1       	rcall	.+878    	; 0x2ca6 <fputc>
    2938:	3c 85       	ldd	r19, Y+12	; 0x0c
    293a:	32 ff       	sbrs	r19, 2
    293c:	16 c0       	rjmp	.+44     	; 0x296a <vfprintf+0x368>
    293e:	31 fd       	sbrc	r19, 1
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <vfprintf+0x346>
    2942:	88 e7       	ldi	r24, 0x78	; 120
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	02 c0       	rjmp	.+4      	; 0x294c <vfprintf+0x34a>
    2948:	88 e5       	ldi	r24, 0x58	; 88
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	b7 01       	movw	r22, r14
    294e:	0c c0       	rjmp	.+24     	; 0x2968 <vfprintf+0x366>
    2950:	83 2f       	mov	r24, r19
    2952:	86 78       	andi	r24, 0x86	; 134
    2954:	51 f0       	breq	.+20     	; 0x296a <vfprintf+0x368>
    2956:	31 ff       	sbrs	r19, 1
    2958:	02 c0       	rjmp	.+4      	; 0x295e <vfprintf+0x35c>
    295a:	8b e2       	ldi	r24, 0x2B	; 43
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <vfprintf+0x35e>
    295e:	80 e2       	ldi	r24, 0x20	; 32
    2960:	37 fd       	sbrc	r19, 7
    2962:	8d e2       	ldi	r24, 0x2D	; 45
    2964:	b7 01       	movw	r22, r14
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	9e d1       	rcall	.+828    	; 0x2ca6 <fputc>
    296a:	a5 14       	cp	r10, r5
    296c:	30 f4       	brcc	.+12     	; 0x297a <vfprintf+0x378>
    296e:	b7 01       	movw	r22, r14
    2970:	80 e3       	ldi	r24, 0x30	; 48
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	98 d1       	rcall	.+816    	; 0x2ca6 <fputc>
    2976:	5a 94       	dec	r5
    2978:	f8 cf       	rjmp	.-16     	; 0x296a <vfprintf+0x368>
    297a:	aa 94       	dec	r10
    297c:	f4 01       	movw	r30, r8
    297e:	ea 0d       	add	r30, r10
    2980:	f1 1d       	adc	r31, r1
    2982:	80 81       	ld	r24, Z
    2984:	b7 01       	movw	r22, r14
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	8e d1       	rcall	.+796    	; 0x2ca6 <fputc>
    298a:	a1 10       	cpse	r10, r1
    298c:	f6 cf       	rjmp	.-20     	; 0x297a <vfprintf+0x378>
    298e:	33 20       	and	r3, r3
    2990:	09 f4       	brne	.+2      	; 0x2994 <vfprintf+0x392>
    2992:	5d ce       	rjmp	.-838    	; 0x264e <vfprintf+0x4c>
    2994:	b7 01       	movw	r22, r14
    2996:	80 e2       	ldi	r24, 0x20	; 32
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	85 d1       	rcall	.+778    	; 0x2ca6 <fputc>
    299c:	3a 94       	dec	r3
    299e:	f7 cf       	rjmp	.-18     	; 0x298e <vfprintf+0x38c>
    29a0:	f7 01       	movw	r30, r14
    29a2:	86 81       	ldd	r24, Z+6	; 0x06
    29a4:	97 81       	ldd	r25, Z+7	; 0x07
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <vfprintf+0x3aa>
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	9f ef       	ldi	r25, 0xFF	; 255
    29ac:	2c 96       	adiw	r28, 0x0c	; 12
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	bf 90       	pop	r11
    29ca:	af 90       	pop	r10
    29cc:	9f 90       	pop	r9
    29ce:	8f 90       	pop	r8
    29d0:	7f 90       	pop	r7
    29d2:	6f 90       	pop	r6
    29d4:	5f 90       	pop	r5
    29d6:	4f 90       	pop	r4
    29d8:	3f 90       	pop	r3
    29da:	2f 90       	pop	r2
    29dc:	08 95       	ret

000029de <calloc>:
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	86 9f       	mul	r24, r22
    29e8:	80 01       	movw	r16, r0
    29ea:	87 9f       	mul	r24, r23
    29ec:	10 0d       	add	r17, r0
    29ee:	96 9f       	mul	r25, r22
    29f0:	10 0d       	add	r17, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	c8 01       	movw	r24, r16
    29f6:	0d d0       	rcall	.+26     	; 0x2a12 <malloc>
    29f8:	ec 01       	movw	r28, r24
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	21 f0       	breq	.+8      	; 0x2a06 <calloc+0x28>
    29fe:	a8 01       	movw	r20, r16
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	3e d1       	rcall	.+636    	; 0x2c82 <memset>
    2a06:	ce 01       	movw	r24, r28
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <malloc>:
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	82 30       	cpi	r24, 0x02	; 2
    2a18:	91 05       	cpc	r25, r1
    2a1a:	10 f4       	brcc	.+4      	; 0x2a20 <malloc+0xe>
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <__flp>
    2a24:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <__flp+0x1>
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	c0 e0       	ldi	r28, 0x00	; 0
    2a2e:	d0 e0       	ldi	r29, 0x00	; 0
    2a30:	30 97       	sbiw	r30, 0x00	; 0
    2a32:	11 f1       	breq	.+68     	; 0x2a78 <malloc+0x66>
    2a34:	40 81       	ld	r20, Z
    2a36:	51 81       	ldd	r21, Z+1	; 0x01
    2a38:	48 17       	cp	r20, r24
    2a3a:	59 07       	cpc	r21, r25
    2a3c:	c0 f0       	brcs	.+48     	; 0x2a6e <malloc+0x5c>
    2a3e:	48 17       	cp	r20, r24
    2a40:	59 07       	cpc	r21, r25
    2a42:	61 f4       	brne	.+24     	; 0x2a5c <malloc+0x4a>
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	20 97       	sbiw	r28, 0x00	; 0
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <malloc+0x40>
    2a4c:	9b 83       	std	Y+3, r25	; 0x03
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	2b c0       	rjmp	.+86     	; 0x2aa8 <malloc+0x96>
    2a52:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <__flp+0x1>
    2a56:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <__flp>
    2a5a:	26 c0       	rjmp	.+76     	; 0x2aa8 <malloc+0x96>
    2a5c:	21 15       	cp	r18, r1
    2a5e:	31 05       	cpc	r19, r1
    2a60:	19 f0       	breq	.+6      	; 0x2a68 <malloc+0x56>
    2a62:	42 17       	cp	r20, r18
    2a64:	53 07       	cpc	r21, r19
    2a66:	18 f4       	brcc	.+6      	; 0x2a6e <malloc+0x5c>
    2a68:	9a 01       	movw	r18, r20
    2a6a:	be 01       	movw	r22, r28
    2a6c:	df 01       	movw	r26, r30
    2a6e:	ef 01       	movw	r28, r30
    2a70:	02 80       	ldd	r0, Z+2	; 0x02
    2a72:	f3 81       	ldd	r31, Z+3	; 0x03
    2a74:	e0 2d       	mov	r30, r0
    2a76:	dc cf       	rjmp	.-72     	; 0x2a30 <malloc+0x1e>
    2a78:	21 15       	cp	r18, r1
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	09 f1       	breq	.+66     	; 0x2ac0 <malloc+0xae>
    2a7e:	28 1b       	sub	r18, r24
    2a80:	39 0b       	sbc	r19, r25
    2a82:	24 30       	cpi	r18, 0x04	; 4
    2a84:	31 05       	cpc	r19, r1
    2a86:	90 f4       	brcc	.+36     	; 0x2aac <malloc+0x9a>
    2a88:	12 96       	adiw	r26, 0x02	; 2
    2a8a:	8d 91       	ld	r24, X+
    2a8c:	9c 91       	ld	r25, X
    2a8e:	13 97       	sbiw	r26, 0x03	; 3
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	21 f0       	breq	.+8      	; 0x2a9e <malloc+0x8c>
    2a96:	fb 01       	movw	r30, r22
    2a98:	93 83       	std	Z+3, r25	; 0x03
    2a9a:	82 83       	std	Z+2, r24	; 0x02
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <malloc+0x94>
    2a9e:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <__flp+0x1>
    2aa2:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <__flp>
    2aa6:	fd 01       	movw	r30, r26
    2aa8:	32 96       	adiw	r30, 0x02	; 2
    2aaa:	44 c0       	rjmp	.+136    	; 0x2b34 <malloc+0x122>
    2aac:	fd 01       	movw	r30, r26
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	81 93       	st	Z+, r24
    2ab4:	91 93       	st	Z+, r25
    2ab6:	22 50       	subi	r18, 0x02	; 2
    2ab8:	31 09       	sbc	r19, r1
    2aba:	2d 93       	st	X+, r18
    2abc:	3c 93       	st	X, r19
    2abe:	3a c0       	rjmp	.+116    	; 0x2b34 <malloc+0x122>
    2ac0:	20 91 36 0c 	lds	r18, 0x0C36	; 0x800c36 <__brkval>
    2ac4:	30 91 37 0c 	lds	r19, 0x0C37	; 0x800c37 <__brkval+0x1>
    2ac8:	23 2b       	or	r18, r19
    2aca:	41 f4       	brne	.+16     	; 0x2adc <malloc+0xca>
    2acc:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_start>
    2ad0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_start+0x1>
    2ad4:	30 93 37 0c 	sts	0x0C37, r19	; 0x800c37 <__brkval+0x1>
    2ad8:	20 93 36 0c 	sts	0x0C36, r18	; 0x800c36 <__brkval>
    2adc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_end>
    2ae0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_end+0x1>
    2ae4:	21 15       	cp	r18, r1
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	41 f4       	brne	.+16     	; 0x2afa <malloc+0xe8>
    2aea:	2d b7       	in	r18, 0x3d	; 61
    2aec:	3e b7       	in	r19, 0x3e	; 62
    2aee:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__malloc_margin>
    2af2:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__malloc_margin+0x1>
    2af6:	24 1b       	sub	r18, r20
    2af8:	35 0b       	sbc	r19, r21
    2afa:	e0 91 36 0c 	lds	r30, 0x0C36	; 0x800c36 <__brkval>
    2afe:	f0 91 37 0c 	lds	r31, 0x0C37	; 0x800c37 <__brkval+0x1>
    2b02:	e2 17       	cp	r30, r18
    2b04:	f3 07       	cpc	r31, r19
    2b06:	a0 f4       	brcc	.+40     	; 0x2b30 <malloc+0x11e>
    2b08:	2e 1b       	sub	r18, r30
    2b0a:	3f 0b       	sbc	r19, r31
    2b0c:	28 17       	cp	r18, r24
    2b0e:	39 07       	cpc	r19, r25
    2b10:	78 f0       	brcs	.+30     	; 0x2b30 <malloc+0x11e>
    2b12:	ac 01       	movw	r20, r24
    2b14:	4e 5f       	subi	r20, 0xFE	; 254
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	24 17       	cp	r18, r20
    2b1a:	35 07       	cpc	r19, r21
    2b1c:	48 f0       	brcs	.+18     	; 0x2b30 <malloc+0x11e>
    2b1e:	4e 0f       	add	r20, r30
    2b20:	5f 1f       	adc	r21, r31
    2b22:	50 93 37 0c 	sts	0x0C37, r21	; 0x800c37 <__brkval+0x1>
    2b26:	40 93 36 0c 	sts	0x0C36, r20	; 0x800c36 <__brkval>
    2b2a:	81 93       	st	Z+, r24
    2b2c:	91 93       	st	Z+, r25
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <malloc+0x122>
    2b30:	e0 e0       	ldi	r30, 0x00	; 0
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	cf 01       	movw	r24, r30
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <free>:
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <free+0xe>
    2b48:	8c c0       	rjmp	.+280    	; 0x2c62 <free+0x126>
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	32 97       	sbiw	r30, 0x02	; 2
    2b4e:	13 82       	std	Z+3, r1	; 0x03
    2b50:	12 82       	std	Z+2, r1	; 0x02
    2b52:	00 91 38 0c 	lds	r16, 0x0C38	; 0x800c38 <__flp>
    2b56:	10 91 39 0c 	lds	r17, 0x0C39	; 0x800c39 <__flp+0x1>
    2b5a:	01 15       	cp	r16, r1
    2b5c:	11 05       	cpc	r17, r1
    2b5e:	81 f4       	brne	.+32     	; 0x2b80 <free+0x44>
    2b60:	20 81       	ld	r18, Z
    2b62:	31 81       	ldd	r19, Z+1	; 0x01
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	20 91 36 0c 	lds	r18, 0x0C36	; 0x800c36 <__brkval>
    2b6c:	30 91 37 0c 	lds	r19, 0x0C37	; 0x800c37 <__brkval+0x1>
    2b70:	28 17       	cp	r18, r24
    2b72:	39 07       	cpc	r19, r25
    2b74:	79 f5       	brne	.+94     	; 0x2bd4 <free+0x98>
    2b76:	f0 93 37 0c 	sts	0x0C37, r31	; 0x800c37 <__brkval+0x1>
    2b7a:	e0 93 36 0c 	sts	0x0C36, r30	; 0x800c36 <__brkval>
    2b7e:	71 c0       	rjmp	.+226    	; 0x2c62 <free+0x126>
    2b80:	d8 01       	movw	r26, r16
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	ae 17       	cp	r26, r30
    2b88:	bf 07       	cpc	r27, r31
    2b8a:	50 f4       	brcc	.+20     	; 0x2ba0 <free+0x64>
    2b8c:	12 96       	adiw	r26, 0x02	; 2
    2b8e:	2d 91       	ld	r18, X+
    2b90:	3c 91       	ld	r19, X
    2b92:	13 97       	sbiw	r26, 0x03	; 3
    2b94:	ad 01       	movw	r20, r26
    2b96:	21 15       	cp	r18, r1
    2b98:	31 05       	cpc	r19, r1
    2b9a:	09 f1       	breq	.+66     	; 0x2bde <free+0xa2>
    2b9c:	d9 01       	movw	r26, r18
    2b9e:	f3 cf       	rjmp	.-26     	; 0x2b86 <free+0x4a>
    2ba0:	9d 01       	movw	r18, r26
    2ba2:	da 01       	movw	r26, r20
    2ba4:	33 83       	std	Z+3, r19	; 0x03
    2ba6:	22 83       	std	Z+2, r18	; 0x02
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	86 0f       	add	r24, r22
    2bae:	97 1f       	adc	r25, r23
    2bb0:	82 17       	cp	r24, r18
    2bb2:	93 07       	cpc	r25, r19
    2bb4:	69 f4       	brne	.+26     	; 0x2bd0 <free+0x94>
    2bb6:	ec 01       	movw	r28, r24
    2bb8:	28 81       	ld	r18, Y
    2bba:	39 81       	ldd	r19, Y+1	; 0x01
    2bbc:	26 0f       	add	r18, r22
    2bbe:	37 1f       	adc	r19, r23
    2bc0:	2e 5f       	subi	r18, 0xFE	; 254
    2bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc4:	31 83       	std	Z+1, r19	; 0x01
    2bc6:	20 83       	st	Z, r18
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	9b 81       	ldd	r25, Y+3	; 0x03
    2bcc:	93 83       	std	Z+3, r25	; 0x03
    2bce:	82 83       	std	Z+2, r24	; 0x02
    2bd0:	45 2b       	or	r20, r21
    2bd2:	29 f4       	brne	.+10     	; 0x2bde <free+0xa2>
    2bd4:	f0 93 39 0c 	sts	0x0C39, r31	; 0x800c39 <__flp+0x1>
    2bd8:	e0 93 38 0c 	sts	0x0C38, r30	; 0x800c38 <__flp>
    2bdc:	42 c0       	rjmp	.+132    	; 0x2c62 <free+0x126>
    2bde:	13 96       	adiw	r26, 0x03	; 3
    2be0:	fc 93       	st	X, r31
    2be2:	ee 93       	st	-X, r30
    2be4:	12 97       	sbiw	r26, 0x02	; 2
    2be6:	ed 01       	movw	r28, r26
    2be8:	49 91       	ld	r20, Y+
    2bea:	59 91       	ld	r21, Y+
    2bec:	9e 01       	movw	r18, r28
    2bee:	24 0f       	add	r18, r20
    2bf0:	35 1f       	adc	r19, r21
    2bf2:	e2 17       	cp	r30, r18
    2bf4:	f3 07       	cpc	r31, r19
    2bf6:	71 f4       	brne	.+28     	; 0x2c14 <free+0xd8>
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	84 0f       	add	r24, r20
    2bfe:	95 1f       	adc	r25, r21
    2c00:	02 96       	adiw	r24, 0x02	; 2
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	9c 93       	st	X, r25
    2c06:	8e 93       	st	-X, r24
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	9c 93       	st	X, r25
    2c10:	8e 93       	st	-X, r24
    2c12:	12 97       	sbiw	r26, 0x02	; 2
    2c14:	e0 e0       	ldi	r30, 0x00	; 0
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	d8 01       	movw	r26, r16
    2c1a:	12 96       	adiw	r26, 0x02	; 2
    2c1c:	8d 91       	ld	r24, X+
    2c1e:	9c 91       	ld	r25, X
    2c20:	13 97       	sbiw	r26, 0x03	; 3
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	19 f0       	breq	.+6      	; 0x2c2c <free+0xf0>
    2c26:	f8 01       	movw	r30, r16
    2c28:	8c 01       	movw	r16, r24
    2c2a:	f6 cf       	rjmp	.-20     	; 0x2c18 <free+0xdc>
    2c2c:	8d 91       	ld	r24, X+
    2c2e:	9c 91       	ld	r25, X
    2c30:	98 01       	movw	r18, r16
    2c32:	2e 5f       	subi	r18, 0xFE	; 254
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	82 0f       	add	r24, r18
    2c38:	93 1f       	adc	r25, r19
    2c3a:	20 91 36 0c 	lds	r18, 0x0C36	; 0x800c36 <__brkval>
    2c3e:	30 91 37 0c 	lds	r19, 0x0C37	; 0x800c37 <__brkval+0x1>
    2c42:	28 17       	cp	r18, r24
    2c44:	39 07       	cpc	r19, r25
    2c46:	69 f4       	brne	.+26     	; 0x2c62 <free+0x126>
    2c48:	30 97       	sbiw	r30, 0x00	; 0
    2c4a:	29 f4       	brne	.+10     	; 0x2c56 <free+0x11a>
    2c4c:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <__flp+0x1>
    2c50:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <__flp>
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <free+0x11e>
    2c56:	13 82       	std	Z+3, r1	; 0x03
    2c58:	12 82       	std	Z+2, r1	; 0x02
    2c5a:	10 93 37 0c 	sts	0x0C37, r17	; 0x800c37 <__brkval+0x1>
    2c5e:	00 93 36 0c 	sts	0x0C36, r16	; 0x800c36 <__brkval>
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <strnlen_P>:
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	05 90       	lpm	r0, Z+
    2c70:	61 50       	subi	r22, 0x01	; 1
    2c72:	70 40       	sbci	r23, 0x00	; 0
    2c74:	01 10       	cpse	r0, r1
    2c76:	d8 f7       	brcc	.-10     	; 0x2c6e <strnlen_P+0x2>
    2c78:	80 95       	com	r24
    2c7a:	90 95       	com	r25
    2c7c:	8e 0f       	add	r24, r30
    2c7e:	9f 1f       	adc	r25, r31
    2c80:	08 95       	ret

00002c82 <memset>:
    2c82:	dc 01       	movw	r26, r24
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <memset+0x6>
    2c86:	6d 93       	st	X+, r22
    2c88:	41 50       	subi	r20, 0x01	; 1
    2c8a:	50 40       	sbci	r21, 0x00	; 0
    2c8c:	e0 f7       	brcc	.-8      	; 0x2c86 <memset+0x4>
    2c8e:	08 95       	ret

00002c90 <strnlen>:
    2c90:	fc 01       	movw	r30, r24
    2c92:	61 50       	subi	r22, 0x01	; 1
    2c94:	70 40       	sbci	r23, 0x00	; 0
    2c96:	01 90       	ld	r0, Z+
    2c98:	01 10       	cpse	r0, r1
    2c9a:	d8 f7       	brcc	.-10     	; 0x2c92 <strnlen+0x2>
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	8e 0f       	add	r24, r30
    2ca2:	9f 1f       	adc	r25, r31
    2ca4:	08 95       	ret

00002ca6 <fputc>:
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	fb 01       	movw	r30, r22
    2cb0:	23 81       	ldd	r18, Z+3	; 0x03
    2cb2:	21 fd       	sbrc	r18, 1
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <fputc+0x16>
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	9f ef       	ldi	r25, 0xFF	; 255
    2cba:	28 c0       	rjmp	.+80     	; 0x2d0c <fputc+0x66>
    2cbc:	22 ff       	sbrs	r18, 2
    2cbe:	16 c0       	rjmp	.+44     	; 0x2cec <fputc+0x46>
    2cc0:	46 81       	ldd	r20, Z+6	; 0x06
    2cc2:	57 81       	ldd	r21, Z+7	; 0x07
    2cc4:	24 81       	ldd	r18, Z+4	; 0x04
    2cc6:	35 81       	ldd	r19, Z+5	; 0x05
    2cc8:	42 17       	cp	r20, r18
    2cca:	53 07       	cpc	r21, r19
    2ccc:	44 f4       	brge	.+16     	; 0x2cde <fputc+0x38>
    2cce:	a0 81       	ld	r26, Z
    2cd0:	b1 81       	ldd	r27, Z+1	; 0x01
    2cd2:	9d 01       	movw	r18, r26
    2cd4:	2f 5f       	subi	r18, 0xFF	; 255
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	31 83       	std	Z+1, r19	; 0x01
    2cda:	20 83       	st	Z, r18
    2cdc:	8c 93       	st	X, r24
    2cde:	26 81       	ldd	r18, Z+6	; 0x06
    2ce0:	37 81       	ldd	r19, Z+7	; 0x07
    2ce2:	2f 5f       	subi	r18, 0xFF	; 255
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	37 83       	std	Z+7, r19	; 0x07
    2ce8:	26 83       	std	Z+6, r18	; 0x06
    2cea:	10 c0       	rjmp	.+32     	; 0x2d0c <fputc+0x66>
    2cec:	eb 01       	movw	r28, r22
    2cee:	09 2f       	mov	r16, r25
    2cf0:	18 2f       	mov	r17, r24
    2cf2:	00 84       	ldd	r0, Z+8	; 0x08
    2cf4:	f1 85       	ldd	r31, Z+9	; 0x09
    2cf6:	e0 2d       	mov	r30, r0
    2cf8:	19 95       	eicall
    2cfa:	89 2b       	or	r24, r25
    2cfc:	e1 f6       	brne	.-72     	; 0x2cb6 <fputc+0x10>
    2cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2d00:	9f 81       	ldd	r25, Y+7	; 0x07
    2d02:	01 96       	adiw	r24, 0x01	; 1
    2d04:	9f 83       	std	Y+7, r25	; 0x07
    2d06:	8e 83       	std	Y+6, r24	; 0x06
    2d08:	81 2f       	mov	r24, r17
    2d0a:	90 2f       	mov	r25, r16
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	08 95       	ret

00002d16 <__ultoa_invert>:
    2d16:	fa 01       	movw	r30, r20
    2d18:	aa 27       	eor	r26, r26
    2d1a:	28 30       	cpi	r18, 0x08	; 8
    2d1c:	51 f1       	breq	.+84     	; 0x2d72 <__ultoa_invert+0x5c>
    2d1e:	20 31       	cpi	r18, 0x10	; 16
    2d20:	81 f1       	breq	.+96     	; 0x2d82 <__ultoa_invert+0x6c>
    2d22:	e8 94       	clt
    2d24:	6f 93       	push	r22
    2d26:	6e 7f       	andi	r22, 0xFE	; 254
    2d28:	6e 5f       	subi	r22, 0xFE	; 254
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	af 4f       	sbci	r26, 0xFF	; 255
    2d32:	b1 e0       	ldi	r27, 0x01	; 1
    2d34:	3e d0       	rcall	.+124    	; 0x2db2 <__ultoa_invert+0x9c>
    2d36:	b4 e0       	ldi	r27, 0x04	; 4
    2d38:	3c d0       	rcall	.+120    	; 0x2db2 <__ultoa_invert+0x9c>
    2d3a:	67 0f       	add	r22, r23
    2d3c:	78 1f       	adc	r23, r24
    2d3e:	89 1f       	adc	r24, r25
    2d40:	9a 1f       	adc	r25, r26
    2d42:	a1 1d       	adc	r26, r1
    2d44:	68 0f       	add	r22, r24
    2d46:	79 1f       	adc	r23, r25
    2d48:	8a 1f       	adc	r24, r26
    2d4a:	91 1d       	adc	r25, r1
    2d4c:	a1 1d       	adc	r26, r1
    2d4e:	6a 0f       	add	r22, r26
    2d50:	71 1d       	adc	r23, r1
    2d52:	81 1d       	adc	r24, r1
    2d54:	91 1d       	adc	r25, r1
    2d56:	a1 1d       	adc	r26, r1
    2d58:	20 d0       	rcall	.+64     	; 0x2d9a <__ultoa_invert+0x84>
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__ultoa_invert+0x48>
    2d5c:	68 94       	set
    2d5e:	3f 91       	pop	r19
    2d60:	2a e0       	ldi	r18, 0x0A	; 10
    2d62:	26 9f       	mul	r18, r22
    2d64:	11 24       	eor	r1, r1
    2d66:	30 19       	sub	r19, r0
    2d68:	30 5d       	subi	r19, 0xD0	; 208
    2d6a:	31 93       	st	Z+, r19
    2d6c:	de f6       	brtc	.-74     	; 0x2d24 <__ultoa_invert+0xe>
    2d6e:	cf 01       	movw	r24, r30
    2d70:	08 95       	ret
    2d72:	46 2f       	mov	r20, r22
    2d74:	47 70       	andi	r20, 0x07	; 7
    2d76:	40 5d       	subi	r20, 0xD0	; 208
    2d78:	41 93       	st	Z+, r20
    2d7a:	b3 e0       	ldi	r27, 0x03	; 3
    2d7c:	0f d0       	rcall	.+30     	; 0x2d9c <__ultoa_invert+0x86>
    2d7e:	c9 f7       	brne	.-14     	; 0x2d72 <__ultoa_invert+0x5c>
    2d80:	f6 cf       	rjmp	.-20     	; 0x2d6e <__ultoa_invert+0x58>
    2d82:	46 2f       	mov	r20, r22
    2d84:	4f 70       	andi	r20, 0x0F	; 15
    2d86:	40 5d       	subi	r20, 0xD0	; 208
    2d88:	4a 33       	cpi	r20, 0x3A	; 58
    2d8a:	18 f0       	brcs	.+6      	; 0x2d92 <__ultoa_invert+0x7c>
    2d8c:	49 5d       	subi	r20, 0xD9	; 217
    2d8e:	31 fd       	sbrc	r19, 1
    2d90:	40 52       	subi	r20, 0x20	; 32
    2d92:	41 93       	st	Z+, r20
    2d94:	02 d0       	rcall	.+4      	; 0x2d9a <__ultoa_invert+0x84>
    2d96:	a9 f7       	brne	.-22     	; 0x2d82 <__ultoa_invert+0x6c>
    2d98:	ea cf       	rjmp	.-44     	; 0x2d6e <__ultoa_invert+0x58>
    2d9a:	b4 e0       	ldi	r27, 0x04	; 4
    2d9c:	a6 95       	lsr	r26
    2d9e:	97 95       	ror	r25
    2da0:	87 95       	ror	r24
    2da2:	77 95       	ror	r23
    2da4:	67 95       	ror	r22
    2da6:	ba 95       	dec	r27
    2da8:	c9 f7       	brne	.-14     	; 0x2d9c <__ultoa_invert+0x86>
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	61 05       	cpc	r22, r1
    2dae:	71 05       	cpc	r23, r1
    2db0:	08 95       	ret
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	0a 2e       	mov	r0, r26
    2db8:	06 94       	lsr	r0
    2dba:	57 95       	ror	r21
    2dbc:	47 95       	ror	r20
    2dbe:	37 95       	ror	r19
    2dc0:	27 95       	ror	r18
    2dc2:	ba 95       	dec	r27
    2dc4:	c9 f7       	brne	.-14     	; 0x2db8 <__ultoa_invert+0xa2>
    2dc6:	62 0f       	add	r22, r18
    2dc8:	73 1f       	adc	r23, r19
    2dca:	84 1f       	adc	r24, r20
    2dcc:	95 1f       	adc	r25, r21
    2dce:	a0 1d       	adc	r26, r0
    2dd0:	08 95       	ret

00002dd2 <_exit>:
    2dd2:	f8 94       	cli

00002dd4 <__stop_program>:
    2dd4:	ff cf       	rjmp	.-2      	; 0x2dd4 <__stop_program>
