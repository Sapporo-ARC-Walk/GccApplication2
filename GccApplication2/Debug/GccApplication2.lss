
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000088c  00800200  00002f46  00002fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b0  00800a8c  00800a8c  00003866  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031c6  00000000  00000000  00003f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c48  00000000  00000000  0000715d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c4f  00000000  00000000  00007da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000938  00000000  00000000  000099f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d42  00000000  00000000  0000a32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e78  00000000  00000000  0000b06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  0000cee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c4       	rjmp	.+2120   	; 0x8ae <__vector_25>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c0       	rjmp	.+128    	; 0x10e <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c5       	rjmp	.+2598   	; 0xab8 <__vector_36>
      92:	00 00       	nop
      94:	3c c0       	rjmp	.+120    	; 0x10e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c0       	rjmp	.+116    	; 0x10e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c0       	rjmp	.+112    	; 0x10e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c0       	rjmp	.+108    	; 0x10e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c0       	rjmp	.+104    	; 0x10e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c0       	rjmp	.+100    	; 0x10e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c0       	rjmp	.+96     	; 0x10e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c0       	rjmp	.+92     	; 0x10e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c0       	rjmp	.+88     	; 0x10e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c0       	rjmp	.+84     	; 0x10e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c0       	rjmp	.+80     	; 0x10e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c0       	rjmp	.+76     	; 0x10e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c0       	rjmp	.+72     	; 0x10e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c0       	rjmp	.+68     	; 0x10e <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	1a e0       	ldi	r17, 0x0A	; 10
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e6 e4       	ldi	r30, 0x46	; 70
      e4:	ff e2       	ldi	r31, 0x2F	; 47
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	ac 38       	cpi	r26, 0x8C	; 140
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	2e e0       	ldi	r18, 0x0E	; 14
      f8:	ac e8       	ldi	r26, 0x8C	; 140
      fa:	ba e0       	ldi	r27, 0x0A	; 10
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ac 33       	cpi	r26, 0x3C	; 60
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <main>
     10a:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <dxl_get_result>:
     110:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     114:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     118:	08 95       	ret

0000011a <dxl_set_txpacket_id>:
     11a:	80 93 8e 0a 	sts	0x0A8E, r24	; 0x800a8e <__data_end+0x2>
     11e:	08 95       	ret

00000120 <dxl_set_txpacket_instruction>:
     120:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     124:	08 95       	ret

00000126 <dxl_set_txpacket_parameter>:
     126:	fc 01       	movw	r30, r24
     128:	e4 57       	subi	r30, 0x74	; 116
     12a:	f5 4f       	sbci	r31, 0xF5	; 245
     12c:	65 83       	std	Z+5, r22	; 0x05
     12e:	08 95       	ret

00000130 <dxl_set_txpacket_length>:
     130:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     134:	08 95       	ret

00000136 <dxl_get_rxpacket_error>:
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	90 91 30 0b 	lds	r25, 0x0B30	; 0x800b30 <gbStatusPacket+0x4>
     13e:	98 23       	and	r25, r24
     140:	11 f0       	breq	.+4      	; 0x146 <dxl_get_rxpacket_error+0x10>
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	c9 01       	movw	r24, r18
     148:	08 95       	ret

0000014a <dxl_get_rxpacket_length>:
     14a:	80 91 2f 0b 	lds	r24, 0x0B2F	; 0x800b2f <gbStatusPacket+0x3>
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <dxl_get_rxpacket_parameter>:
     152:	fc 01       	movw	r30, r24
     154:	e4 5d       	subi	r30, 0xD4	; 212
     156:	f4 4f       	sbci	r31, 0xF4	; 244
     158:	85 81       	ldd	r24, Z+5	; 0x05
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <dxl_makeword>:
     15e:	36 2f       	mov	r19, r22
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	28 0f       	add	r18, r24
     164:	39 1f       	adc	r19, r25
     166:	c9 01       	movw	r24, r18
     168:	08 95       	ret

0000016a <dxl_get_lowbyte>:
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <dxl_get_highbyte>:
     172:	80 70       	andi	r24, 0x00	; 0
     174:	89 2f       	mov	r24, r25
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <dxl_rx_packet>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     186:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <dxl_rx_packet+0x16>
     18e:	b8 c0       	rjmp	.+368    	; 0x300 <dxl_rx_packet+0x186>
     190:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <__data_end+0x2>
     194:	8e 3f       	cpi	r24, 0xFE	; 254
     196:	09 f4       	brne	.+2      	; 0x19a <dxl_rx_packet+0x20>
     198:	a9 c0       	rjmp	.+338    	; 0x2ec <dxl_rx_packet+0x172>
     19a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     19e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <dxl_rx_packet+0x36>
     1a6:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <gbRxGetLength>
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 72 0b 	sts	0x0B72, r24	; 0x800b72 <gbRxPacketLength>
     1b0:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <gbRxGetLength>
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	60 91 72 0b 	lds	r22, 0x0B72	; 0x800b72 <gbRxPacketLength>
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	84 5d       	subi	r24, 0xD4	; 212
     1c2:	94 4f       	sbci	r25, 0xF4	; 244
     1c4:	49 d3       	rcall	.+1682   	; 0x858 <dxl_hal_rx>
     1c6:	90 91 73 0b 	lds	r25, 0x0B73	; 0x800b73 <gbRxGetLength>
     1ca:	98 0f       	add	r25, r24
     1cc:	90 93 73 0b 	sts	0x0B73, r25	; 0x800b73 <gbRxGetLength>
     1d0:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <gbRxPacketLength>
     1d4:	98 17       	cp	r25, r24
     1d6:	18 f4       	brcc	.+6      	; 0x1de <dxl_rx_packet+0x64>
     1d8:	4a d2       	rcall	.+1172   	; 0x66e <dxl_hal_timeout>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	71 f0       	breq	.+28     	; 0x1fa <dxl_rx_packet+0x80>
     1de:	70 91 73 0b 	lds	r23, 0x0B73	; 0x800b73 <gbRxGetLength>
     1e2:	47 2f       	mov	r20, r23
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	da 01       	movw	r26, r20
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	8a 01       	movw	r16, r20
     1ec:	02 50       	subi	r16, 0x02	; 2
     1ee:	10 40       	sbci	r17, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	ed 01       	movw	r28, r26
     1f4:	c4 5d       	subi	r28, 0xD4	; 212
     1f6:	d4 4f       	sbci	r29, 0xF4	; 244
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <dxl_rx_packet+0xb0>
     1fa:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <gbRxGetLength>
     1fe:	88 23       	and	r24, r24
     200:	09 f0       	breq	.+2      	; 0x204 <dxl_rx_packet+0x8a>
     202:	71 c0       	rjmp	.+226    	; 0x2e6 <dxl_rx_packet+0x16c>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	73 c0       	rjmp	.+230    	; 0x2f0 <dxl_rx_packet+0x176>
     20a:	f9 01       	movw	r30, r18
     20c:	e4 5d       	subi	r30, 0xD4	; 212
     20e:	f4 4f       	sbci	r31, 0xF4	; 244
     210:	80 81       	ld	r24, Z
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	19 f4       	brne	.+6      	; 0x21c <dxl_rx_packet+0xa2>
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	61 f0       	breq	.+24     	; 0x234 <dxl_rx_packet+0xba>
     21c:	20 17       	cp	r18, r16
     21e:	31 07       	cpc	r19, r17
     220:	19 f4       	brne	.+6      	; 0x228 <dxl_rx_packet+0xae>
     222:	88 81       	ld	r24, Y
     224:	8f 3f       	cpi	r24, 0xFF	; 255
     226:	31 f0       	breq	.+12     	; 0x234 <dxl_rx_packet+0xba>
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	26 2f       	mov	r18, r22
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2a 17       	cp	r18, r26
     230:	3b 07       	cpc	r19, r27
     232:	5c f3       	brlt	.-42     	; 0x20a <dxl_rx_packet+0x90>
     234:	66 23       	and	r22, r22
     236:	a1 f0       	breq	.+40     	; 0x260 <dxl_rx_packet+0xe6>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	42 1b       	sub	r20, r18
     23c:	53 0b       	sbc	r21, r19
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dxl_rx_packet+0xd6>
     240:	e4 5d       	subi	r30, 0xD4	; 212
     242:	f4 4f       	sbci	r31, 0xF4	; 244
     244:	df 01       	movw	r26, r30
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	8c 91       	ld	r24, X
     24c:	80 83       	st	Z, r24
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e4 17       	cp	r30, r20
     256:	f5 07       	cpc	r31, r21
     258:	9c f3       	brlt	.-26     	; 0x240 <dxl_rx_packet+0xc6>
     25a:	76 1b       	sub	r23, r22
     25c:	70 93 73 0b 	sts	0x0B73, r23	; 0x800b73 <gbRxGetLength>
     260:	20 91 73 0b 	lds	r18, 0x0B73	; 0x800b73 <gbRxGetLength>
     264:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <gbRxPacketLength>
     268:	28 17       	cp	r18, r24
     26a:	28 f1       	brcs	.+74     	; 0x2b6 <dxl_rx_packet+0x13c>
     26c:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <__data_end+0x2>
     270:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <gbStatusPacket+0x2>
     274:	98 17       	cp	r25, r24
     276:	b9 f5       	brne	.+110    	; 0x2e6 <dxl_rx_packet+0x16c>
     278:	60 91 2f 0b 	lds	r22, 0x0B2F	; 0x800b2f <gbStatusPacket+0x3>
     27c:	6c 5f       	subi	r22, 0xFC	; 252
     27e:	60 93 72 0b 	sts	0x0B72, r22	; 0x800b72 <gbRxPacketLength>
     282:	26 17       	cp	r18, r22
     284:	88 f4       	brcc	.+34     	; 0x2a8 <dxl_rx_packet+0x12e>
     286:	82 2f       	mov	r24, r18
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	84 5d       	subi	r24, 0xD4	; 212
     292:	94 4f       	sbci	r25, 0xF4	; 244
     294:	e1 d2       	rcall	.+1474   	; 0x858 <dxl_hal_rx>
     296:	90 91 73 0b 	lds	r25, 0x0B73	; 0x800b73 <gbRxGetLength>
     29a:	98 0f       	add	r25, r24
     29c:	90 93 73 0b 	sts	0x0B73, r25	; 0x800b73 <gbRxGetLength>
     2a0:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <gbRxPacketLength>
     2a4:	98 17       	cp	r25, r24
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <dxl_rx_packet+0x13c>
     2a8:	80 91 2f 0b 	lds	r24, 0x0B2F	; 0x800b2f <gbStatusPacket+0x3>
     2ac:	a8 2f       	mov	r26, r24
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <dxl_rx_packet+0x154>
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <dxl_rx_packet+0x186>
     2c4:	e4 5d       	subi	r30, 0xD4	; 212
     2c6:	f4 4f       	sbci	r31, 0xF4	; 244
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	98 0f       	add	r25, r24
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	e2 2f       	mov	r30, r18
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ae 17       	cp	r26, r30
     2d4:	bf 07       	cpc	r27, r31
     2d6:	b4 f7       	brge	.-20     	; 0x2c4 <dxl_rx_packet+0x14a>
     2d8:	a4 5d       	subi	r26, 0xD4	; 212
     2da:	b4 4f       	sbci	r27, 0xF4	; 244
     2dc:	90 95       	com	r25
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	8c 91       	ld	r24, X
     2e2:	89 17       	cp	r24, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <dxl_rx_packet+0x172>
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <dxl_rx_packet+0x176>
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2f4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2f8:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <giBusUsing+0x1>
     2fc:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <giBusUsing>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <dxl_tx_packet>:
     30a:	1f 93       	push	r17
     30c:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     310:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	09 f4       	brne	.+2      	; 0x31a <dxl_tx_packet+0x10>
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <dxl_tx_packet+0xca>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 75 0b 	sts	0x0B75, r25	; 0x800b75 <giBusUsing+0x1>
     322:	80 93 74 0b 	sts	0x0B74, r24	; 0x800b74 <giBusUsing>
     326:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <__data_end+0x3>
     32a:	89 39       	cpi	r24, 0x99	; 153
     32c:	40 f4       	brcc	.+16     	; 0x33e <dxl_tx_packet+0x34>
     32e:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <__data_end+0x4>
     332:	89 2f       	mov	r24, r25
     334:	81 50       	subi	r24, 0x01	; 1
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	28 f0       	brcs	.+10     	; 0x344 <dxl_tx_packet+0x3a>
     33a:	93 38       	cpi	r25, 0x83	; 131
     33c:	19 f0       	breq	.+6      	; 0x344 <dxl_tx_packet+0x3a>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <dxl_tx_packet+0x98>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__data_end>
     34a:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <__data_end+0x1>
     34e:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <__data_end+0x3>
     352:	a8 2f       	mov	r26, r24
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <dxl_tx_packet+0x5c>
     35c:	e4 57       	subi	r30, 0x74	; 116
     35e:	f5 4f       	sbci	r31, 0xF5	; 245
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	98 0f       	add	r25, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	e2 2f       	mov	r30, r18
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ae 17       	cp	r26, r30
     36c:	bf 07       	cpc	r27, r31
     36e:	b4 f7       	brge	.-20     	; 0x35c <dxl_tx_packet+0x52>
     370:	a4 57       	subi	r26, 0x74	; 116
     372:	b5 4f       	sbci	r27, 0xF5	; 245
     374:	90 95       	com	r25
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	9c 93       	st	X, r25
     37a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     37e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     382:	06 97       	sbiw	r24, 0x06	; 6
     384:	02 97       	sbiw	r24, 0x02	; 2
     386:	08 f4       	brcc	.+2      	; 0x38a <dxl_tx_packet+0x80>
     388:	38 d1       	rcall	.+624    	; 0x5fa <dxl_hal_clear>
     38a:	10 91 8f 0a 	lds	r17, 0x0A8F	; 0x800a8f <__data_end+0x3>
     38e:	1c 5f       	subi	r17, 0xFC	; 252
     390:	8c e8       	ldi	r24, 0x8C	; 140
     392:	9a e0       	ldi	r25, 0x0A	; 10
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	35 d1       	rcall	.+618    	; 0x604 <dxl_hal_tx>
     39a:	18 17       	cp	r17, r24
     39c:	59 f0       	breq	.+22     	; 0x3b4 <dxl_tx_packet+0xaa>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     3a6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     3aa:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <giBusUsing+0x1>
     3ae:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <giBusUsing>
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <dxl_tx_packet+0xca>
     3b4:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <__data_end+0x4>
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	29 f4       	brne	.+10     	; 0x3c6 <dxl_tx_packet+0xbc>
     3bc:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <__data_end+0x6>
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 96       	adiw	r24, 0x06	; 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dxl_tx_packet+0xc0>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	40 d1       	rcall	.+640    	; 0x64c <dxl_hal_set_timeout>
     3cc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
     3d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <dxl_txrx_packet>:
     3d8:	98 df       	rcall	.-208    	; 0x30a <dxl_tx_packet>
     3da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3de:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3e2:	89 2b       	or	r24, r25
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <dxl_txrx_packet+0x1c>
     3e6:	c9 de       	rcall	.-622    	; 0x17a <dxl_rx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3ec:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3f0:	05 97       	sbiw	r24, 0x05	; 5
     3f2:	c9 f3       	breq	.-14     	; 0x3e6 <dxl_txrx_packet+0xe>
     3f4:	08 95       	ret

000003f6 <dxl_write_word>:
     3f6:	28 2f       	mov	r18, r24
     3f8:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     3fc:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     404:	20 93 8e 0a 	sts	0x0A8E, r18	; 0x800a8e <__data_end+0x2>
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     40e:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <__data_end+0x5>
     412:	ca 01       	movw	r24, r20
     414:	40 93 92 0a 	sts	0x0A92, r20	; 0x800a92 <__data_end+0x6>
     418:	80 70       	andi	r24, 0x00	; 0
     41a:	90 93 93 0a 	sts	0x0A93, r25	; 0x800a93 <__data_end+0x7>
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     424:	d9 cf       	rjmp	.-78     	; 0x3d8 <dxl_txrx_packet>
     426:	08 95       	ret
     428:	ff cf       	rjmp	.-2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>

0000042a <dxl_read_word>:
     42a:	28 2f       	mov	r18, r24
     42c:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     430:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     434:	89 2b       	or	r24, r25
     436:	b1 f4       	brne	.+44     	; 0x464 <dxl_read_word+0x3a>
     438:	20 93 8e 0a 	sts	0x0A8E, r18	; 0x800a8e <__data_end+0x2>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     442:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <__data_end+0x5>
     446:	80 93 92 0a 	sts	0x0A92, r24	; 0x800a92 <__data_end+0x6>
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     450:	c3 df       	rcall	.-122    	; 0x3d8 <dxl_txrx_packet>
     452:	30 91 32 0b 	lds	r19, 0x0B32	; 0x800b32 <gbStatusPacket+0x6>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	80 91 31 0b 	lds	r24, 0x0B31	; 0x800b31 <gbStatusPacket+0x5>
     45c:	28 0f       	add	r18, r24
     45e:	31 1d       	adc	r19, r1
     460:	c9 01       	movw	r24, r18
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_read_word+0x3a>

00000466 <dxl_write_byte>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     46c:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     470:	89 2b       	or	r24, r25
     472:	71 f4       	brne	.+28     	; 0x490 <dxl_write_byte+0x2a>
     474:	20 93 8e 0a 	sts	0x0A8E, r18	; 0x800a8e <__data_end+0x2>
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     47e:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <__data_end+0x5>
     482:	40 93 92 0a 	sts	0x0A92, r20	; 0x800a92 <__data_end+0x6>
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     48c:	a5 cf       	rjmp	.-182    	; 0x3d8 <dxl_txrx_packet>
     48e:	08 95       	ret
     490:	ff cf       	rjmp	.-2      	; 0x490 <dxl_write_byte+0x2a>

00000492 <dxl_read_byte>:
     492:	28 2f       	mov	r18, r24
     494:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     498:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     49c:	89 2b       	or	r24, r25
     49e:	91 f4       	brne	.+36     	; 0x4c4 <dxl_read_byte+0x32>
     4a0:	20 93 8e 0a 	sts	0x0A8E, r18	; 0x800a8e <__data_end+0x2>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     4aa:	60 93 91 0a 	sts	0x0A91, r22	; 0x800a91 <__data_end+0x5>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 92 0a 	sts	0x0A92, r24	; 0x800a92 <__data_end+0x6>
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     4ba:	8e df       	rcall	.-228    	; 0x3d8 <dxl_txrx_packet>
     4bc:	80 91 31 0b 	lds	r24, 0x0B31	; 0x800b31 <gbStatusPacket+0x5>
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <dxl_read_byte+0x32>

000004c6 <dxl_ping>:
     4c6:	28 2f       	mov	r18, r24
     4c8:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <giBusUsing>
     4cc:	90 91 75 0b 	lds	r25, 0x0B75	; 0x800b75 <giBusUsing+0x1>
     4d0:	89 2b       	or	r24, r25
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <dxl_ping+0x22>
     4d4:	20 93 8e 0a 	sts	0x0A8E, r18	; 0x800a8e <__data_end+0x2>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <__data_end+0x4>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <__data_end+0x3>
     4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <dxl_txrx_packet>
     4e6:	08 95       	ret
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <dxl_ping+0x22>

000004ea <dxl_terminate>:
     4ea:	86 c0       	rjmp	.+268    	; 0x5f8 <dxl_hal_close>
     4ec:	08 95       	ret

000004ee <dxl_initialize>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	8c 01       	movw	r16, r24
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	74 e2       	ldi	r23, 0x24	; 36
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	99 e4       	ldi	r25, 0x49	; 73
     510:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     514:	ab 01       	movw	r20, r22
     516:	bc 01       	movw	r22, r24
     518:	c8 01       	movw	r24, r16
     51a:	15 d0       	rcall	.+42     	; 0x546 <dxl_hal_open>
     51c:	89 2b       	or	r24, r25
     51e:	19 f4       	brne	.+6      	; 0x526 <dxl_initialize+0x38>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	0c c0       	rjmp	.+24     	; 0x53e <dxl_initialize+0x50>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     52e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     532:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <giBusUsing+0x1>
     536:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <giBusUsing>
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	c9 01       	movw	r24, r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <dxl_hal_open>:
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	7a 01       	movw	r14, r20
     550:	8b 01       	movw	r16, r22
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	99 e4       	ldi	r25, 0x49	; 73
     56c:	a8 01       	movw	r20, r16
     56e:	97 01       	movw	r18, r14
     570:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     574:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     580:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 e7       	ldi	r24, 0x74	; 116
     58a:	99 e4       	ldi	r25, 0x49	; 73
     58c:	a8 01       	movw	r20, r16
     58e:	97 01       	movw	r18, r14
     590:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e4       	ldi	r20, 0x40	; 64
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 3c 12 	call	0x2478	; 0x2478 <__mulsf3>
     5a0:	60 93 2a 0e 	sts	0x0E2A, r22	; 0x800e2a <gfByteTransTime_us>
     5a4:	70 93 2b 0e 	sts	0x0E2B, r23	; 0x800e2b <gfByteTransTime_us+0x1>
     5a8:	80 93 2c 0e 	sts	0x0E2C, r24	; 0x800e2c <gfByteTransTime_us+0x2>
     5ac:	90 93 2d 0e 	sts	0x0E2D, r25	; 0x800e2d <gfByteTransTime_us+0x3>
     5b0:	20 91 2a 0e 	lds	r18, 0x0E2A	; 0x800e2a <gfByteTransTime_us>
     5b4:	30 91 2b 0e 	lds	r19, 0x0E2B	; 0x800e2b <gfByteTransTime_us+0x1>
     5b8:	40 91 2c 0e 	lds	r20, 0x0E2C	; 0x800e2c <gfByteTransTime_us+0x2>
     5bc:	50 91 2d 0e 	lds	r21, 0x0E2D	; 0x800e2d <gfByteTransTime_us+0x3>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8a e7       	ldi	r24, 0x7A	; 122
     5c6:	93 e4       	ldi	r25, 0x43	; 67
     5c8:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     5cc:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
     5d0:	70 93 29 0e 	sts	0x0E29, r23	; 0x800e29 <gwReturnDelayCountNum+0x1>
     5d4:	60 93 28 0e 	sts	0x0E28, r22	; 0x800e28 <gwReturnDelayCountNum>
     5d8:	72 98       	cbi	0x0e, 2	; 14
     5da:	73 9a       	sbi	0x0e, 3	; 14
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     5e2:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <gbDxlBufferHead>
     5e6:	10 92 77 0c 	sts	0x0C77, r1	; 0x800c77 <gbDxlBufferTail>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <dxl_hal_close>:
     5f8:	08 95       	ret

000005fa <dxl_hal_clear>:
     5fa:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     5fe:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <gbDxlBufferHead>
     602:	08 95       	ret

00000604 <dxl_hal_tx>:
     604:	ac 01       	movw	r20, r24
     606:	f8 94       	cli
     608:	73 98       	cbi	0x0e, 3	; 14
     60a:	72 9a       	sbi	0x0e, 2	; 14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 c0       	rjmp	.+34     	; 0x634 <dxl_hal_tx+0x30>
     612:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <dxl_hal_tx+0xe>
     61a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     624:	fa 01       	movw	r30, r20
     626:	e2 0f       	add	r30, r18
     628:	f3 1f       	adc	r31, r19
     62a:	80 81       	ld	r24, Z
     62c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	64 f3       	brlt	.-40     	; 0x612 <dxl_hal_tx+0xe>
     63a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     63e:	86 ff       	sbrs	r24, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <dxl_hal_tx+0x36>
     642:	72 98       	cbi	0x0e, 2	; 14
     644:	73 9a       	sbi	0x0e, 3	; 14
     646:	78 94       	sei
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <dxl_hal_set_timeout>:
     64c:	10 92 31 0e 	sts	0x0E31, r1	; 0x800e31 <gwCountNum+0x1>
     650:	10 92 30 0e 	sts	0x0E30, r1	; 0x800e30 <gwCountNum>
     654:	20 91 28 0e 	lds	r18, 0x0E28	; 0x800e28 <gwReturnDelayCountNum>
     658:	30 91 29 0e 	lds	r19, 0x0E29	; 0x800e29 <gwReturnDelayCountNum+0x1>
     65c:	26 5f       	subi	r18, 0xF6	; 246
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
     664:	30 93 2f 0e 	sts	0x0E2F, r19	; 0x800e2f <gwTimeoutCountNum+0x1>
     668:	20 93 2e 0e 	sts	0x0E2E, r18	; 0x800e2e <gwTimeoutCountNum>
     66c:	08 95       	ret

0000066e <dxl_hal_timeout>:
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	80 91 30 0e 	lds	r24, 0x0E30	; 0x800e30 <gwCountNum>
     682:	90 91 31 0e 	lds	r25, 0x0E31	; 0x800e31 <gwCountNum+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 31 0e 	sts	0x0E31, r25	; 0x800e31 <gwCountNum+0x1>
     68c:	80 93 30 0e 	sts	0x0E30, r24	; 0x800e30 <gwCountNum>
     690:	20 91 30 0e 	lds	r18, 0x0E30	; 0x800e30 <gwCountNum>
     694:	30 91 31 0e 	lds	r19, 0x0E31	; 0x800e31 <gwCountNum+0x1>
     698:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <gwTimeoutCountNum>
     69c:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <gwTimeoutCountNum+0x1>
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <dxl_hal_timeout+0x3e>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	74 c0       	rjmp	.+232    	; 0x794 <dxl_hal_timeout+0x126>
     6ac:	a0 90 2a 0e 	lds	r10, 0x0E2A	; 0x800e2a <gfByteTransTime_us>
     6b0:	b0 90 2b 0e 	lds	r11, 0x0E2B	; 0x800e2b <gfByteTransTime_us+0x1>
     6b4:	c0 90 2c 0e 	lds	r12, 0x0E2C	; 0x800e2c <gfByteTransTime_us+0x2>
     6b8:	d0 90 2d 0e 	lds	r13, 0x0E2D	; 0x800e2d <gfByteTransTime_us+0x3>
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6bc:	c6 01       	movw	r24, r12
     6be:	b5 01       	movw	r22, r10
     6c0:	2b ea       	ldi	r18, 0xAB	; 171
     6c2:	3a ea       	ldi	r19, 0xAA	; 170
     6c4:	4a ea       	ldi	r20, 0xAA	; 170
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	0e 94 3c 12 	call	0x2478	; 0x2478 <__mulsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <dxl_hal_timeout+0x76>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <dxl_hal_timeout+0x8c>
     6f8:	45 c0       	rjmp	.+138    	; 0x784 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     70a:	5b 01       	movw	r10, r22
     70c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 3c 12 	call	0x2478	; 0x2478 <__mulsf3>
     71a:	7b 01       	movw	r14, r22
     71c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	1c f4       	brge	.+6      	; 0x734 <dxl_hal_timeout+0xc6>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	24 c0       	rjmp	.+72     	; 0x77c <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	3f ef       	ldi	r19, 0xFF	; 255
     73c:	4f e7       	ldi	r20, 0x7F	; 127
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 38 12 	call	0x2470	; 0x2470 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	b4 f4       	brge	.+44     	; 0x774 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	c6 01       	movw	r24, r12
     74a:	b5 01       	movw	r22, r10
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 3c 12 	call	0x2478	; 0x2478 <__mulsf3>
     758:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <dxl_hal_timeout+0xfe>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <dxl_hal_timeout+0xf4>
     772:	0e c0       	rjmp	.+28     	; 0x790 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
     77c:	cb 01       	movw	r24, r22
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <dxl_hal_timeout+0x110>
     782:	06 c0       	rjmp	.+12     	; 0x790 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78c:	6a 95       	dec	r22
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x11e>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <dxl_hal_get_qstate>:
     7a8:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     7ac:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     7b0:	98 17       	cp	r25, r24
     7b2:	19 f4       	brne	.+6      	; 0x7ba <dxl_hal_get_qstate+0x12>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <dxl_hal_get_qstate+0x40>
     7ba:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     7be:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     7c2:	98 17       	cp	r25, r24
     7c4:	38 f4       	brcc	.+14     	; 0x7d4 <dxl_hal_get_qstate+0x2c>
     7c6:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     7ca:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <dxl_hal_get_qstate+0x3c>
     7d4:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     7d8:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 50       	subi	r18, 0x00	; 0
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	29 1b       	sub	r18, r25
     7e6:	31 09       	sbc	r19, r1
     7e8:	c9 01       	movw	r24, r18
     7ea:	08 95       	ret

000007ec <dxl_hal_put_queue>:
     7ec:	1f 93       	push	r17
     7ee:	18 2f       	mov	r17, r24
     7f0:	db df       	rcall	.-74     	; 0x7a8 <dxl_hal_get_qstate>
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	91 05       	cpc	r25, r1
     7f6:	91 f0       	breq	.+36     	; 0x81c <dxl_hal_put_queue+0x30>
     7f8:	e0 91 77 0c 	lds	r30, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ea 58       	subi	r30, 0x8A	; 138
     800:	f4 4f       	sbci	r31, 0xF4	; 244
     802:	10 83       	st	Z, r17
     804:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <dxl_hal_put_queue+0x26>
     80c:	10 92 77 0c 	sts	0x0C77, r1	; 0x800c77 <gbDxlBufferTail>
     810:	05 c0       	rjmp	.+10     	; 0x81c <dxl_hal_put_queue+0x30>
     812:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <gbDxlBufferTail>
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <dxl_hal_get_queue>:
     820:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     824:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     828:	98 17       	cp	r25, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <dxl_hal_get_queue+0x10>
     82c:	ef ef       	ldi	r30, 0xFF	; 255
     82e:	12 c0       	rjmp	.+36     	; 0x854 <dxl_hal_get_queue+0x34>
     830:	e0 91 76 0c 	lds	r30, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ea 58       	subi	r30, 0x8A	; 138
     838:	f4 4f       	sbci	r31, 0xF4	; 244
     83a:	e0 81       	ld	r30, Z
     83c:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	19 f4       	brne	.+6      	; 0x84a <dxl_hal_get_queue+0x2a>
     844:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <gbDxlBufferHead>
     848:	05 c0       	rjmp	.+10     	; 0x854 <dxl_hal_get_queue+0x34>
     84a:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <gbDxlBufferHead>
     854:	8e 2f       	mov	r24, r30
     856:	08 95       	ret

00000858 <dxl_hal_rx>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	eb 01       	movw	r28, r22
     868:	90 91 76 0c 	lds	r25, 0x0C76	; 0x800c76 <gbDxlBufferHead>
     86c:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <gbDxlBufferTail>
     870:	98 17       	cp	r25, r24
     872:	19 f4       	brne	.+6      	; 0x87a <dxl_hal_rx+0x22>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	12 c0       	rjmp	.+36     	; 0x89e <dxl_hal_rx+0x46>
     87a:	96 df       	rcall	.-212    	; 0x7a8 <dxl_hal_get_qstate>
     87c:	8c 01       	movw	r16, r24
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	0c f4       	brge	.+2      	; 0x886 <dxl_hal_rx+0x2e>
     884:	8e 01       	movw	r16, r28
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	06 c0       	rjmp	.+12     	; 0x898 <dxl_hal_rx+0x40>
     88c:	c9 df       	rcall	.-110    	; 0x820 <dxl_hal_get_queue>
     88e:	f7 01       	movw	r30, r14
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	80 83       	st	Z, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	c0 17       	cp	r28, r16
     89a:	d1 07       	cpc	r29, r17
     89c:	bc f3       	brlt	.-18     	; 0x88c <dxl_hal_rx+0x34>
     89e:	c8 01       	movw	r24, r16
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <__vector_25>:
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8d8:	89 df       	rcall	.-238    	; 0x7ec <dxl_hal_put_queue>
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <serial_write>:
     900:	ac 01       	movw	r20, r24
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0c c0       	rjmp	.+24     	; 0x920 <serial_write+0x20>
     908:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     90c:	85 ff       	sbrs	r24, 5
     90e:	fc cf       	rjmp	.-8      	; 0x908 <serial_write+0x8>
     910:	fa 01       	movw	r30, r20
     912:	e2 0f       	add	r30, r18
     914:	f3 1f       	adc	r31, r19
     916:	80 81       	ld	r24, Z
     918:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	8c f3       	brlt	.-30     	; 0x908 <serial_write+0x8>
     926:	08 95       	ret

00000928 <serial_read>:
     928:	dc 01       	movw	r26, r24
     92a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     92e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     932:	98 17       	cp	r25, r24
     934:	11 f4       	brne	.+4      	; 0x93a <serial_read+0x12>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     93e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     942:	98 17       	cp	r25, r24
     944:	19 f4       	brne	.+6      	; 0x94c <serial_read+0x24>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <serial_read+0x52>
     94c:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     950:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     954:	98 17       	cp	r25, r24
     956:	38 f4       	brcc	.+14     	; 0x966 <serial_read+0x3e>
     958:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     95c:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <serial_read+0x4e>
     966:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     96a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	20 58       	subi	r18, 0x80	; 128
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	29 1b       	sub	r18, r25
     978:	31 09       	sbc	r19, r1
     97a:	a9 01       	movw	r20, r18
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	0c f4       	brge	.+2      	; 0x984 <serial_read+0x5c>
     982:	ab 01       	movw	r20, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	20 c0       	rjmp	.+64     	; 0x9ca <serial_read+0xa2>
     98a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     98e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     992:	98 17       	cp	r25, r24
     994:	11 f4       	brne	.+4      	; 0x99a <serial_read+0x72>
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	12 c0       	rjmp	.+36     	; 0x9be <serial_read+0x96>
     99a:	e0 91 f8 0c 	lds	r30, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e8 58       	subi	r30, 0x88	; 136
     9a2:	f3 4f       	sbci	r31, 0xF3	; 243
     9a4:	90 81       	ld	r25, Z
     9a6:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     9aa:	8f 37       	cpi	r24, 0x7F	; 127
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <serial_read+0x8c>
     9ae:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <gbSerialBufferHead>
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <serial_read+0x96>
     9b4:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <gbSerialBufferHead>
     9be:	fd 01       	movw	r30, r26
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	90 83       	st	Z, r25
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	24 17       	cp	r18, r20
     9cc:	35 07       	cpc	r19, r21
     9ce:	ec f2       	brlt	.-70     	; 0x98a <serial_read+0x62>
     9d0:	84 2f       	mov	r24, r20
     9d2:	08 95       	ret

000009d4 <serial_get_qstate>:
     9d4:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     9d8:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     9dc:	98 17       	cp	r25, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <serial_get_qstate+0x12>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <serial_get_qstate+0x40>
     9e6:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     9ea:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     9ee:	98 17       	cp	r25, r24
     9f0:	38 f4       	brcc	.+14     	; 0xa00 <serial_get_qstate+0x2c>
     9f2:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     9f6:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <serial_get_qstate+0x3c>
     a00:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a04:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	20 58       	subi	r18, 0x80	; 128
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	29 1b       	sub	r18, r25
     a12:	31 09       	sbc	r19, r1
     a14:	c9 01       	movw	r24, r18
     a16:	08 95       	ret

00000a18 <serial_put_queue>:
     a18:	48 2f       	mov	r20, r24
     a1a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a1e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a22:	98 17       	cp	r25, r24
     a24:	d1 f0       	breq	.+52     	; 0xa5a <serial_put_queue+0x42>
     a26:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a2a:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a2e:	98 17       	cp	r25, r24
     a30:	38 f4       	brcc	.+14     	; 0xa40 <serial_put_queue+0x28>
     a32:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a36:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <serial_put_queue+0x38>
     a40:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a44:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 58       	subi	r18, 0x80	; 128
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	29 1b       	sub	r18, r25
     a52:	31 09       	sbc	r19, r1
     a54:	2f 37       	cpi	r18, 0x7F	; 127
     a56:	31 05       	cpc	r19, r1
     a58:	91 f0       	breq	.+36     	; 0xa7e <serial_put_queue+0x66>
     a5a:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e8 58       	subi	r30, 0x88	; 136
     a62:	f3 4f       	sbci	r31, 0xF3	; 243
     a64:	40 83       	st	Z, r20
     a66:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a6a:	8f 37       	cpi	r24, 0x7F	; 127
     a6c:	19 f4       	brne	.+6      	; 0xa74 <serial_put_queue+0x5c>
     a6e:	10 92 f9 0c 	sts	0x0CF9, r1	; 0x800cf9 <gbSerialBufferTail>
     a72:	08 95       	ret
     a74:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <gbSerialBufferTail>
     a7e:	08 95       	ret

00000a80 <serial_get_queue>:
     a80:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a84:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     a88:	98 17       	cp	r25, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <serial_get_queue+0x10>
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <serial_get_queue+0x34>
     a90:	e0 91 f8 0c 	lds	r30, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e8 58       	subi	r30, 0x88	; 136
     a98:	f3 4f       	sbci	r31, 0xF3	; 243
     a9a:	e0 81       	ld	r30, Z
     a9c:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     aa0:	8f 37       	cpi	r24, 0x7F	; 127
     aa2:	19 f4       	brne	.+6      	; 0xaaa <serial_get_queue+0x2a>
     aa4:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <gbSerialBufferHead>
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <serial_get_queue+0x34>
     aaa:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <gbSerialBufferHead>
     ab4:	8e 2f       	mov	r24, r30
     ab6:	08 95       	ret

00000ab8 <__vector_36>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     ae2:	9a df       	rcall	.-204    	; 0xa18 <serial_put_queue>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <std_putchar>:
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	98 2f       	mov	r25, r24
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	99 f4       	brne	.+38     	; 0xb42 <std_putchar+0x38>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	fe 01       	movw	r30, r28
     b24:	31 96       	adiw	r30, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	2d 5f       	subi	r18, 0xFD	; 253
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b30:	85 ff       	sbrs	r24, 5
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <std_putchar+0x22>
     b34:	81 91       	ld	r24, Z+
     b36:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	b1 f7       	brne	.-20     	; 0xb2c <std_putchar+0x22>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <std_putchar+0x44>
     b42:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <std_putchar+0x38>
     b4a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <std_getchar>:
     b5c:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     b60:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     b64:	98 17       	cp	r25, r24
     b66:	d1 f3       	breq	.-12     	; 0xb5c <std_getchar>
     b68:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     b6c:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     b70:	98 17       	cp	r25, r24
     b72:	38 f4       	brcc	.+14     	; 0xb82 <std_getchar+0x26>
     b74:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     b78:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <std_getchar+0x36>
     b82:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     b86:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 58       	subi	r18, 0x80	; 128
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	29 1b       	sub	r18, r25
     b94:	31 09       	sbc	r19, r1
     b96:	23 2b       	or	r18, r19
     b98:	09 f3       	breq	.-62     	; 0xb5c <std_getchar>
     b9a:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     b9e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <gbSerialBufferTail>
     ba2:	98 17       	cp	r25, r24
     ba4:	11 f4       	brne	.+4      	; 0xbaa <std_getchar+0x4e>
     ba6:	ef ef       	ldi	r30, 0xFF	; 255
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <std_getchar+0x78>
     baa:	e0 91 f8 0c 	lds	r30, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e8 58       	subi	r30, 0x88	; 136
     bb2:	f3 4f       	sbci	r31, 0xF3	; 243
     bb4:	e0 81       	ld	r30, Z
     bb6:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     bba:	8f 37       	cpi	r24, 0x7F	; 127
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <std_getchar+0x68>
     bbe:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <gbSerialBufferHead>
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <std_getchar+0x72>
     bc4:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <gbSerialBufferHead>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <gbSerialBufferHead>
     bce:	ed 30       	cpi	r30, 0x0D	; 13
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <std_getchar+0x78>
     bd2:	ea e0       	ldi	r30, 0x0A	; 10
     bd4:	8e 2f       	mov	r24, r30
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <serial_initialize>:
     bda:	0e 94 88 11 	call	0x2310	; 0x2310 <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	74 e2       	ldi	r23, 0x24	; 36
     be6:	84 ef       	ldi	r24, 0xF4	; 244
     be8:	99 e4       	ldi	r25, 0x49	; 73
     bea:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
     bee:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
     bf2:	61 50       	subi	r22, 0x01	; 1
     bf4:	70 40       	sbci	r23, 0x00	; 0
     bf6:	22 e4       	ldi	r18, 0x42	; 66
     bf8:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     bfc:	28 e9       	ldi	r18, 0x98	; 152
     bfe:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c02:	26 e0       	ldi	r18, 0x06	; 6
     c04:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     c0e:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <gbSerialBufferHead>
     c12:	10 92 f9 0c 	sts	0x0CF9, r1	; 0x800cf9 <gbSerialBufferTail>
     c16:	27 2f       	mov	r18, r23
     c18:	33 27       	eor	r19, r19
     c1a:	27 fd       	sbrc	r18, 7
     c1c:	3a 95       	dec	r19
     c1e:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c22:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c26:	72 98       	cbi	0x0e, 2	; 14
     c28:	73 9a       	sbi	0x0e, 3	; 14
     c2a:	85 e8       	ldi	r24, 0x85	; 133
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	6e ea       	ldi	r22, 0xAE	; 174
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	0e 94 ee 12 	call	0x25dc	; 0x25dc <fdevopen>
     c36:	90 93 fb 0c 	sts	0x0CFB, r25	; 0x800cfb <device+0x1>
     c3a:	80 93 fa 0c 	sts	0x0CFA, r24	; 0x800cfa <device>
     c3e:	08 95       	ret

00000c40 <setDefaultTest>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <wait>
     c5c:	90 91 ff 0c 	lds	r25, 0x0CFF	; 0x800cff <wait+0x1>
     c60:	80 3d       	cpi	r24, 0xD0	; 208
     c62:	27 e0       	ldi	r18, 0x07	; 7
     c64:	92 07       	cpc	r25, r18
     c66:	34 f4       	brge	.+12     	; 0xc74 <setDefaultTest+0x34>
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	90 93 ff 0c 	sts	0x0CFF, r25	; 0x800cff <wait+0x1>
     c6e:	80 93 fe 0c 	sts	0x0CFE, r24	; 0x800cfe <wait>
     c72:	29 c1       	rjmp	.+594    	; 0xec6 <setDefaultTest+0x286>
     c74:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <getGX>
     c78:	8f 31       	cpi	r24, 0x1F	; 31
     c7a:	91 05       	cpc	r25, r1
     c7c:	0c f4       	brge	.+2      	; 0xc80 <setDefaultTest+0x40>
     c7e:	7e c0       	rjmp	.+252    	; 0xd7c <setDefaultTest+0x13c>
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	97 e0       	ldi	r25, 0x07	; 7
     c84:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>
     c88:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <wait+0x1>
     c8c:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <wait>
     c90:	00 e2       	ldi	r16, 0x20	; 32
     c92:	17 e0       	ldi	r17, 0x07	; 7
     c94:	0f 2e       	mov	r0, r31
     c96:	fc e0       	ldi	r31, 0x0C	; 12
     c98:	ef 2e       	mov	r14, r31
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
     ca0:	88 24       	eor	r8, r8
     ca2:	83 94       	inc	r8
     ca4:	91 2c       	mov	r9, r1
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	68 01       	movw	r12, r16
     cac:	57 01       	movw	r10, r14
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <setDefaultTest+0x82>
     cb0:	21 96       	adiw	r28, 0x01	; 1
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	88 1a       	sub	r8, r24
     cb6:	98 0a       	sbc	r9, r24
     cb8:	0e 5f       	subi	r16, 0xFE	; 254
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	e2 e0       	ldi	r30, 0x02	; 2
     cbe:	ee 0e       	add	r14, r30
     cc0:	f1 1c       	adc	r15, r1
     cc2:	c2 30       	cpi	r28, 0x02	; 2
     cc4:	d1 05       	cpc	r29, r1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <setDefaultTest+0xb0>
     cc8:	48 ec       	ldi	r20, 0xC8	; 200
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	60 e2       	ldi	r22, 0x20	; 32
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	f6 01       	movw	r30, r12
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	8f db       	rcall	.-2274   	; 0x3f6 <dxl_write_word>
     cd8:	f5 01       	movw	r30, r10
     cda:	44 81       	ldd	r20, Z+4	; 0x04
     cdc:	55 81       	ldd	r21, Z+5	; 0x05
     cde:	44 56       	subi	r20, 0x64	; 100
     ce0:	51 09       	sbc	r21, r1
     ce2:	6e e1       	ldi	r22, 0x1E	; 30
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	f6 01       	movw	r30, r12
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	95 81       	ldd	r25, Z+5	; 0x05
     cec:	84 db       	rcall	.-2296   	; 0x3f6 <dxl_write_word>
     cee:	e0 cf       	rjmp	.-64     	; 0xcb0 <setDefaultTest+0x70>
     cf0:	c8 30       	cpi	r28, 0x08	; 8
     cf2:	d1 05       	cpc	r29, r1
     cf4:	91 f4       	brne	.+36     	; 0xd1a <setDefaultTest+0xda>
     cf6:	48 ec       	ldi	r20, 0xC8	; 200
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 e2       	ldi	r22, 0x20	; 32
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	f6 01       	movw	r30, r12
     d00:	80 89       	ldd	r24, Z+16	; 0x10
     d02:	91 89       	ldd	r25, Z+17	; 0x11
     d04:	78 db       	rcall	.-2320   	; 0x3f6 <dxl_write_word>
     d06:	f5 01       	movw	r30, r10
     d08:	40 89       	ldd	r20, Z+16	; 0x10
     d0a:	51 89       	ldd	r21, Z+17	; 0x11
     d0c:	6e e1       	ldi	r22, 0x1E	; 30
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	f6 01       	movw	r30, r12
     d12:	80 89       	ldd	r24, Z+16	; 0x10
     d14:	91 89       	ldd	r25, Z+17	; 0x11
     d16:	6f db       	rcall	.-2338   	; 0x3f6 <dxl_write_word>
     d18:	cb cf       	rjmp	.-106    	; 0xcb0 <setDefaultTest+0x70>
     d1a:	c5 30       	cpi	r28, 0x05	; 5
     d1c:	d1 05       	cpc	r29, r1
     d1e:	19 f0       	breq	.+6      	; 0xd26 <setDefaultTest+0xe6>
     d20:	cb 30       	cpi	r28, 0x0B	; 11
     d22:	d1 05       	cpc	r29, r1
     d24:	a1 f4       	brne	.+40     	; 0xd4e <setDefaultTest+0x10e>
     d26:	48 ec       	ldi	r20, 0xC8	; 200
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e2       	ldi	r22, 0x20	; 32
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	f8 01       	movw	r30, r16
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	60 db       	rcall	.-2368   	; 0x3f6 <dxl_write_word>
     d36:	f7 01       	movw	r30, r14
     d38:	40 81       	ld	r20, Z
     d3a:	51 81       	ldd	r21, Z+1	; 0x01
     d3c:	44 51       	subi	r20, 0x14	; 20
     d3e:	51 09       	sbc	r21, r1
     d40:	6e e1       	ldi	r22, 0x1E	; 30
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	f8 01       	movw	r30, r16
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	55 db       	rcall	.-2390   	; 0x3f6 <dxl_write_word>
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <setDefaultTest+0x130>
     d4e:	48 ec       	ldi	r20, 0xC8	; 200
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	60 e2       	ldi	r22, 0x20	; 32
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	f8 01       	movw	r30, r16
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	4c db       	rcall	.-2408   	; 0x3f6 <dxl_write_word>
     d5e:	f7 01       	movw	r30, r14
     d60:	40 81       	ld	r20, Z
     d62:	51 81       	ldd	r21, Z+1	; 0x01
     d64:	6e e1       	ldi	r22, 0x1E	; 30
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	43 db       	rcall	.-2426   	; 0x3f6 <dxl_write_word>
     d70:	fc e0       	ldi	r31, 0x0C	; 12
     d72:	8f 16       	cp	r8, r31
     d74:	91 04       	cpc	r9, r1
     d76:	0c f4       	brge	.+2      	; 0xd7a <setDefaultTest+0x13a>
     d78:	9b cf       	rjmp	.-202    	; 0xcb0 <setDefaultTest+0x70>
     d7a:	a5 c0       	rjmp	.+330    	; 0xec6 <setDefaultTest+0x286>
     d7c:	82 3e       	cpi	r24, 0xE2	; 226
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	0c f0       	brlt	.+2      	; 0xd84 <setDefaultTest+0x144>
     d82:	7e c0       	rjmp	.+252    	; 0xe80 <setDefaultTest+0x240>
     d84:	8f e4       	ldi	r24, 0x4F	; 79
     d86:	97 e0       	ldi	r25, 0x07	; 7
     d88:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>
     d8c:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <wait+0x1>
     d90:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <wait>
     d94:	00 e2       	ldi	r16, 0x20	; 32
     d96:	17 e0       	ldi	r17, 0x07	; 7
     d98:	0f 2e       	mov	r0, r31
     d9a:	fc e0       	ldi	r31, 0x0C	; 12
     d9c:	ef 2e       	mov	r14, r31
     d9e:	f2 e0       	ldi	r31, 0x02	; 2
     da0:	ff 2e       	mov	r15, r31
     da2:	f0 2d       	mov	r31, r0
     da4:	88 24       	eor	r8, r8
     da6:	83 94       	inc	r8
     da8:	91 2c       	mov	r9, r1
     daa:	c0 e0       	ldi	r28, 0x00	; 0
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	68 01       	movw	r12, r16
     db0:	57 01       	movw	r10, r14
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <setDefaultTest+0x186>
     db4:	21 96       	adiw	r28, 0x01	; 1
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	88 1a       	sub	r8, r24
     dba:	98 0a       	sbc	r9, r24
     dbc:	0e 5f       	subi	r16, 0xFE	; 254
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	e2 e0       	ldi	r30, 0x02	; 2
     dc2:	ee 0e       	add	r14, r30
     dc4:	f1 1c       	adc	r15, r1
     dc6:	c2 30       	cpi	r28, 0x02	; 2
     dc8:	d1 05       	cpc	r29, r1
     dca:	91 f4       	brne	.+36     	; 0xdf0 <setDefaultTest+0x1b0>
     dcc:	48 ec       	ldi	r20, 0xC8	; 200
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	60 e2       	ldi	r22, 0x20	; 32
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	f6 01       	movw	r30, r12
     dd6:	84 81       	ldd	r24, Z+4	; 0x04
     dd8:	95 81       	ldd	r25, Z+5	; 0x05
     dda:	0d db       	rcall	.-2534   	; 0x3f6 <dxl_write_word>
     ddc:	f5 01       	movw	r30, r10
     dde:	44 81       	ldd	r20, Z+4	; 0x04
     de0:	55 81       	ldd	r21, Z+5	; 0x05
     de2:	6e e1       	ldi	r22, 0x1E	; 30
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	f6 01       	movw	r30, r12
     de8:	84 81       	ldd	r24, Z+4	; 0x04
     dea:	95 81       	ldd	r25, Z+5	; 0x05
     dec:	04 db       	rcall	.-2552   	; 0x3f6 <dxl_write_word>
     dee:	e2 cf       	rjmp	.-60     	; 0xdb4 <setDefaultTest+0x174>
     df0:	c8 30       	cpi	r28, 0x08	; 8
     df2:	d1 05       	cpc	r29, r1
     df4:	a1 f4       	brne	.+40     	; 0xe1e <setDefaultTest+0x1de>
     df6:	48 ec       	ldi	r20, 0xC8	; 200
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	60 e2       	ldi	r22, 0x20	; 32
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	f6 01       	movw	r30, r12
     e00:	80 89       	ldd	r24, Z+16	; 0x10
     e02:	91 89       	ldd	r25, Z+17	; 0x11
     e04:	f8 da       	rcall	.-2576   	; 0x3f6 <dxl_write_word>
     e06:	f5 01       	movw	r30, r10
     e08:	40 89       	ldd	r20, Z+16	; 0x10
     e0a:	51 89       	ldd	r21, Z+17	; 0x11
     e0c:	4c 59       	subi	r20, 0x9C	; 156
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	6e e1       	ldi	r22, 0x1E	; 30
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	f6 01       	movw	r30, r12
     e16:	80 89       	ldd	r24, Z+16	; 0x10
     e18:	91 89       	ldd	r25, Z+17	; 0x11
     e1a:	ed da       	rcall	.-2598   	; 0x3f6 <dxl_write_word>
     e1c:	cb cf       	rjmp	.-106    	; 0xdb4 <setDefaultTest+0x174>
     e1e:	c5 30       	cpi	r28, 0x05	; 5
     e20:	d1 05       	cpc	r29, r1
     e22:	19 f0       	breq	.+6      	; 0xe2a <setDefaultTest+0x1ea>
     e24:	cb 30       	cpi	r28, 0x0B	; 11
     e26:	d1 05       	cpc	r29, r1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <setDefaultTest+0x212>
     e2a:	48 ec       	ldi	r20, 0xC8	; 200
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e2       	ldi	r22, 0x20	; 32
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	f8 01       	movw	r30, r16
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	de da       	rcall	.-2628   	; 0x3f6 <dxl_write_word>
     e3a:	f7 01       	movw	r30, r14
     e3c:	40 81       	ld	r20, Z
     e3e:	51 81       	ldd	r21, Z+1	; 0x01
     e40:	4c 5e       	subi	r20, 0xEC	; 236
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	6e e1       	ldi	r22, 0x1E	; 30
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	f8 01       	movw	r30, r16
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	d3 da       	rcall	.-2650   	; 0x3f6 <dxl_write_word>
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <setDefaultTest+0x234>
     e52:	48 ec       	ldi	r20, 0xC8	; 200
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e2       	ldi	r22, 0x20	; 32
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	f8 01       	movw	r30, r16
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	ca da       	rcall	.-2668   	; 0x3f6 <dxl_write_word>
     e62:	f7 01       	movw	r30, r14
     e64:	40 81       	ld	r20, Z
     e66:	51 81       	ldd	r21, Z+1	; 0x01
     e68:	6e e1       	ldi	r22, 0x1E	; 30
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	c1 da       	rcall	.-2686   	; 0x3f6 <dxl_write_word>
     e74:	fc e0       	ldi	r31, 0x0C	; 12
     e76:	8f 16       	cp	r8, r31
     e78:	91 04       	cpc	r9, r1
     e7a:	0c f4       	brge	.+2      	; 0xe7e <setDefaultTest+0x23e>
     e7c:	9b cf       	rjmp	.-202    	; 0xdb4 <setDefaultTest+0x174>
     e7e:	23 c0       	rjmp	.+70     	; 0xec6 <setDefaultTest+0x286>
     e80:	8f e5       	ldi	r24, 0x5F	; 95
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>
     e88:	0c e0       	ldi	r16, 0x0C	; 12
     e8a:	12 e0       	ldi	r17, 0x02	; 2
     e8c:	c0 e2       	ldi	r28, 0x20	; 32
     e8e:	d7 e0       	ldi	r29, 0x07	; 7
     e90:	0f 2e       	mov	r0, r31
     e92:	f8 e3       	ldi	r31, 0x38	; 56
     e94:	cf 2e       	mov	r12, r31
     e96:	f7 e0       	ldi	r31, 0x07	; 7
     e98:	df 2e       	mov	r13, r31
     e9a:	f0 2d       	mov	r31, r0
     e9c:	7e 01       	movw	r14, r28
     e9e:	44 e6       	ldi	r20, 0x64	; 100
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	60 e2       	ldi	r22, 0x20	; 32
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	89 91       	ld	r24, Y+
     ea8:	99 91       	ld	r25, Y+
     eaa:	a5 da       	rcall	.-2742   	; 0x3f6 <dxl_write_word>
     eac:	f8 01       	movw	r30, r16
     eae:	41 91       	ld	r20, Z+
     eb0:	51 91       	ld	r21, Z+
     eb2:	8f 01       	movw	r16, r30
     eb4:	6e e1       	ldi	r22, 0x1E	; 30
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	f7 01       	movw	r30, r14
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	9b da       	rcall	.-2762   	; 0x3f6 <dxl_write_word>
     ec0:	cc 15       	cp	r28, r12
     ec2:	dd 05       	cpc	r29, r13
     ec4:	59 f7       	brne	.-42     	; 0xe9c <setDefaultTest+0x25c>
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	9f 90       	pop	r9
     edc:	8f 90       	pop	r8
     ede:	08 95       	ret

00000ee0 <sensorInit>:
     ee0:	86 e8       	ldi	r24, 0x86	; 134
     ee2:	97 e0       	ldi	r25, 0x07	; 7
     ee4:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	71 ee       	ldi	r23, 0xE1	; 225
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	74 de       	rcall	.-792    	; 0xbda <serial_initialize>
     ef2:	78 94       	sei
     ef4:	86 e8       	ldi	r24, 0x86	; 134
     ef6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     f00:	08 95       	ret

00000f02 <sensorTest>:
     f02:	9c 01       	movw	r18, r24
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	51 f0       	breq	.+20     	; 0xf1e <sensorTest+0x1c>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	91 05       	cpc	r25, r1
     f0e:	61 f0       	breq	.+24     	; 0xf28 <sensorTest+0x26>
     f10:	89 2b       	or	r24, r25
     f12:	71 f4       	brne	.+28     	; 0xf30 <sensorTest+0x2e>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     f1a:	17 98       	cbi	0x02, 7	; 2
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <sensorTest+0x2e>
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     f24:	16 98       	cbi	0x02, 6	; 2
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <sensorTest+0x2e>
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     f2e:	15 98       	cbi	0x02, 5	; 2
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	8a 95       	dec	r24
     f34:	f1 f7       	brne	.-4      	; 0xf32 <sensorTest+0x30>
     f36:	ea e7       	ldi	r30, 0x7A	; 122
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 61       	ori	r24, 0x10	; 16
     f3e:	80 83       	st	Z, r24
     f40:	80 81       	ld	r24, Z
     f42:	80 64       	ori	r24, 0x40	; 64
     f44:	80 83       	st	Z, r24
     f46:	90 81       	ld	r25, Z
     f48:	94 ff       	sbrs	r25, 4
     f4a:	fd cf       	rjmp	.-6      	; 0xf46 <sensorTest+0x44>
     f4c:	8e ef       	ldi	r24, 0xFE	; 254
     f4e:	82 b9       	out	0x02, r24	; 2
     f50:	21 30       	cpi	r18, 0x01	; 1
     f52:	31 05       	cpc	r19, r1
     f54:	59 f0       	breq	.+22     	; 0xf6c <sensorTest+0x6a>
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	71 f0       	breq	.+28     	; 0xf78 <sensorTest+0x76>
     f5c:	23 2b       	or	r18, r19
     f5e:	89 f4       	brne	.+34     	; 0xf82 <sensorTest+0x80>
     f60:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f64:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     f68:	32 d6       	rcall	.+3172   	; 0x1bce <setGyroX>
     f6a:	0b c0       	rjmp	.+22     	; 0xf82 <sensorTest+0x80>
     f6c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f70:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     f74:	8d d6       	rcall	.+3354   	; 0x1c90 <setGyroY>
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <sensorTest+0x80>
     f78:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f7c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     f80:	e8 d6       	rcall	.+3536   	; 0x1d52 <setGyroZ>
     f82:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f86:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     f8a:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <gyroTemp>
     f8e:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <gyroTemp+0x1>
     f92:	28 0f       	add	r18, r24
     f94:	39 1f       	adc	r19, r25
     f96:	30 93 05 0d 	sts	0x0D05, r19	; 0x800d05 <gyroTemp+0x1>
     f9a:	20 93 04 0d 	sts	0x0D04, r18	; 0x800d04 <gyroTemp>
     f9e:	80 91 02 0d 	lds	r24, 0x0D02	; 0x800d02 <gyroCount>
     fa2:	90 91 03 0d 	lds	r25, 0x0D03	; 0x800d03 <gyroCount+0x1>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 03 0d 	sts	0x0D03, r25	; 0x800d03 <gyroCount+0x1>
     fac:	80 93 02 0d 	sts	0x0D02, r24	; 0x800d02 <gyroCount>
     fb0:	05 97       	sbiw	r24, 0x05	; 5
     fb2:	a4 f0       	brlt	.+40     	; 0xfdc <sensorTest+0xda>
     fb4:	80 91 06 0d 	lds	r24, 0x0D06	; 0x800d06 <gyroValue>
     fb8:	90 91 07 0d 	lds	r25, 0x0D07	; 0x800d07 <gyroValue+0x1>
     fbc:	90 93 09 0d 	sts	0x0D09, r25	; 0x800d09 <preGyroValue+0x1>
     fc0:	80 93 08 0d 	sts	0x0D08, r24	; 0x800d08 <preGyroValue>
     fc4:	30 93 07 0d 	sts	0x0D07, r19	; 0x800d07 <gyroValue+0x1>
     fc8:	20 93 06 0d 	sts	0x0D06, r18	; 0x800d06 <gyroValue>
     fcc:	10 92 03 0d 	sts	0x0D03, r1	; 0x800d03 <gyroCount+0x1>
     fd0:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <gyroCount>
     fd4:	10 92 05 0d 	sts	0x0D05, r1	; 0x800d05 <gyroTemp+0x1>
     fd8:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <gyroTemp>
     fdc:	08 95       	ret

00000fde <sendAck>:
     fde:	9f 93       	push	r25
     fe0:	8f 93       	push	r24
     fe2:	85 e9       	ldi	r24, 0x95	; 149
     fe4:	97 e0       	ldi	r25, 0x07	; 7
     fe6:	9f 93       	push	r25
     fe8:	8f 93       	push	r24
     fea:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	08 95       	ret

00000ff8 <MotorInit>:
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	76 da       	rcall	.-2836   	; 0x4ee <dxl_initialize>
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	6f e2       	ldi	r22, 0x2F	; 47
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	8f e1       	ldi	r24, 0x1F	; 31
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	f3 d9       	rcall	.-3098   	; 0x3f6 <dxl_write_word>
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	60 e2       	ldi	r22, 0x20	; 32
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	8e ef       	ldi	r24, 0xFE	; 254
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	ec d9       	rcall	.-3112   	; 0x3f6 <dxl_write_word>
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	68 e1       	ldi	r22, 0x18	; 24
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	8e ef       	ldi	r24, 0xFE	; 254
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	1d da       	rcall	.-3014   	; 0x466 <dxl_write_byte>
    102c:	2f e3       	ldi	r18, 0x3F	; 63
    102e:	8d e0       	ldi	r24, 0x0D	; 13
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	80 40       	sbci	r24, 0x00	; 0
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	e1 f7       	brne	.-8      	; 0x1032 <MotorInit+0x3a>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <MotorInit+0x44>
    103c:	00 00       	nop
    103e:	08 95       	ret

00001040 <split>:
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <split+0xa>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	20 e2       	ldi	r18, 0x20	; 32
    1050:	3c e2       	ldi	r19, 0x2C	; 44
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	29 83       	std	Y+1, r18	; 0x01
    1056:	3a 83       	std	Y+2, r19	; 0x02
    1058:	4b 83       	std	Y+3, r20	; 0x03
    105a:	be 01       	movw	r22, r28
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	0e 94 bc 12 	call	0x2578	; 0x2578 <strtok>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	89 f0       	breq	.+34     	; 0x108a <split+0x4a>
    1068:	0c e1       	ldi	r16, 0x1C	; 28
    106a:	1d e0       	ldi	r17, 0x0D	; 13
    106c:	0e 94 9f 12 	call	0x253e	; 0x253e <atoi>
    1070:	f8 01       	movw	r30, r16
    1072:	81 93       	st	Z+, r24
    1074:	91 93       	st	Z+, r25
    1076:	8f 01       	movw	r16, r30
    1078:	be 01       	movw	r22, r28
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 bc 12 	call	0x2578	; 0x2578 <strtok>
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	89 f7       	brne	.-30     	; 0x106c <split+0x2c>
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <setAngle>:
    109a:	80 91 1e 0d 	lds	r24, 0x0D1E	; 0x800d1e <serCmd+0x2>
    109e:	90 91 1f 0d 	lds	r25, 0x0D1F	; 0x800d1f <serCmd+0x3>
    10a2:	82 33       	cpi	r24, 0x32	; 50
    10a4:	91 05       	cpc	r25, r1
    10a6:	9c f4       	brge	.+38     	; 0x10ce <setAngle+0x34>
    10a8:	e0 e2       	ldi	r30, 0x20	; 32
    10aa:	fd e0       	ldi	r31, 0x0D	; 13
    10ac:	2a e1       	ldi	r18, 0x1A	; 26
    10ae:	28 9f       	mul	r18, r24
    10b0:	d0 01       	movw	r26, r0
    10b2:	29 9f       	mul	r18, r25
    10b4:	b0 0d       	add	r27, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	a4 5f       	subi	r26, 0xF4	; 244
    10ba:	bd 4f       	sbci	r27, 0xFD	; 253
    10bc:	2a e3       	ldi	r18, 0x3A	; 58
    10be:	3d e0       	ldi	r19, 0x0D	; 13
    10c0:	81 91       	ld	r24, Z+
    10c2:	91 91       	ld	r25, Z+
    10c4:	8d 93       	st	X+, r24
    10c6:	9d 93       	st	X+, r25
    10c8:	e2 17       	cp	r30, r18
    10ca:	f3 07       	cpc	r31, r19
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <setAngle+0x26>
    10ce:	08 95       	ret

000010d0 <getAngle>:
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	68 97       	sbiw	r28, 0x18	; 24
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	fe 01       	movw	r30, r28
    10f2:	31 96       	adiw	r30, 0x01	; 1
    10f4:	88 e1       	ldi	r24, 0x18	; 24
    10f6:	df 01       	movw	r26, r30
    10f8:	1d 92       	st	X+, r1
    10fa:	8a 95       	dec	r24
    10fc:	e9 f7       	brne	.-6      	; 0x10f8 <getAngle+0x28>
    10fe:	00 e2       	ldi	r16, 0x20	; 32
    1100:	17 e0       	ldi	r17, 0x07	; 7
    1102:	7f 01       	movw	r14, r30
    1104:	0f 2e       	mov	r0, r31
    1106:	f8 e3       	ldi	r31, 0x38	; 56
    1108:	cf 2e       	mov	r12, r31
    110a:	f7 e0       	ldi	r31, 0x07	; 7
    110c:	df 2e       	mov	r13, r31
    110e:	f0 2d       	mov	r31, r0
    1110:	64 e2       	ldi	r22, 0x24	; 36
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	f8 01       	movw	r30, r16
    1116:	81 91       	ld	r24, Z+
    1118:	91 91       	ld	r25, Z+
    111a:	8f 01       	movw	r16, r30
    111c:	86 d9       	rcall	.-3316   	; 0x42a <dxl_read_word>
    111e:	d7 01       	movw	r26, r14
    1120:	8d 93       	st	X+, r24
    1122:	9d 93       	st	X+, r25
    1124:	7d 01       	movw	r14, r26
    1126:	0c 15       	cp	r16, r12
    1128:	1d 05       	cpc	r17, r13
    112a:	91 f7       	brne	.-28     	; 0x1110 <getAngle+0x40>
    112c:	88 8d       	ldd	r24, Y+24	; 0x18
    112e:	8f 93       	push	r24
    1130:	8f 89       	ldd	r24, Y+23	; 0x17
    1132:	8f 93       	push	r24
    1134:	8e 89       	ldd	r24, Y+22	; 0x16
    1136:	8f 93       	push	r24
    1138:	8d 89       	ldd	r24, Y+21	; 0x15
    113a:	8f 93       	push	r24
    113c:	8c 89       	ldd	r24, Y+20	; 0x14
    113e:	8f 93       	push	r24
    1140:	8b 89       	ldd	r24, Y+19	; 0x13
    1142:	8f 93       	push	r24
    1144:	8a 89       	ldd	r24, Y+18	; 0x12
    1146:	8f 93       	push	r24
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	8f 93       	push	r24
    114c:	88 89       	ldd	r24, Y+16	; 0x10
    114e:	8f 93       	push	r24
    1150:	8f 85       	ldd	r24, Y+15	; 0x0f
    1152:	8f 93       	push	r24
    1154:	8e 85       	ldd	r24, Y+14	; 0x0e
    1156:	8f 93       	push	r24
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	8f 93       	push	r24
    115c:	8c 85       	ldd	r24, Y+12	; 0x0c
    115e:	8f 93       	push	r24
    1160:	8b 85       	ldd	r24, Y+11	; 0x0b
    1162:	8f 93       	push	r24
    1164:	8a 85       	ldd	r24, Y+10	; 0x0a
    1166:	8f 93       	push	r24
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	8f 93       	push	r24
    116c:	88 85       	ldd	r24, Y+8	; 0x08
    116e:	8f 93       	push	r24
    1170:	8f 81       	ldd	r24, Y+7	; 0x07
    1172:	8f 93       	push	r24
    1174:	8e 81       	ldd	r24, Y+6	; 0x06
    1176:	8f 93       	push	r24
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	8f 93       	push	r24
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	8f 93       	push	r24
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	8f 93       	push	r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	8f 93       	push	r24
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	8f 93       	push	r24
    118c:	1f 92       	push	r1
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	8f 93       	push	r24
    1192:	8a e9       	ldi	r24, 0x9A	; 154
    1194:	97 e0       	ldi	r25, 0x07	; 7
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	68 96       	adiw	r28, 0x18	; 24
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret

000011c6 <sendActAngle>:
    11c6:	2a e1       	ldi	r18, 0x1A	; 26
    11c8:	ac 01       	movw	r20, r24
    11ca:	24 9f       	mul	r18, r20
    11cc:	c0 01       	movw	r24, r0
    11ce:	25 9f       	mul	r18, r21
    11d0:	90 0d       	add	r25, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	fc 01       	movw	r30, r24
    11d6:	e4 5f       	subi	r30, 0xF4	; 244
    11d8:	fd 4f       	sbci	r31, 0xFD	; 253
    11da:	81 8d       	ldd	r24, Z+25	; 0x19
    11dc:	8f 93       	push	r24
    11de:	80 8d       	ldd	r24, Z+24	; 0x18
    11e0:	8f 93       	push	r24
    11e2:	87 89       	ldd	r24, Z+23	; 0x17
    11e4:	8f 93       	push	r24
    11e6:	86 89       	ldd	r24, Z+22	; 0x16
    11e8:	8f 93       	push	r24
    11ea:	85 89       	ldd	r24, Z+21	; 0x15
    11ec:	8f 93       	push	r24
    11ee:	84 89       	ldd	r24, Z+20	; 0x14
    11f0:	8f 93       	push	r24
    11f2:	83 89       	ldd	r24, Z+19	; 0x13
    11f4:	8f 93       	push	r24
    11f6:	82 89       	ldd	r24, Z+18	; 0x12
    11f8:	8f 93       	push	r24
    11fa:	81 89       	ldd	r24, Z+17	; 0x11
    11fc:	8f 93       	push	r24
    11fe:	80 89       	ldd	r24, Z+16	; 0x10
    1200:	8f 93       	push	r24
    1202:	87 85       	ldd	r24, Z+15	; 0x0f
    1204:	8f 93       	push	r24
    1206:	86 85       	ldd	r24, Z+14	; 0x0e
    1208:	8f 93       	push	r24
    120a:	85 85       	ldd	r24, Z+13	; 0x0d
    120c:	8f 93       	push	r24
    120e:	84 85       	ldd	r24, Z+12	; 0x0c
    1210:	8f 93       	push	r24
    1212:	83 85       	ldd	r24, Z+11	; 0x0b
    1214:	8f 93       	push	r24
    1216:	82 85       	ldd	r24, Z+10	; 0x0a
    1218:	8f 93       	push	r24
    121a:	81 85       	ldd	r24, Z+9	; 0x09
    121c:	8f 93       	push	r24
    121e:	80 85       	ldd	r24, Z+8	; 0x08
    1220:	8f 93       	push	r24
    1222:	87 81       	ldd	r24, Z+7	; 0x07
    1224:	8f 93       	push	r24
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	8f 93       	push	r24
    122a:	85 81       	ldd	r24, Z+5	; 0x05
    122c:	8f 93       	push	r24
    122e:	84 81       	ldd	r24, Z+4	; 0x04
    1230:	8f 93       	push	r24
    1232:	83 81       	ldd	r24, Z+3	; 0x03
    1234:	8f 93       	push	r24
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	8f 93       	push	r24
    123a:	81 81       	ldd	r24, Z+1	; 0x01
    123c:	8f 93       	push	r24
    123e:	80 81       	ld	r24, Z
    1240:	8f 93       	push	r24
    1242:	1f 92       	push	r1
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	8f 93       	push	r24
    1248:	8f ec       	ldi	r24, 0xCF	; 207
    124a:	97 e0       	ldi	r25, 0x07	; 7
    124c:	9f 93       	push	r25
    124e:	8f 93       	push	r24
    1250:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
    1254:	8d b7       	in	r24, 0x3d	; 61
    1256:	9e b7       	in	r25, 0x3e	; 62
    1258:	4e 96       	adiw	r24, 0x1e	; 30
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	9e bf       	out	0x3e, r25	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	8d bf       	out	0x3d, r24	; 61
    1264:	08 95       	ret

00001266 <getLoad>:
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	68 97       	sbiw	r28, 0x18	; 24
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	fe 01       	movw	r30, r28
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	88 e1       	ldi	r24, 0x18	; 24
    128c:	df 01       	movw	r26, r30
    128e:	1d 92       	st	X+, r1
    1290:	8a 95       	dec	r24
    1292:	e9 f7       	brne	.-6      	; 0x128e <getLoad+0x28>
    1294:	00 e2       	ldi	r16, 0x20	; 32
    1296:	17 e0       	ldi	r17, 0x07	; 7
    1298:	7f 01       	movw	r14, r30
    129a:	0f 2e       	mov	r0, r31
    129c:	f8 e3       	ldi	r31, 0x38	; 56
    129e:	cf 2e       	mov	r12, r31
    12a0:	f7 e0       	ldi	r31, 0x07	; 7
    12a2:	df 2e       	mov	r13, r31
    12a4:	f0 2d       	mov	r31, r0
    12a6:	68 e2       	ldi	r22, 0x28	; 40
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	f8 01       	movw	r30, r16
    12ac:	81 91       	ld	r24, Z+
    12ae:	91 91       	ld	r25, Z+
    12b0:	8f 01       	movw	r16, r30
    12b2:	bb d8       	rcall	.-3722   	; 0x42a <dxl_read_word>
    12b4:	d7 01       	movw	r26, r14
    12b6:	8d 93       	st	X+, r24
    12b8:	9d 93       	st	X+, r25
    12ba:	7d 01       	movw	r14, r26
    12bc:	0c 15       	cp	r16, r12
    12be:	1d 05       	cpc	r17, r13
    12c0:	91 f7       	brne	.-28     	; 0x12a6 <getLoad+0x40>
    12c2:	88 8d       	ldd	r24, Y+24	; 0x18
    12c4:	8f 93       	push	r24
    12c6:	8f 89       	ldd	r24, Y+23	; 0x17
    12c8:	8f 93       	push	r24
    12ca:	8e 89       	ldd	r24, Y+22	; 0x16
    12cc:	8f 93       	push	r24
    12ce:	8d 89       	ldd	r24, Y+21	; 0x15
    12d0:	8f 93       	push	r24
    12d2:	8c 89       	ldd	r24, Y+20	; 0x14
    12d4:	8f 93       	push	r24
    12d6:	8b 89       	ldd	r24, Y+19	; 0x13
    12d8:	8f 93       	push	r24
    12da:	8a 89       	ldd	r24, Y+18	; 0x12
    12dc:	8f 93       	push	r24
    12de:	89 89       	ldd	r24, Y+17	; 0x11
    12e0:	8f 93       	push	r24
    12e2:	88 89       	ldd	r24, Y+16	; 0x10
    12e4:	8f 93       	push	r24
    12e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e8:	8f 93       	push	r24
    12ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ec:	8f 93       	push	r24
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	8f 93       	push	r24
    12f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f4:	8f 93       	push	r24
    12f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f8:	8f 93       	push	r24
    12fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fc:	8f 93       	push	r24
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	8f 93       	push	r24
    1302:	88 85       	ldd	r24, Y+8	; 0x08
    1304:	8f 93       	push	r24
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	8f 93       	push	r24
    130a:	8e 81       	ldd	r24, Y+6	; 0x06
    130c:	8f 93       	push	r24
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	8f 93       	push	r24
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	8f 93       	push	r24
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	8f 93       	push	r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	8f 93       	push	r24
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	8f 93       	push	r24
    1322:	1f 92       	push	r1
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	8f 93       	push	r24
    1328:	8a ef       	ldi	r24, 0xFA	; 250
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	9f 93       	push	r25
    132e:	8f 93       	push	r24
    1330:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	68 96       	adiw	r28, 0x18	; 24
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <getVoltage>:
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	68 97       	sbiw	r28, 0x18	; 24
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	fe 01       	movw	r30, r28
    137e:	31 96       	adiw	r30, 0x01	; 1
    1380:	88 e1       	ldi	r24, 0x18	; 24
    1382:	df 01       	movw	r26, r30
    1384:	1d 92       	st	X+, r1
    1386:	8a 95       	dec	r24
    1388:	e9 f7       	brne	.-6      	; 0x1384 <getVoltage+0x28>
    138a:	00 e2       	ldi	r16, 0x20	; 32
    138c:	17 e0       	ldi	r17, 0x07	; 7
    138e:	7f 01       	movw	r14, r30
    1390:	0f 2e       	mov	r0, r31
    1392:	f8 e3       	ldi	r31, 0x38	; 56
    1394:	cf 2e       	mov	r12, r31
    1396:	f7 e0       	ldi	r31, 0x07	; 7
    1398:	df 2e       	mov	r13, r31
    139a:	f0 2d       	mov	r31, r0
    139c:	6a e2       	ldi	r22, 0x2A	; 42
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	f8 01       	movw	r30, r16
    13a2:	81 91       	ld	r24, Z+
    13a4:	91 91       	ld	r25, Z+
    13a6:	8f 01       	movw	r16, r30
    13a8:	40 d8       	rcall	.-3968   	; 0x42a <dxl_read_word>
    13aa:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    13ae:	d7 01       	movw	r26, r14
    13b0:	8d 93       	st	X+, r24
    13b2:	9d 93       	st	X+, r25
    13b4:	7d 01       	movw	r14, r26
    13b6:	0c 15       	cp	r16, r12
    13b8:	1d 05       	cpc	r17, r13
    13ba:	81 f7       	brne	.-32     	; 0x139c <getVoltage+0x40>
    13bc:	88 8d       	ldd	r24, Y+24	; 0x18
    13be:	8f 93       	push	r24
    13c0:	8f 89       	ldd	r24, Y+23	; 0x17
    13c2:	8f 93       	push	r24
    13c4:	8e 89       	ldd	r24, Y+22	; 0x16
    13c6:	8f 93       	push	r24
    13c8:	8d 89       	ldd	r24, Y+21	; 0x15
    13ca:	8f 93       	push	r24
    13cc:	8c 89       	ldd	r24, Y+20	; 0x14
    13ce:	8f 93       	push	r24
    13d0:	8b 89       	ldd	r24, Y+19	; 0x13
    13d2:	8f 93       	push	r24
    13d4:	8a 89       	ldd	r24, Y+18	; 0x12
    13d6:	8f 93       	push	r24
    13d8:	89 89       	ldd	r24, Y+17	; 0x11
    13da:	8f 93       	push	r24
    13dc:	88 89       	ldd	r24, Y+16	; 0x10
    13de:	8f 93       	push	r24
    13e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e2:	8f 93       	push	r24
    13e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    13e6:	8f 93       	push	r24
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	8f 93       	push	r24
    13ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ee:	8f 93       	push	r24
    13f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f2:	8f 93       	push	r24
    13f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f6:	8f 93       	push	r24
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	8f 93       	push	r24
    13fc:	88 85       	ldd	r24, Y+8	; 0x08
    13fe:	8f 93       	push	r24
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	8f 93       	push	r24
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	8f 93       	push	r24
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	8f 93       	push	r24
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	8f 93       	push	r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	8f 93       	push	r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	8f 93       	push	r24
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	8f 93       	push	r24
    141c:	1f 92       	push	r1
    141e:	85 e0       	ldi	r24, 0x05	; 5
    1420:	8f 93       	push	r24
    1422:	8a ef       	ldi	r24, 0xFA	; 250
    1424:	97 e0       	ldi	r25, 0x07	; 7
    1426:	9f 93       	push	r25
    1428:	8f 93       	push	r24
    142a:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	68 96       	adiw	r28, 0x18	; 24
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <startMotion>:
    1456:	90 93 13 0d 	sts	0x0D13, r25	; 0x800d13 <nextMotionNumber+0x1>
    145a:	80 93 12 0d 	sts	0x0D12, r24	; 0x800d12 <nextMotionNumber>
    145e:	70 93 11 0d 	sts	0x0D11, r23	; 0x800d11 <nextMotionTimes+0x1>
    1462:	60 93 10 0d 	sts	0x0D10, r22	; 0x800d10 <nextMotionTimes>
    1466:	20 91 18 0d 	lds	r18, 0x0D18	; 0x800d18 <motionTimes>
    146a:	30 91 19 0d 	lds	r19, 0x0D19	; 0x800d19 <motionTimes+0x1>
    146e:	23 2b       	or	r18, r19
    1470:	61 f4       	brne	.+24     	; 0x148a <startMotion+0x34>
    1472:	90 93 1b 0d 	sts	0x0D1B, r25	; 0x800d1b <motionNumber+0x1>
    1476:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <motionNumber>
    147a:	70 93 19 0d 	sts	0x0D19, r23	; 0x800d19 <motionTimes+0x1>
    147e:	60 93 18 0d 	sts	0x0D18, r22	; 0x800d18 <motionTimes>
    1482:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <nextMotionTimes+0x1>
    1486:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <nextMotionTimes>
    148a:	08 95       	ret

0000148c <forceMotion>:
    148c:	90 93 1b 0d 	sts	0x0D1B, r25	; 0x800d1b <motionNumber+0x1>
    1490:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <motionNumber>
    1494:	70 93 19 0d 	sts	0x0D19, r23	; 0x800d19 <motionTimes+0x1>
    1498:	60 93 18 0d 	sts	0x0D18, r22	; 0x800d18 <motionTimes>
    149c:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <nextMotionTimes+0x1>
    14a0:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <nextMotionTimes>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    14ac:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    14b0:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <motionTime+0x1>
    14b4:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <motionTime>
    14b8:	08 95       	ret

000014ba <stopMotion>:
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    14c2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    14c6:	10 92 19 0d 	sts	0x0D19, r1	; 0x800d19 <motionTimes+0x1>
    14ca:	10 92 18 0d 	sts	0x0D18, r1	; 0x800d18 <motionTimes>
    14ce:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <motionTime+0x1>
    14d2:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <motionTime>
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	9f ef       	ldi	r25, 0xFF	; 255
    14da:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <motionFirst+0x1>
    14de:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motionFirst>
    14e2:	08 95       	ret

000014e4 <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <PrintErrorCode+0x14>
	printf("Input voltage error!\n");
    14f0:	87 e2       	ldi	r24, 0x27	; 39
    14f2:	98 e0       	ldi	r25, 0x08	; 8
    14f4:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	21 f4       	brne	.+8      	; 0x150c <PrintErrorCode+0x28>
	printf("Angle limit error!\n");
    1504:	8c e3       	ldi	r24, 0x3C	; 60
    1506:	98 e0       	ldi	r25, 0x08	; 8
    1508:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	21 f4       	brne	.+8      	; 0x1520 <PrintErrorCode+0x3c>
	printf("Overheat error!\n");
    1518:	8f e4       	ldi	r24, 0x4F	; 79
    151a:	98 e0       	ldi	r25, 0x08	; 8
    151c:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    1520:	88 e0       	ldi	r24, 0x08	; 8
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	21 f4       	brne	.+8      	; 0x1534 <PrintErrorCode+0x50>
	printf("Out of range error!\n");
    152c:	8f e5       	ldi	r24, 0x5F	; 95
    152e:	98 e0       	ldi	r25, 0x08	; 8
    1530:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    1534:	80 e1       	ldi	r24, 0x10	; 16
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	21 f4       	brne	.+8      	; 0x1548 <PrintErrorCode+0x64>
	printf("Checksum error!\n");
    1540:	83 e7       	ldi	r24, 0x73	; 115
    1542:	98 e0       	ldi	r25, 0x08	; 8
    1544:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	21 f4       	brne	.+8      	; 0x155c <PrintErrorCode+0x78>
	printf("Overload error!\n");
    1554:	83 e8       	ldi	r24, 0x83	; 131
    1556:	98 e0       	ldi	r25, 0x08	; 8
    1558:	0e 94 89 13 	call	0x2712	; 0x2712 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    155c:	80 e4       	ldi	r24, 0x40	; 64
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	21 f4       	brne	.+8      	; 0x1570 <PrintErrorCode+0x8c>
	printf("Instruction code error!\n");
    1568:	83 e9       	ldi	r24, 0x93	; 147
    156a:	98 e0       	ldi	r25, 0x08	; 8
    156c:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
    1570:	08 95       	ret

00001572 <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	91 05       	cpc	r25, r1
    1576:	99 f0       	breq	.+38     	; 0x159e <PrintCommStatus+0x2c>
    1578:	34 f4       	brge	.+12     	; 0x1586 <PrintCommStatus+0x14>
    157a:	82 30       	cpi	r24, 0x02	; 2
    157c:	91 05       	cpc	r25, r1
    157e:	51 f0       	breq	.+20     	; 0x1594 <PrintCommStatus+0x22>
    1580:	03 97       	sbiw	r24, 0x03	; 3
    1582:	91 f0       	breq	.+36     	; 0x15a8 <PrintCommStatus+0x36>
    1584:	25 c0       	rjmp	.+74     	; 0x15d0 <PrintCommStatus+0x5e>
    1586:	86 30       	cpi	r24, 0x06	; 6
    1588:	91 05       	cpc	r25, r1
    158a:	c1 f0       	breq	.+48     	; 0x15bc <PrintCommStatus+0x4a>
    158c:	94 f0       	brlt	.+36     	; 0x15b2 <PrintCommStatus+0x40>
    158e:	07 97       	sbiw	r24, 0x07	; 7
    1590:	d1 f0       	breq	.+52     	; 0x15c6 <PrintCommStatus+0x54>
    1592:	1e c0       	rjmp	.+60     	; 0x15d0 <PrintCommStatus+0x5e>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    1594:	8b ea       	ldi	r24, 0xAB	; 171
    1596:	98 e0       	ldi	r25, 0x08	; 8
    1598:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    159c:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    159e:	8c ed       	ldi	r24, 0xDC	; 220
    15a0:	98 e0       	ldi	r25, 0x08	; 8
    15a2:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    15a6:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	99 e0       	ldi	r25, 0x09	; 9
    15ac:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    15b0:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    15b2:	8b e3       	ldi	r24, 0x3B	; 59
    15b4:	99 e0       	ldi	r25, 0x09	; 9
    15b6:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    15ba:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    15bc:	88 e6       	ldi	r24, 0x68	; 104
    15be:	99 e0       	ldi	r25, 0x09	; 9
    15c0:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    15c4:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    15c6:	83 e9       	ldi	r24, 0x93	; 147
    15c8:	99 e0       	ldi	r25, 0x09	; 9
    15ca:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
		break;
    15ce:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    15d0:	8c eb       	ldi	r24, 0xBC	; 188
    15d2:	99 e0       	ldi	r25, 0x09	; 9
    15d4:	0c 94 89 13 	jmp	0x2712	; 0x2712 <puts>
    15d8:	08 95       	ret

000015da <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	08 2f       	mov	r16, r24
    15e4:	19 2f       	mov	r17, r25
    15e6:	d6 2f       	mov	r29, r22
    15e8:	c7 2f       	mov	r28, r23
	int CommStatus;
	printf( "%d %d\n", id, power );
    15ea:	7f 93       	push	r23
    15ec:	6f 93       	push	r22
    15ee:	9f 93       	push	r25
    15f0:	8f 93       	push	r24
    15f2:	88 ed       	ldi	r24, 0xD8	; 216
    15f4:	99 e0       	ldi	r25, 0x09	; 9
    15f6:	9f 93       	push	r25
    15f8:	8f 93       	push	r24
    15fa:	0e 94 76 13 	call	0x26ec	; 0x26ec <printf>
		if( CommStatus == COMM_RXSUCCESS )
			PrintErrorCode();
		else
			PrintCommStatus(CommStatus);
	}else{
		dxl_set_txpacket_id(BROADCAST_ID);
    15fe:	8e ef       	ldi	r24, 0xFE	; 254
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1606:	83 e8       	ldi	r24, 0x83	; 131
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    160e:	60 e2       	ldi	r22, 0x20	; 32
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    161a:	62 e0       	ldi	r22, 0x02	; 2
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    1626:	60 2f       	mov	r22, r16
    1628:	71 2f       	mov	r23, r17
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    1632:	8d 2f       	mov	r24, r29
    1634:	9c 2f       	mov	r25, r28
    1636:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    163a:	bc 01       	movw	r22, r24
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    1644:	8d 2f       	mov	r24, r29
    1646:	9c 2f       	mov	r25, r28
    1648:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    164c:	bc 01       	movw	r22, r24
    164e:	84 e0       	ldi	r24, 0x04	; 4
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    1656:	87 e0       	ldi	r24, 0x07	; 7
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    165e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1662:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	91 05       	cpc	r25, r1
    1676:	11 f4       	brne	.+4      	; 0x167c <MotorControl+0xa2>
			PrintErrorCode();
    1678:	35 df       	rcall	.-406    	; 0x14e4 <PrintErrorCode>
    167a:	01 c0       	rjmp	.+2      	; 0x167e <MotorControl+0xa4>
		else
			PrintCommStatus(CommStatus);
    167c:	7a df       	rcall	.-268    	; 0x1572 <PrintCommStatus>
	}
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    1688:	2f 92       	push	r2
    168a:	3f 92       	push	r3
    168c:	4f 92       	push	r4
    168e:	5f 92       	push	r5
    1690:	6f 92       	push	r6
    1692:	7f 92       	push	r7
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	ee 97       	sbiw	r28, 0x3e	; 62
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    16bc:	82 33       	cpi	r24, 0x32	; 50
    16be:	91 05       	cpc	r25, r1
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <ServoControl+0x3c>
    16c2:	6c c1       	rjmp	.+728    	; 0x199c <ServoControl+0x314>
    16c4:	9a af       	std	Y+58, r25	; 0x3a
    16c6:	89 af       	std	Y+57, r24	; 0x39
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    16c8:	fe 01       	movw	r30, r28
    16ca:	31 96       	adiw	r30, 0x01	; 1
    16cc:	88 e1       	ldi	r24, 0x18	; 24
    16ce:	df 01       	movw	r26, r30
    16d0:	1d 92       	st	X+, r1
    16d2:	8a 95       	dec	r24
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <ServoControl+0x48>
    16d6:	20 e2       	ldi	r18, 0x20	; 32
    16d8:	37 e0       	ldi	r19, 0x07	; 7
    16da:	3e af       	std	Y+62, r19	; 0x3e
    16dc:	2d af       	std	Y+61, r18	; 0x3d
    16de:	2a e1       	ldi	r18, 0x1A	; 26
    16e0:	49 ad       	ldd	r20, Y+57	; 0x39
    16e2:	5a ad       	ldd	r21, Y+58	; 0x3a
    16e4:	24 9f       	mul	r18, r20
    16e6:	c0 01       	movw	r24, r0
    16e8:	25 9f       	mul	r18, r21
    16ea:	90 0d       	add	r25, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	dc 01       	movw	r26, r24
    16f0:	a4 5f       	subi	r26, 0xF4	; 244
    16f2:	bd 4f       	sbci	r27, 0xFD	; 253
    16f4:	bc af       	std	Y+60, r27	; 0x3c
    16f6:	ab af       	std	Y+59, r26	; 0x3b
    16f8:	1f 01       	movw	r2, r30
    16fa:	5e 01       	movw	r10, r28
    16fc:	b9 e1       	ldi	r27, 0x19	; 25
    16fe:	ab 0e       	add	r10, r27
    1700:	b1 1c       	adc	r11, r1
    1702:	8f 01       	movw	r16, r30
    1704:	cb ac       	ldd	r12, Y+59	; 0x3b
    1706:	dc ac       	ldd	r13, Y+60	; 0x3c
    1708:	0f 2e       	mov	r0, r31
    170a:	f0 e2       	ldi	r31, 0x20	; 32
    170c:	ef 2e       	mov	r14, r31
    170e:	f7 e0       	ldi	r31, 0x07	; 7
    1710:	ff 2e       	mov	r15, r31
    1712:	f0 2d       	mov	r31, r0
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    1714:	81 2c       	mov	r8, r1
    1716:	91 2c       	mov	r9, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    1718:	64 e2       	ldi	r22, 0x24	; 36
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	f7 01       	movw	r30, r14
    171e:	81 91       	ld	r24, Z+
    1720:	91 91       	ld	r25, Z+
    1722:	7f 01       	movw	r14, r30
    1724:	0e 94 15 02 	call	0x42a	; 0x42a <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    1728:	d6 01       	movw	r26, r12
    172a:	2d 91       	ld	r18, X+
    172c:	3d 91       	ld	r19, X+
    172e:	6d 01       	movw	r12, r26
    1730:	f9 01       	movw	r30, r18
    1732:	e8 1b       	sub	r30, r24
    1734:	f9 0b       	sbc	r31, r25
    1736:	cf 01       	movw	r24, r30
		if( angleDiff[i] < 0 ){
    1738:	22 f0       	brmi	.+8      	; 0x1742 <ServoControl+0xba>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    173a:	d8 01       	movw	r26, r16
    173c:	ed 93       	st	X+, r30
    173e:	fc 93       	st	X, r31
    1740:	06 c0       	rjmp	.+12     	; 0x174e <ServoControl+0xc6>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    1742:	91 95       	neg	r25
    1744:	81 95       	neg	r24
    1746:	91 09       	sbc	r25, r1
    1748:	f8 01       	movw	r30, r16
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    174e:	d8 01       	movw	r26, r16
    1750:	8d 91       	ld	r24, X+
    1752:	9d 91       	ld	r25, X+
    1754:	8d 01       	movw	r16, r26
    1756:	88 16       	cp	r8, r24
    1758:	99 06       	cpc	r9, r25
    175a:	0c f4       	brge	.+2      	; 0x175e <ServoControl+0xd6>
    175c:	4c 01       	movw	r8, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    175e:	0a 15       	cp	r16, r10
    1760:	1b 05       	cpc	r17, r11
    1762:	d1 f6       	brne	.-76     	; 0x1718 <ServoControl+0x90>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    1764:	8e 01       	movw	r16, r28
    1766:	07 5e       	subi	r16, 0xE7	; 231
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	88 e1       	ldi	r24, 0x18	; 24
    176c:	f8 01       	movw	r30, r16
    176e:	11 92       	st	Z+, r1
    1770:	8a 95       	dec	r24
    1772:	e9 f7       	brne	.-6      	; 0x176e <ServoControl+0xe6>
    1774:	84 e6       	ldi	r24, 0x64	; 100
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9a 8f       	std	Y+26, r25	; 0x1a
    177a:	89 8f       	std	Y+25, r24	; 0x19
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    177c:	8a e1       	ldi	r24, 0x1A	; 26
    177e:	29 ad       	ldd	r18, Y+57	; 0x39
    1780:	3a ad       	ldd	r19, Y+58	; 0x3a
    1782:	82 9f       	mul	r24, r18
    1784:	f0 01       	movw	r30, r0
    1786:	83 9f       	mul	r24, r19
    1788:	f0 0d       	add	r31, r0
    178a:	11 24       	eor	r1, r1
    178c:	e4 5f       	subi	r30, 0xF4	; 244
    178e:	fd 4f       	sbci	r31, 0xFD	; 253
    1790:	60 8d       	ldd	r22, Z+24	; 0x18
    1792:	71 8d       	ldd	r23, Z+25	; 0x19
    1794:	07 2e       	mov	r0, r23
    1796:	00 0c       	add	r0, r0
    1798:	88 0b       	sbc	r24, r24
    179a:	99 0b       	sbc	r25, r25
    179c:	b9 d5       	rcall	.+2930   	; 0x2310 <__floatsisf>
    179e:	69 ab       	std	Y+49, r22	; 0x31
    17a0:	7a ab       	std	Y+50, r23	; 0x32
    17a2:	8b ab       	std	Y+51, r24	; 0x33
    17a4:	9c ab       	std	Y+52, r25	; 0x34
    17a6:	38 01       	movw	r6, r16
    17a8:	6e 01       	movw	r12, r28
    17aa:	31 e3       	ldi	r19, 0x31	; 49
    17ac:	c3 0e       	add	r12, r19
    17ae:	d1 1c       	adc	r13, r1
    17b0:	c4 01       	movw	r24, r8
    17b2:	99 0c       	add	r9, r9
    17b4:	aa 0b       	sbc	r26, r26
    17b6:	bb 0b       	sbc	r27, r27
    17b8:	8d ab       	std	Y+53, r24	; 0x35
    17ba:	9e ab       	std	Y+54, r25	; 0x36
    17bc:	af ab       	std	Y+55, r26	; 0x37
    17be:	b8 af       	std	Y+56, r27	; 0x38
		if( speed[i] == 0 ){
			speed[i] = 1;
    17c0:	44 24       	eor	r4, r4
    17c2:	43 94       	inc	r4
    17c4:	51 2c       	mov	r5, r1
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    17c6:	d1 01       	movw	r26, r2
    17c8:	ed 90       	ld	r14, X+
    17ca:	fd 90       	ld	r15, X+
    17cc:	1d 01       	movw	r2, r26
    17ce:	6d a9       	ldd	r22, Y+53	; 0x35
    17d0:	7e a9       	ldd	r23, Y+54	; 0x36
    17d2:	8f a9       	ldd	r24, Y+55	; 0x37
    17d4:	98 ad       	ldd	r25, Y+56	; 0x38
    17d6:	9c d5       	rcall	.+2872   	; 0x2310 <__floatsisf>
    17d8:	4b 01       	movw	r8, r22
    17da:	5c 01       	movw	r10, r24
    17dc:	b7 01       	movw	r22, r14
    17de:	ff 0c       	add	r15, r15
    17e0:	88 0b       	sbc	r24, r24
    17e2:	99 0b       	sbc	r25, r25
    17e4:	95 d5       	rcall	.+2858   	; 0x2310 <__floatsisf>
    17e6:	a5 01       	movw	r20, r10
    17e8:	94 01       	movw	r18, r8
    17ea:	f7 d4       	rcall	.+2542   	; 0x21da <__divsf3>
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	69 a9       	ldd	r22, Y+49	; 0x31
    17f2:	7a a9       	ldd	r23, Y+50	; 0x32
    17f4:	8b a9       	ldd	r24, Y+51	; 0x33
    17f6:	9c a9       	ldd	r25, Y+52	; 0x34
    17f8:	3f d6       	rcall	.+3198   	; 0x2478 <__mulsf3>
    17fa:	57 d5       	rcall	.+2734   	; 0x22aa <__fixsfsi>
		if( speed[i] == 0 ){
    17fc:	61 15       	cp	r22, r1
    17fe:	71 05       	cpc	r23, r1
    1800:	21 f0       	breq	.+8      	; 0x180a <ServoControl+0x182>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1802:	f8 01       	movw	r30, r16
    1804:	71 83       	std	Z+1, r23	; 0x01
    1806:	60 83       	st	Z, r22
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <ServoControl+0x188>
		if( speed[i] == 0 ){
			speed[i] = 1;
    180a:	d8 01       	movw	r26, r16
    180c:	4d 92       	st	X+, r4
    180e:	5c 92       	st	X, r5
    1810:	0e 5f       	subi	r16, 0xFE	; 254
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    1814:	0c 15       	cp	r16, r12
    1816:	1d 05       	cpc	r17, r13
    1818:	b1 f6       	brne	.-84     	; 0x17c6 <ServoControl+0x13e>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    181a:	8a e1       	ldi	r24, 0x1A	; 26
    181c:	29 ad       	ldd	r18, Y+57	; 0x39
    181e:	3a ad       	ldd	r19, Y+58	; 0x3a
    1820:	82 9f       	mul	r24, r18
    1822:	f0 01       	movw	r30, r0
    1824:	83 9f       	mul	r24, r19
    1826:	f0 0d       	add	r31, r0
    1828:	11 24       	eor	r1, r1
    182a:	e4 5f       	subi	r30, 0xF4	; 244
    182c:	fd 4f       	sbci	r31, 0xFD	; 253
    182e:	60 8d       	ldd	r22, Z+24	; 0x18
    1830:	71 8d       	ldd	r23, Z+25	; 0x19
    1832:	8b ef       	ldi	r24, 0xFB	; 251
    1834:	93 e1       	ldi	r25, 0x13	; 19
    1836:	03 d4       	rcall	.+2054   	; 0x203e <__divmodhi4>
    1838:	07 2e       	mov	r0, r23
    183a:	00 0c       	add	r0, r0
    183c:	88 0b       	sbc	r24, r24
    183e:	99 0b       	sbc	r25, r25
    1840:	67 d5       	rcall	.+2766   	; 0x2310 <__floatsisf>
    1842:	a5 01       	movw	r20, r10
    1844:	94 01       	movw	r18, r8
    1846:	18 d6       	rcall	.+3120   	; 0x2478 <__mulsf3>
    1848:	30 d5       	rcall	.+2656   	; 0x22aa <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    184a:	16 16       	cp	r1, r22
    184c:	17 06       	cpc	r1, r23
    184e:	2c f4       	brge	.+10     	; 0x185a <ServoControl+0x1d2>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1850:	70 93 15 0d 	sts	0x0D15, r23	; 0x800d15 <movingTime+0x1>
    1854:	60 93 14 0d 	sts	0x0D14, r22	; 0x800d14 <movingTime>
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <ServoControl+0x1de>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	90 93 15 0d 	sts	0x0D15, r25	; 0x800d15 <movingTime+0x1>
    1862:	80 93 14 0d 	sts	0x0D14, r24	; 0x800d14 <movingTime>
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    1866:	8e ef       	ldi	r24, 0xFE	; 254
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    186e:	83 e8       	ldi	r24, 0x83	; 131
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1876:	60 e2       	ldi	r22, 0x20	; 32
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    188e:	0f 2e       	mov	r0, r31
    1890:	f8 e3       	ldi	r31, 0x38	; 56
    1892:	af 2e       	mov	r10, r31
    1894:	f7 e0       	ldi	r31, 0x07	; 7
    1896:	bf 2e       	mov	r11, r31
    1898:	f0 2d       	mov	r31, r0
    189a:	0f 2e       	mov	r0, r31
    189c:	f0 e2       	ldi	r31, 0x20	; 32
    189e:	ef 2e       	mov	r14, r31
    18a0:	f7 e0       	ldi	r31, 0x07	; 7
    18a2:	ff 2e       	mov	r15, r31
    18a4:	f0 2d       	mov	r31, r0
    18a6:	02 e0       	ldi	r16, 0x02	; 2
    18a8:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    18aa:	d7 01       	movw	r26, r14
    18ac:	6d 91       	ld	r22, X+
    18ae:	7d 91       	ld	r23, X+
    18b0:	7d 01       	movw	r14, r26
    18b2:	c8 01       	movw	r24, r16
    18b4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    18b8:	f3 01       	movw	r30, r6
    18ba:	c1 90       	ld	r12, Z+
    18bc:	d1 90       	ld	r13, Z+
    18be:	3f 01       	movw	r6, r30
    18c0:	c6 01       	movw	r24, r12
    18c2:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    18c6:	bc 01       	movw	r22, r24
    18c8:	c8 01       	movw	r24, r16
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    18d0:	c6 01       	movw	r24, r12
    18d2:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    18d6:	bc 01       	movw	r22, r24
    18d8:	c8 01       	movw	r24, r16
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    18e0:	0d 5f       	subi	r16, 0xFD	; 253
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    18e4:	ea 14       	cp	r14, r10
    18e6:	fb 04       	cpc	r15, r11
    18e8:	01 f7       	brne	.-64     	; 0x18aa <ServoControl+0x222>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    18ea:	88 e2       	ldi	r24, 0x28	; 40
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
	dxl_txrx_packet();
    18f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    18f6:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <ServoControl+0x27a>
    1900:	4c c0       	rjmp	.+152    	; 0x199a <ServoControl+0x312>
		PrintErrorCode();
    1902:	f0 dd       	rcall	.-1056   	; 0x14e4 <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    1904:	8e ef       	ldi	r24, 0xFE	; 254
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    190c:	83 e8       	ldi	r24, 0x83	; 131
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    1914:	6e e1       	ldi	r22, 0x1E	; 30
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    192c:	02 e0       	ldi	r16, 0x02	; 2
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	cd ac       	ldd	r12, Y+61	; 0x3d
    1932:	de ac       	ldd	r13, Y+62	; 0x3e
    1934:	eb ac       	ldd	r14, Y+59	; 0x3b
    1936:	fc ac       	ldd	r15, Y+60	; 0x3c
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1938:	d6 01       	movw	r26, r12
    193a:	6d 91       	ld	r22, X+
    193c:	7d 91       	ld	r23, X+
    193e:	6d 01       	movw	r12, r26
    1940:	c8 01       	movw	r24, r16
    1942:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1946:	57 01       	movw	r10, r14
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    1948:	f7 01       	movw	r30, r14
    194a:	81 91       	ld	r24, Z+
    194c:	91 91       	ld	r25, Z+
    194e:	7f 01       	movw	r14, r30
    1950:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1954:	bc 01       	movw	r22, r24
    1956:	c8 01       	movw	r24, r16
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    195e:	d5 01       	movw	r26, r10
    1960:	8d 91       	ld	r24, X+
    1962:	9c 91       	ld	r25, X
    1964:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1968:	bc 01       	movw	r22, r24
    196a:	c8 01       	movw	r24, r16
    196c:	02 96       	adiw	r24, 0x02	; 2
    196e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1972:	0d 5f       	subi	r16, 0xFD	; 253
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    1976:	06 32       	cpi	r16, 0x26	; 38
    1978:	11 05       	cpc	r17, r1
    197a:	f1 f6       	brne	.-68     	; 0x1938 <ServoControl+0x2b0>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    197c:	88 e2       	ldi	r24, 0x28	; 40
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1984:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1988:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	11 f4       	brne	.+4      	; 0x1996 <ServoControl+0x30e>
			PrintErrorCode();
    1992:	a8 dd       	rcall	.-1200   	; 0x14e4 <PrintErrorCode>
    1994:	03 c0       	rjmp	.+6      	; 0x199c <ServoControl+0x314>
		}else{
			PrintCommStatus(CommStatus);
    1996:	ed dd       	rcall	.-1062   	; 0x1572 <PrintCommStatus>
    1998:	01 c0       	rjmp	.+2      	; 0x199c <ServoControl+0x314>
		}
	}else{
		PrintCommStatus(CommStatus);
    199a:	eb dd       	rcall	.-1066   	; 0x1572 <PrintCommStatus>
	}
}
    199c:	ee 96       	adiw	r28, 0x3e	; 62
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	5f 90       	pop	r5
    19c6:	4f 90       	pop	r4
    19c8:	3f 90       	pop	r3
    19ca:	2f 90       	pop	r2
    19cc:	08 95       	ret

000019ce <main>:
int gyroTemp = 0;
int gyroCount = 0;
int mainCount = 0;

#if 1
int main(void){
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
	
//	int (*atest)[] = test();
//	int a = atest[0][0];
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    19dc:	8c ef       	ldi	r24, 0xFC	; 252
    19de:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    19e0:	8e ef       	ldi	r24, 0xFE	; 254
    19e2:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    19e4:	8f e7       	ldi	r24, 0x7F	; 127
    19e6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    19e8:	8e e7       	ldi	r24, 0x7E	; 126
    19ea:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    19ec:	80 e7       	ldi	r24, 0x70	; 112
    19ee:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    19f0:	81 e1       	ldi	r24, 0x11	; 17
    19f2:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    19f4:	01 db       	rcall	.-2558   	; 0xff8 <MotorInit>
	initSerial();
    19f6:	ba d2       	rcall	.+1396   	; 0x1f6c <initSerial>
	int isFinish = 0;
	int gyro = 0; //45 - 455
	int direction = 0;
	int speed = 0;

    sensorInit();
    19f8:	73 da       	rcall	.-2842   	; 0xee0 <sensorInit>
	printf( "### start\r\n");
    19fa:	8f ed       	ldi	r24, 0xDF	; 223
    19fc:	99 e0       	ldi	r25, 0x09	; 9
    19fe:	89 d6       	rcall	.+3346   	; 0x2712 <puts>
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1a00:	80 91 0a 0d 	lds	r24, 0x0D0A	; 0x800d0a <isCaptureMode>
    1a04:	90 91 0b 0d 	lds	r25, 0x0D0B	; 0x800d0b <isCaptureMode+0x1>
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <main+0x4e>
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	68 e1       	ldi	r22, 0x18	; 24
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	8e ef       	ldi	r24, 0xFE	; 254
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1a1c:	cc e1       	ldi	r28, 0x1C	; 28
    1a1e:	dd e0       	ldi	r29, 0x0D	; 13
    1a20:	10 ea       	ldi	r17, 0xA0	; 160
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1a22:	00 e5       	ldi	r16, 0x50	; 80
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
						break;
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
						PORTC = ~(1 << (LED_MAX - 2));
    1a24:	0f 2e       	mov	r0, r31
    1a26:	ff ed       	ldi	r31, 0xDF	; 223
    1a28:	ff 2e       	mov	r15, r31
    1a2a:	f0 2d       	mov	r31, r0
    sensorInit();
	printf( "### start\r\n");
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	68 da       	rcall	.-2864   	; 0xf02 <sensorTest>
		sensorTest(1);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	65 da       	rcall	.-2870   	; 0xf02 <sensorTest>
		sensorTest(2);
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	62 da       	rcall	.-2876   	; 0xf02 <sensorTest>
				dxl_write_word( 17, P_GOAL_POSITION_L, direction ); 
			}
		}
		*/
		// getAngle();
		setDefaultTest();
    1a3e:	00 d9       	rcall	.-3584   	; 0xc40 <setDefaultTest>
		
//        sensorTest(1);
//        sensorTest(2);

//		setMode();
		if (++mainCount > 1000) {
    1a40:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <mainCount>
    1a44:	90 91 01 0d 	lds	r25, 0x0D01	; 0x800d01 <mainCount+0x1>
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	89 3e       	cpi	r24, 0xE9	; 233
    1a4c:	23 e0       	ldi	r18, 0x03	; 3
    1a4e:	92 07       	cpc	r25, r18
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <main+0x8e>
    1a52:	90 93 01 0d 	sts	0x0D01, r25	; 0x800d01 <mainCount+0x1>
    1a56:	80 93 00 0d 	sts	0x0D00, r24	; 0x800d00 <mainCount>
    1a5a:	8d c0       	rjmp	.+282    	; 0x1b76 <main+0x1a8>
			mainCount = 0;
    1a5c:	10 92 01 0d 	sts	0x0D01, r1	; 0x800d01 <mainCount+0x1>
    1a60:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <mainCount>
			if( checkSerialRead() > 0 ){
    1a64:	8b d2       	rcall	.+1302   	; 0x1f7c <checkSerialRead>
    1a66:	18 16       	cp	r1, r24
    1a68:	19 06       	cpc	r1, r25
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <main+0xa0>
    1a6c:	7f c0       	rjmp	.+254    	; 0x1b6c <main+0x19e>
				readData = getReadBuffer();
    1a6e:	d6 d2       	rcall	.+1452   	; 0x201c <getReadBuffer>
    1a70:	6c 01       	movw	r12, r24
				if( readData != NULL ){
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <main+0xaa>
    1a76:	7a c0       	rjmp	.+244    	; 0x1b6c <main+0x19e>
	//				printf( "readData=%s\n", &readData[0] );
					split( &readData[0] );
    1a78:	e3 da       	rcall	.-2618   	; 0x1040 <split>
					switch( serCmd[0] ){
    1a7a:	28 81       	ld	r18, Y
    1a7c:	39 81       	ldd	r19, Y+1	; 0x01
    1a7e:	26 30       	cpi	r18, 0x06	; 6
    1a80:	31 05       	cpc	r19, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <main+0xb8>
    1a84:	59 c0       	rjmp	.+178    	; 0x1b38 <main+0x16a>
    1a86:	a4 f4       	brge	.+40     	; 0x1ab0 <main+0xe2>
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <main+0xc2>
    1a8e:	42 c0       	rjmp	.+132    	; 0x1b14 <main+0x146>
    1a90:	44 f4       	brge	.+16     	; 0x1aa2 <main+0xd4>
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	11 f1       	breq	.+68     	; 0x1adc <main+0x10e>
    1a98:	21 30       	cpi	r18, 0x01	; 1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <main+0xd2>
    1a9e:	3c c0       	rjmp	.+120    	; 0x1b18 <main+0x14a>
    1aa0:	5d c0       	rjmp	.+186    	; 0x1b5c <main+0x18e>
    1aa2:	24 30       	cpi	r18, 0x04	; 4
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <main+0xdc>
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <main+0x162>
    1aaa:	0c f4       	brge	.+2      	; 0x1aae <main+0xe0>
    1aac:	36 c0       	rjmp	.+108    	; 0x1b1a <main+0x14c>
    1aae:	42 c0       	rjmp	.+132    	; 0x1b34 <main+0x166>
    1ab0:	29 30       	cpi	r18, 0x09	; 9
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	49 f1       	breq	.+82     	; 0x1b08 <main+0x13a>
    1ab6:	3c f4       	brge	.+14     	; 0x1ac6 <main+0xf8>
    1ab8:	27 30       	cpi	r18, 0x07	; 7
    1aba:	31 05       	cpc	r19, r1
    1abc:	b1 f0       	breq	.+44     	; 0x1aea <main+0x11c>
    1abe:	28 30       	cpi	r18, 0x08	; 8
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	e9 f0       	breq	.+58     	; 0x1afe <main+0x130>
    1ac4:	4b c0       	rjmp	.+150    	; 0x1b5c <main+0x18e>
    1ac6:	2b 30       	cpi	r18, 0x0B	; 11
    1ac8:	31 05       	cpc	r19, r1
    1aca:	09 f4       	brne	.+2      	; 0x1ace <main+0x100>
    1acc:	4a c0       	rjmp	.+148    	; 0x1b62 <main+0x194>
    1ace:	0c f4       	brge	.+2      	; 0x1ad2 <main+0x104>
    1ad0:	3c c0       	rjmp	.+120    	; 0x1b4a <main+0x17c>
    1ad2:	27 3e       	cpi	r18, 0xE7	; 231
    1ad4:	33 40       	sbci	r19, 0x03	; 3
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <main+0x10c>
    1ad8:	68 c0       	rjmp	.+208    	; 0x1baa <main+0x1dc>
    1ada:	40 c0       	rjmp	.+128    	; 0x1b5c <main+0x18e>
					case EVT_ACTION:
						ServoControl( serCmd[1] );
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae0:	d3 dd       	rcall	.-1114   	; 0x1688 <ServoControl>
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	7b da       	rcall	.-2826   	; 0xfde <sendAck>
						break;
    1ae8:	3c c0       	rjmp	.+120    	; 0x1b62 <main+0x194>
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
    1aea:	6c 81       	ldd	r22, Y+4	; 0x04
    1aec:	7d 81       	ldd	r23, Y+5	; 0x05
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	b1 dc       	rcall	.-1694   	; 0x1456 <startMotion>
						PORTC = ~(1 << (LED_MAX - 2));
    1af4:	f8 b8       	out	0x08, r15	; 8
						sendAck(1);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	71 da       	rcall	.-2846   	; 0xfde <sendAck>
						break;
    1afc:	32 c0       	rjmp	.+100    	; 0x1b62 <main+0x194>
					case EVT_STOP_MOTION:
						stopMotion();
    1afe:	dd dc       	rcall	.-1606   	; 0x14ba <stopMotion>
						sendAck(1);
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	6c da       	rcall	.-2856   	; 0xfde <sendAck>
						break;
    1b06:	2d c0       	rjmp	.+90     	; 0x1b62 <main+0x194>
					case EVT_FORCE_MOTION:
						forceMotion( serCmd[1], serCmd[2] );
    1b08:	6c 81       	ldd	r22, Y+4	; 0x04
    1b0a:	7d 81       	ldd	r23, Y+5	; 0x05
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	bd dc       	rcall	.-1670   	; 0x148c <forceMotion>
						break;
    1b12:	27 c0       	rjmp	.+78     	; 0x1b62 <main+0x194>
					case EVT_GET_NOW_ANGLE:
						getAngle();
    1b14:	dd da       	rcall	.-2630   	; 0x10d0 <getAngle>
						break;
    1b16:	25 c0       	rjmp	.+74     	; 0x1b62 <main+0x194>
					case EVT_SET_ANGLE:
						setAngle();
    1b18:	c0 da       	rcall	.-2688   	; 0x109a <setAngle>
					case EVT_GET_ACT_ANGLE:
						if( serCmd[1] >= ACT_MAX ){
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	82 33       	cpi	r24, 0x32	; 50
    1b20:	91 05       	cpc	r25, r1
    1b22:	24 f0       	brlt	.+8      	; 0x1b2c <main+0x15e>
							sendAck(0);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	5a da       	rcall	.-2892   	; 0xfde <sendAck>
    1b2a:	1b c0       	rjmp	.+54     	; 0x1b62 <main+0x194>
						}else{
							sendActAngle(serCmd[1]);
    1b2c:	4c db       	rcall	.-2408   	; 0x11c6 <sendActAngle>
    1b2e:	19 c0       	rjmp	.+50     	; 0x1b62 <main+0x194>
						}
						break;
					case EVT_GET_LOAD:
						getLoad();
    1b30:	9a db       	rcall	.-2252   	; 0x1266 <getLoad>
	//					printf( "%d\n", movingTime );
						break;
    1b32:	17 c0       	rjmp	.+46     	; 0x1b62 <main+0x194>
					case EVT_GET_VOLTAGE:
						getVoltage();
    1b34:	13 dc       	rcall	.-2010   	; 0x135c <getVoltage>
						break;
    1b36:	15 c0       	rjmp	.+42     	; 0x1b62 <main+0x194>
					case EVT_TORQUE_DISABLE:
						dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	68 e1       	ldi	r22, 0x18	; 24
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	8e ef       	ldi	r24, 0xFE	; 254
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
						break;
    1b48:	0c c0       	rjmp	.+24     	; 0x1b62 <main+0x194>
					case EVT_WATCH_DOG:
						watchDogCnt = 0;
    1b4a:	10 92 0c 0d 	sts	0x0D0C, r1	; 0x800d0c <watchDogCnt>
    1b4e:	10 92 0d 0d 	sts	0x0D0D, r1	; 0x800d0d <watchDogCnt+0x1>
    1b52:	10 92 0e 0d 	sts	0x0D0E, r1	; 0x800d0e <watchDogCnt+0x2>
    1b56:	10 92 0f 0d 	sts	0x0D0F, r1	; 0x800d0f <watchDogCnt+0x3>
						break;
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <main+0x194>
	//					printf( "finish\n");
						sendAck(999);
						isFinish = 1;
						break;
					default:
						sendAck(0);
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	3e da       	rcall	.-2948   	; 0xfde <sendAck>
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1b62:	f6 01       	movw	r30, r12
    1b64:	20 2f       	mov	r18, r16
    1b66:	11 92       	st	Z+, r1
    1b68:	2a 95       	dec	r18
    1b6a:	e9 f7       	brne	.-6      	; 0x1b66 <main+0x198>
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	21 2f       	mov	r18, r17
    1b70:	11 92       	st	Z+, r1
    1b72:	2a 95       	dec	r18
    1b74:	e9 f7       	brne	.-6      	; 0x1b70 <main+0x1a2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b76:	89 ef       	ldi	r24, 0xF9	; 249
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <main+0x1ac>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <main+0x1b2>
    1b80:	00 00       	nop
			sensorValueOld[2] = sensorValue[2];
#endif
		}
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    1b82:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <watchDogCnt>
    1b86:	90 91 0d 0d 	lds	r25, 0x0D0D	; 0x800d0d <watchDogCnt+0x1>
    1b8a:	a0 91 0e 0d 	lds	r26, 0x0D0E	; 0x800d0e <watchDogCnt+0x2>
    1b8e:	b0 91 0f 0d 	lds	r27, 0x0D0F	; 0x800d0f <watchDogCnt+0x3>
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	a1 1d       	adc	r26, r1
    1b96:	b1 1d       	adc	r27, r1
    1b98:	80 93 0c 0d 	sts	0x0D0C, r24	; 0x800d0c <watchDogCnt>
    1b9c:	90 93 0d 0d 	sts	0x0D0D, r25	; 0x800d0d <watchDogCnt+0x1>
    1ba0:	a0 93 0e 0d 	sts	0x0D0E, r26	; 0x800d0e <watchDogCnt+0x2>
    1ba4:	b0 93 0f 0d 	sts	0x0D0F, r27	; 0x800d0f <watchDogCnt+0x3>
		if (caputureCount1 == 25){
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
    1ba8:	41 cf       	rjmp	.-382    	; 0x1a2c <main+0x5e>
						break;
					case EVT_MOTION_EDIT:
						break;
					case 999:
	//					printf( "finish\n");
						sendAck(999);
    1baa:	87 ee       	ldi	r24, 0xE7	; 231
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	17 da       	rcall	.-3026   	; 0xfde <sendAck>
						break;
					default:
						sendAck(0);
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	10 dd       	rcall	.-1504   	; 0x15da <MotorControl>
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
}
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	08 95       	ret

00001bce <setGyroX>:
int getGZ();

void setGyroX(int gyroX) {
	// printf( "### gyroX %d\r\n", gyroX);
	// Get AVEREGE
	if (mGyroCountX >= 0 && mGyroCountX < AVEREGE_TIMES) {
    1bce:	20 91 c0 0d 	lds	r18, 0x0DC0	; 0x800dc0 <mGyroCountX>
    1bd2:	30 91 c1 0d 	lds	r19, 0x0DC1	; 0x800dc1 <mGyroCountX+0x1>
    1bd6:	2a 30       	cpi	r18, 0x0A	; 10
    1bd8:	31 05       	cpc	r19, r1
    1bda:	48 f5       	brcc	.+82     	; 0x1c2e <setGyroX+0x60>
		if (mGyroX == 0) {
    1bdc:	40 91 c6 0d 	lds	r20, 0x0DC6	; 0x800dc6 <mGyroX>
    1be0:	50 91 c7 0d 	lds	r21, 0x0DC7	; 0x800dc7 <mGyroX+0x1>
    1be4:	45 2b       	or	r20, r21
    1be6:	21 f4       	brne	.+8      	; 0x1bf0 <setGyroX+0x22>
			mGyroX = gyroX;
    1be8:	90 93 c7 0d 	sts	0x0DC7, r25	; 0x800dc7 <mGyroX+0x1>
    1bec:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <mGyroX>
		}
		mTempX = mTempX + gyroX;
    1bf0:	09 2e       	mov	r0, r25
    1bf2:	00 0c       	add	r0, r0
    1bf4:	aa 0b       	sbc	r26, r26
    1bf6:	bb 0b       	sbc	r27, r27
    1bf8:	40 91 d0 0d 	lds	r20, 0x0DD0	; 0x800dd0 <mTempX>
    1bfc:	50 91 d1 0d 	lds	r21, 0x0DD1	; 0x800dd1 <mTempX+0x1>
    1c00:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <mTempX+0x2>
    1c04:	70 91 d3 0d 	lds	r23, 0x0DD3	; 0x800dd3 <mTempX+0x3>
    1c08:	84 0f       	add	r24, r20
    1c0a:	95 1f       	adc	r25, r21
    1c0c:	a6 1f       	adc	r26, r22
    1c0e:	b7 1f       	adc	r27, r23
    1c10:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <mTempX>
    1c14:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <mTempX+0x1>
    1c18:	a0 93 d2 0d 	sts	0x0DD2, r26	; 0x800dd2 <mTempX+0x2>
    1c1c:	b0 93 d3 0d 	sts	0x0DD3, r27	; 0x800dd3 <mTempX+0x3>
		mGyroCountX++;
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	30 93 c1 0d 	sts	0x0DC1, r19	; 0x800dc1 <mGyroCountX+0x1>
    1c28:	20 93 c0 0d 	sts	0x0DC0, r18	; 0x800dc0 <mGyroCountX>
    1c2c:	08 95       	ret
	} else if (mGyroCountX >= AVEREGE_TIMES)  {
    1c2e:	2a 30       	cpi	r18, 0x0A	; 10
    1c30:	31 05       	cpc	r19, r1
    1c32:	f4 f0       	brlt	.+60     	; 0x1c70 <setGyroX+0xa2>
		mGyroX = mTempX / AVEREGE_TIMES;
    1c34:	60 91 d0 0d 	lds	r22, 0x0DD0	; 0x800dd0 <mTempX>
    1c38:	70 91 d1 0d 	lds	r23, 0x0DD1	; 0x800dd1 <mTempX+0x1>
    1c3c:	80 91 d2 0d 	lds	r24, 0x0DD2	; 0x800dd2 <mTempX+0x2>
    1c40:	90 91 d3 0d 	lds	r25, 0x0DD3	; 0x800dd3 <mTempX+0x3>
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	0b d2       	rcall	.+1046   	; 0x2064 <__divmodsi4>
    1c4e:	30 93 c7 0d 	sts	0x0DC7, r19	; 0x800dc7 <mGyroX+0x1>
    1c52:	20 93 c6 0d 	sts	0x0DC6, r18	; 0x800dc6 <mGyroX>
		// printf( "### mGyroX %d\r\n", mGyroX);
		mGyroCountX = 0;
    1c56:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <mGyroCountX+0x1>
    1c5a:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <mGyroCountX>
		mTempX = 0;
    1c5e:	10 92 d0 0d 	sts	0x0DD0, r1	; 0x800dd0 <mTempX>
    1c62:	10 92 d1 0d 	sts	0x0DD1, r1	; 0x800dd1 <mTempX+0x1>
    1c66:	10 92 d2 0d 	sts	0x0DD2, r1	; 0x800dd2 <mTempX+0x2>
    1c6a:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <mTempX+0x3>
    1c6e:	08 95       	ret
		
		// float gravityX = getGX();
		
	} else {
		printf( "### Oops!\r\n");
    1c70:	88 e3       	ldi	r24, 0x38	; 56
    1c72:	9a e0       	ldi	r25, 0x0A	; 10
    1c74:	4e d5       	rcall	.+2716   	; 0x2712 <puts>
		mGyroCountX = 0;
    1c76:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <mGyroCountX+0x1>
    1c7a:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <mGyroCountX>
		mTempX = 0;
    1c7e:	10 92 d0 0d 	sts	0x0DD0, r1	; 0x800dd0 <mTempX>
    1c82:	10 92 d1 0d 	sts	0x0DD1, r1	; 0x800dd1 <mTempX+0x1>
    1c86:	10 92 d2 0d 	sts	0x0DD2, r1	; 0x800dd2 <mTempX+0x2>
    1c8a:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <mTempX+0x3>
    1c8e:	08 95       	ret

00001c90 <setGyroY>:
}

void setGyroY(int gyroY) {
	// printf( "### gyroY %d\r\n", gyroY);
	// Get AVEREGE
	if (mGyroCountY >= 0 && mGyroCountY < AVEREGE_TIMES) {
    1c90:	20 91 be 0d 	lds	r18, 0x0DBE	; 0x800dbe <mGyroCountY>
    1c94:	30 91 bf 0d 	lds	r19, 0x0DBF	; 0x800dbf <mGyroCountY+0x1>
    1c98:	2a 30       	cpi	r18, 0x0A	; 10
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	48 f5       	brcc	.+82     	; 0x1cf0 <setGyroY+0x60>
		if (mGyroY == 0) {
    1c9e:	40 91 c4 0d 	lds	r20, 0x0DC4	; 0x800dc4 <mGyroY>
    1ca2:	50 91 c5 0d 	lds	r21, 0x0DC5	; 0x800dc5 <mGyroY+0x1>
    1ca6:	45 2b       	or	r20, r21
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <setGyroY+0x22>
			mGyroY = gyroY;
    1caa:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <mGyroY+0x1>
    1cae:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <mGyroY>
		}
		mTempY = mTempY + gyroY;
    1cb2:	09 2e       	mov	r0, r25
    1cb4:	00 0c       	add	r0, r0
    1cb6:	aa 0b       	sbc	r26, r26
    1cb8:	bb 0b       	sbc	r27, r27
    1cba:	40 91 cc 0d 	lds	r20, 0x0DCC	; 0x800dcc <mTempY>
    1cbe:	50 91 cd 0d 	lds	r21, 0x0DCD	; 0x800dcd <mTempY+0x1>
    1cc2:	60 91 ce 0d 	lds	r22, 0x0DCE	; 0x800dce <mTempY+0x2>
    1cc6:	70 91 cf 0d 	lds	r23, 0x0DCF	; 0x800dcf <mTempY+0x3>
    1cca:	84 0f       	add	r24, r20
    1ccc:	95 1f       	adc	r25, r21
    1cce:	a6 1f       	adc	r26, r22
    1cd0:	b7 1f       	adc	r27, r23
    1cd2:	80 93 cc 0d 	sts	0x0DCC, r24	; 0x800dcc <mTempY>
    1cd6:	90 93 cd 0d 	sts	0x0DCD, r25	; 0x800dcd <mTempY+0x1>
    1cda:	a0 93 ce 0d 	sts	0x0DCE, r26	; 0x800dce <mTempY+0x2>
    1cde:	b0 93 cf 0d 	sts	0x0DCF, r27	; 0x800dcf <mTempY+0x3>
		mGyroCountY++;
    1ce2:	2f 5f       	subi	r18, 0xFF	; 255
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	30 93 bf 0d 	sts	0x0DBF, r19	; 0x800dbf <mGyroCountY+0x1>
    1cea:	20 93 be 0d 	sts	0x0DBE, r18	; 0x800dbe <mGyroCountY>
    1cee:	08 95       	ret
		} else if (mGyroCountY >= AVEREGE_TIMES)  {
    1cf0:	2a 30       	cpi	r18, 0x0A	; 10
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	f4 f0       	brlt	.+60     	; 0x1d32 <setGyroY+0xa2>
		mGyroY = mTempY / AVEREGE_TIMES;
    1cf6:	60 91 cc 0d 	lds	r22, 0x0DCC	; 0x800dcc <mTempY>
    1cfa:	70 91 cd 0d 	lds	r23, 0x0DCD	; 0x800dcd <mTempY+0x1>
    1cfe:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <mTempY+0x2>
    1d02:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <mTempY+0x3>
    1d06:	2a e0       	ldi	r18, 0x0A	; 10
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	aa d1       	rcall	.+852    	; 0x2064 <__divmodsi4>
    1d10:	30 93 c5 0d 	sts	0x0DC5, r19	; 0x800dc5 <mGyroY+0x1>
    1d14:	20 93 c4 0d 	sts	0x0DC4, r18	; 0x800dc4 <mGyroY>
		// printf( "### mGyroY %d\r\n", mGyroY);
		mGyroCountY = 0;
    1d18:	10 92 bf 0d 	sts	0x0DBF, r1	; 0x800dbf <mGyroCountY+0x1>
    1d1c:	10 92 be 0d 	sts	0x0DBE, r1	; 0x800dbe <mGyroCountY>
		mTempY = 0;
    1d20:	10 92 cc 0d 	sts	0x0DCC, r1	; 0x800dcc <mTempY>
    1d24:	10 92 cd 0d 	sts	0x0DCD, r1	; 0x800dcd <mTempY+0x1>
    1d28:	10 92 ce 0d 	sts	0x0DCE, r1	; 0x800dce <mTempY+0x2>
    1d2c:	10 92 cf 0d 	sts	0x0DCF, r1	; 0x800dcf <mTempY+0x3>
    1d30:	08 95       	ret
		
		// float gravityY = getGY();
		
		} else {
		printf( "### Oops!\r\n");
    1d32:	88 e3       	ldi	r24, 0x38	; 56
    1d34:	9a e0       	ldi	r25, 0x0A	; 10
    1d36:	ed d4       	rcall	.+2522   	; 0x2712 <puts>
		mGyroCountY = 0;
    1d38:	10 92 bf 0d 	sts	0x0DBF, r1	; 0x800dbf <mGyroCountY+0x1>
    1d3c:	10 92 be 0d 	sts	0x0DBE, r1	; 0x800dbe <mGyroCountY>
		mTempY = 0;
    1d40:	10 92 cc 0d 	sts	0x0DCC, r1	; 0x800dcc <mTempY>
    1d44:	10 92 cd 0d 	sts	0x0DCD, r1	; 0x800dcd <mTempY+0x1>
    1d48:	10 92 ce 0d 	sts	0x0DCE, r1	; 0x800dce <mTempY+0x2>
    1d4c:	10 92 cf 0d 	sts	0x0DCF, r1	; 0x800dcf <mTempY+0x3>
    1d50:	08 95       	ret

00001d52 <setGyroZ>:
}

void setGyroZ(int gyroZ) {
	// printf( "### gyroZ %d\r\n", gyroZ);
	// Get AVEREGE
	if (mGyroCountZ >= 0 && mGyroCountZ < AVEREGE_TIMES) {
    1d52:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <mGyroCountZ>
    1d56:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <mGyroCountZ+0x1>
    1d5a:	2a 30       	cpi	r18, 0x0A	; 10
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	48 f5       	brcc	.+82     	; 0x1db2 <setGyroZ+0x60>
		if (mGyroZ == 0) {
    1d60:	40 91 c2 0d 	lds	r20, 0x0DC2	; 0x800dc2 <mGyroZ>
    1d64:	50 91 c3 0d 	lds	r21, 0x0DC3	; 0x800dc3 <mGyroZ+0x1>
    1d68:	45 2b       	or	r20, r21
    1d6a:	21 f4       	brne	.+8      	; 0x1d74 <setGyroZ+0x22>
			mGyroZ = gyroZ;
    1d6c:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <mGyroZ+0x1>
    1d70:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <mGyroZ>
		}
		mTempZ = mTempZ + gyroZ;
    1d74:	09 2e       	mov	r0, r25
    1d76:	00 0c       	add	r0, r0
    1d78:	aa 0b       	sbc	r26, r26
    1d7a:	bb 0b       	sbc	r27, r27
    1d7c:	40 91 c8 0d 	lds	r20, 0x0DC8	; 0x800dc8 <mTempZ>
    1d80:	50 91 c9 0d 	lds	r21, 0x0DC9	; 0x800dc9 <mTempZ+0x1>
    1d84:	60 91 ca 0d 	lds	r22, 0x0DCA	; 0x800dca <mTempZ+0x2>
    1d88:	70 91 cb 0d 	lds	r23, 0x0DCB	; 0x800dcb <mTempZ+0x3>
    1d8c:	84 0f       	add	r24, r20
    1d8e:	95 1f       	adc	r25, r21
    1d90:	a6 1f       	adc	r26, r22
    1d92:	b7 1f       	adc	r27, r23
    1d94:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <mTempZ>
    1d98:	90 93 c9 0d 	sts	0x0DC9, r25	; 0x800dc9 <mTempZ+0x1>
    1d9c:	a0 93 ca 0d 	sts	0x0DCA, r26	; 0x800dca <mTempZ+0x2>
    1da0:	b0 93 cb 0d 	sts	0x0DCB, r27	; 0x800dcb <mTempZ+0x3>
		mGyroCountZ++;
    1da4:	2f 5f       	subi	r18, 0xFF	; 255
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	30 93 bd 0d 	sts	0x0DBD, r19	; 0x800dbd <mGyroCountZ+0x1>
    1dac:	20 93 bc 0d 	sts	0x0DBC, r18	; 0x800dbc <mGyroCountZ>
    1db0:	08 95       	ret
	} else if (mGyroCountZ >= AVEREGE_TIMES)  {
    1db2:	2a 30       	cpi	r18, 0x0A	; 10
    1db4:	31 05       	cpc	r19, r1
    1db6:	f4 f0       	brlt	.+60     	; 0x1df4 <setGyroZ+0xa2>
		mGyroZ = mTempZ / AVEREGE_TIMES;
    1db8:	60 91 c8 0d 	lds	r22, 0x0DC8	; 0x800dc8 <mTempZ>
    1dbc:	70 91 c9 0d 	lds	r23, 0x0DC9	; 0x800dc9 <mTempZ+0x1>
    1dc0:	80 91 ca 0d 	lds	r24, 0x0DCA	; 0x800dca <mTempZ+0x2>
    1dc4:	90 91 cb 0d 	lds	r25, 0x0DCB	; 0x800dcb <mTempZ+0x3>
    1dc8:	2a e0       	ldi	r18, 0x0A	; 10
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	49 d1       	rcall	.+658    	; 0x2064 <__divmodsi4>
    1dd2:	30 93 c3 0d 	sts	0x0DC3, r19	; 0x800dc3 <mGyroZ+0x1>
    1dd6:	20 93 c2 0d 	sts	0x0DC2, r18	; 0x800dc2 <mGyroZ>
		// printf( "### mGyroZ %d\r\n", mGyroZ);
		mGyroCountZ = 0;
    1dda:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <mGyroCountZ+0x1>
    1dde:	10 92 bc 0d 	sts	0x0DBC, r1	; 0x800dbc <mGyroCountZ>
		mTempZ = 0;
    1de2:	10 92 c8 0d 	sts	0x0DC8, r1	; 0x800dc8 <mTempZ>
    1de6:	10 92 c9 0d 	sts	0x0DC9, r1	; 0x800dc9 <mTempZ+0x1>
    1dea:	10 92 ca 0d 	sts	0x0DCA, r1	; 0x800dca <mTempZ+0x2>
    1dee:	10 92 cb 0d 	sts	0x0DCB, r1	; 0x800dcb <mTempZ+0x3>
    1df2:	08 95       	ret
		
		// float gravityZ = getGZ();
		
	} else {
		printf( "### Oops!\r\n");
    1df4:	88 e3       	ldi	r24, 0x38	; 56
    1df6:	9a e0       	ldi	r25, 0x0A	; 10
    1df8:	8c d4       	rcall	.+2328   	; 0x2712 <puts>
		mGyroCountZ = 0;
    1dfa:	10 92 bd 0d 	sts	0x0DBD, r1	; 0x800dbd <mGyroCountZ+0x1>
    1dfe:	10 92 bc 0d 	sts	0x0DBC, r1	; 0x800dbc <mGyroCountZ>
		mTempZ = 0;
    1e02:	10 92 c8 0d 	sts	0x0DC8, r1	; 0x800dc8 <mTempZ>
    1e06:	10 92 c9 0d 	sts	0x0DC9, r1	; 0x800dc9 <mTempZ+0x1>
    1e0a:	10 92 ca 0d 	sts	0x0DCA, r1	; 0x800dca <mTempZ+0x2>
    1e0e:	10 92 cb 0d 	sts	0x0DCB, r1	; 0x800dcb <mTempZ+0x3>
    1e12:	08 95       	ret

00001e14 <getGX>:
	}
}

int getGX() {
    1e14:	4f 92       	push	r4
    1e16:	5f 92       	push	r5
    1e18:	6f 92       	push	r6
    1e1a:	7f 92       	push	r7
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
    1e34:	c0 90 38 07 	lds	r12, 0x0738	; 0x800738 <GYRO_X_MAX>
    1e38:	d0 90 39 07 	lds	r13, 0x0739	; 0x800739 <GYRO_X_MAX+0x1>
    1e3c:	e0 90 3a 07 	lds	r14, 0x073A	; 0x80073a <GYRO_X_MAX+0x2>
    1e40:	f0 90 3b 07 	lds	r15, 0x073B	; 0x80073b <GYRO_X_MAX+0x3>
    1e44:	20 91 3c 07 	lds	r18, 0x073C	; 0x80073c <GYRO_X_MIN>
    1e48:	30 91 3d 07 	lds	r19, 0x073D	; 0x80073d <GYRO_X_MIN+0x1>
    1e4c:	40 91 3e 07 	lds	r20, 0x073E	; 0x80073e <GYRO_X_MIN+0x2>
    1e50:	50 91 3f 07 	lds	r21, 0x073F	; 0x80073f <GYRO_X_MIN+0x3>
    1e54:	c7 01       	movw	r24, r14
    1e56:	b6 01       	movw	r22, r12
    1e58:	58 d1       	rcall	.+688    	; 0x210a <__addsf3>
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0a d3       	rcall	.+1556   	; 0x2478 <__mulsf3>
    1e64:	4b 01       	movw	r8, r22
    1e66:	5c 01       	movw	r10, r24
	float gravityX = (mGyroX - gyroXMid)/(GYRO_X_MAX - gyroXMid);
    1e68:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <mGyroX>
    1e6c:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <mGyroX+0x1>
    1e70:	bc 01       	movw	r22, r24
    1e72:	99 0f       	add	r25, r25
    1e74:	88 0b       	sbc	r24, r24
    1e76:	99 0b       	sbc	r25, r25
    1e78:	4b d2       	rcall	.+1174   	; 0x2310 <__floatsisf>
    1e7a:	a5 01       	movw	r20, r10
    1e7c:	94 01       	movw	r18, r8
    1e7e:	44 d1       	rcall	.+648    	; 0x2108 <__subsf3>
    1e80:	2b 01       	movw	r4, r22
    1e82:	3c 01       	movw	r6, r24
    1e84:	a5 01       	movw	r20, r10
    1e86:	94 01       	movw	r18, r8
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b6 01       	movw	r22, r12
    1e8c:	3d d1       	rcall	.+634    	; 0x2108 <__subsf3>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	c3 01       	movw	r24, r6
    1e94:	b2 01       	movw	r22, r4
    1e96:	a1 d1       	rcall	.+834    	; 0x21da <__divsf3>
    1e98:	66 2e       	mov	r6, r22
    1e9a:	77 2e       	mov	r7, r23
    1e9c:	08 2f       	mov	r16, r24
    1e9e:	19 2f       	mov	r17, r25
	char *sign;
	if (signbit(gravityX)) {
    1ea0:	97 fd       	sbrc	r25, 7
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <getGX+0x96>
		sign = "-";
	} else {
		sign = "+";
    1ea4:	c5 e4       	ldi	r28, 0x45	; 69
    1ea6:	da e0       	ldi	r29, 0x0A	; 10
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <getGX+0x9a>
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
	float gravityX = (mGyroX - gyroXMid)/(GYRO_X_MAX - gyroXMid);
	char *sign;
	if (signbit(gravityX)) {
		sign = "-";
    1eaa:	c3 e4       	ldi	r28, 0x43	; 67
    1eac:	da e0       	ldi	r29, 0x0A	; 10
	} else {
		sign = "+";
	}
	printf( "### getGX %s%d.%d%dG\r\n", sign, abs((int)(gravityX)), abs(((int)(gravityX * 10) % 10)), abs(((int)(gravityX * 100) % 10)));
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	48 ec       	ldi	r20, 0xC8	; 200
    1eb4:	52 e4       	ldi	r21, 0x42	; 66
    1eb6:	66 2d       	mov	r22, r6
    1eb8:	77 2d       	mov	r23, r7
    1eba:	80 2f       	mov	r24, r16
    1ebc:	91 2f       	mov	r25, r17
    1ebe:	dc d2       	rcall	.+1464   	; 0x2478 <__mulsf3>
    1ec0:	f4 d1       	rcall	.+1000   	; 0x22aa <__fixsfsi>
    1ec2:	4b 01       	movw	r8, r22
    1ec4:	5c 01       	movw	r10, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	6a e0       	ldi	r22, 0x0A	; 10
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	b8 d0       	rcall	.+368    	; 0x203e <__divmodhi4>
    1ece:	9c 01       	movw	r18, r24
    1ed0:	99 23       	and	r25, r25
    1ed2:	24 f4       	brge	.+8      	; 0x1edc <getGX+0xc8>
    1ed4:	22 27       	eor	r18, r18
    1ed6:	33 27       	eor	r19, r19
    1ed8:	28 1b       	sub	r18, r24
    1eda:	39 0b       	sbc	r19, r25
    1edc:	3f 93       	push	r19
    1ede:	2f 93       	push	r18
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	66 2d       	mov	r22, r6
    1eea:	77 2d       	mov	r23, r7
    1eec:	80 2f       	mov	r24, r16
    1eee:	91 2f       	mov	r25, r17
    1ef0:	c3 d2       	rcall	.+1414   	; 0x2478 <__mulsf3>
    1ef2:	db d1       	rcall	.+950    	; 0x22aa <__fixsfsi>
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	6a e0       	ldi	r22, 0x0A	; 10
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	a1 d0       	rcall	.+322    	; 0x203e <__divmodhi4>
    1efc:	9c 01       	movw	r18, r24
    1efe:	99 23       	and	r25, r25
    1f00:	24 f4       	brge	.+8      	; 0x1f0a <getGX+0xf6>
    1f02:	22 27       	eor	r18, r18
    1f04:	33 27       	eor	r19, r19
    1f06:	28 1b       	sub	r18, r24
    1f08:	39 0b       	sbc	r19, r25
    1f0a:	3f 93       	push	r19
    1f0c:	2f 93       	push	r18
    1f0e:	66 2d       	mov	r22, r6
    1f10:	77 2d       	mov	r23, r7
    1f12:	80 2f       	mov	r24, r16
    1f14:	91 2f       	mov	r25, r17
    1f16:	c9 d1       	rcall	.+914    	; 0x22aa <__fixsfsi>
    1f18:	9b 01       	movw	r18, r22
    1f1a:	77 23       	and	r23, r23
    1f1c:	24 f4       	brge	.+8      	; 0x1f26 <getGX+0x112>
    1f1e:	22 27       	eor	r18, r18
    1f20:	33 27       	eor	r19, r19
    1f22:	26 1b       	sub	r18, r22
    1f24:	37 0b       	sbc	r19, r23
    1f26:	3f 93       	push	r19
    1f28:	2f 93       	push	r18
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	87 e4       	ldi	r24, 0x47	; 71
    1f30:	9a e0       	ldi	r25, 0x0A	; 10
    1f32:	9f 93       	push	r25
    1f34:	8f 93       	push	r24
    1f36:	da d3       	rcall	.+1972   	; 0x26ec <printf>

	// float変数を引き渡すと引き渡し先で数値がおかしくなるためint型で提供
	return (int)(gravityX*100);
    1f38:	8d b7       	in	r24, 0x3d	; 61
    1f3a:	9e b7       	in	r25, 0x3e	; 62
    1f3c:	0a 96       	adiw	r24, 0x0a	; 10
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	9e bf       	out	0x3e, r25	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	8d bf       	out	0x3d, r24	; 61
}
    1f48:	c4 01       	movw	r24, r8
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	ff 90       	pop	r15
    1f54:	ef 90       	pop	r14
    1f56:	df 90       	pop	r13
    1f58:	cf 90       	pop	r12
    1f5a:	bf 90       	pop	r11
    1f5c:	af 90       	pop	r10
    1f5e:	9f 90       	pop	r9
    1f60:	8f 90       	pop	r8
    1f62:	7f 90       	pop	r7
    1f64:	6f 90       	pop	r6
    1f66:	5f 90       	pop	r5
    1f68:	4f 90       	pop	r4
    1f6a:	08 95       	ret

00001f6c <initSerial>:
			}
		}
		//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	71 ee       	ldi	r23, 0xE1	; 225
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 ed 05 	call	0xbda	; 0xbda <serial_initialize>
    1f78:	78 94       	sei
    1f7a:	08 95       	ret

00001f7c <checkSerialRead>:
    1f7c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <serial_get_qstate>
    1f80:	18 16       	cp	r1, r24
    1f82:	19 06       	cpc	r1, r25
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <checkSerialRead+0xc>
    1f86:	3e c0       	rjmp	.+124    	; 0x2004 <checkSerialRead+0x88>
    1f88:	80 91 32 0e 	lds	r24, 0x0E32	; 0x800e32 <__iob>
    1f8c:	90 91 33 0e 	lds	r25, 0x0E33	; 0x800e33 <__iob+0x1>
    1f90:	6f d3       	rcall	.+1758   	; 0x2670 <fgetc>
    1f92:	8a 30       	cpi	r24, 0x0A	; 10
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <checkSerialRead+0x1e>
    1f96:	8d 30       	cpi	r24, 0x0D	; 13
    1f98:	91 f4       	brne	.+36     	; 0x1fbe <checkSerialRead+0x42>
    1f9a:	80 91 24 0e 	lds	r24, 0x0E24	; 0x800e24 <buffCnt>
    1f9e:	90 91 25 0e 	lds	r25, 0x0E25	; 0x800e25 <buffCnt+0x1>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	19 06       	cpc	r1, r25
    1fa6:	8c f5       	brge	.+98     	; 0x200a <checkSerialRead+0x8e>
    1fa8:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <buffCnt+0x1>
    1fac:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <buffCnt>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	90 93 27 0e 	sts	0x0E27, r25	; 0x800e27 <isRead+0x1>
    1fb8:	80 93 26 0e 	sts	0x0E26, r24	; 0x800e26 <isRead>
    1fbc:	08 95       	ret
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f1       	breq	.+78     	; 0x2010 <checkSerialRead+0x94>
    1fc2:	20 91 24 0e 	lds	r18, 0x0E24	; 0x800e24 <buffCnt>
    1fc6:	30 91 25 0e 	lds	r19, 0x0E25	; 0x800e25 <buffCnt+0x1>
    1fca:	a9 01       	movw	r20, r18
    1fcc:	4f 5f       	subi	r20, 0xFF	; 255
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	50 93 25 0e 	sts	0x0E25, r21	; 0x800e25 <buffCnt+0x1>
    1fd4:	40 93 24 0e 	sts	0x0E24, r20	; 0x800e24 <buffCnt>
    1fd8:	f9 01       	movw	r30, r18
    1fda:	ec 52       	subi	r30, 0x2C	; 44
    1fdc:	f2 4f       	sbci	r31, 0xF2	; 242
    1fde:	80 83       	st	Z, r24
    1fe0:	80 91 24 0e 	lds	r24, 0x0E24	; 0x800e24 <buffCnt>
    1fe4:	90 91 25 0e 	lds	r25, 0x0E25	; 0x800e25 <buffCnt+0x1>
    1fe8:	8f 34       	cpi	r24, 0x4F	; 79
    1fea:	91 05       	cpc	r25, r1
    1fec:	a4 f0       	brlt	.+40     	; 0x2016 <checkSerialRead+0x9a>
    1fee:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <buffCnt+0x1>
    1ff2:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <buffCnt>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	90 93 27 0e 	sts	0x0E27, r25	; 0x800e27 <isRead+0x1>
    1ffe:	80 93 26 0e 	sts	0x0E26, r24	; 0x800e26 <isRead>
    2002:	08 95       	ret
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	08 95       	ret
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	08 95       	ret
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	08 95       	ret
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	08 95       	ret

0000201c <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
    201c:	80 91 26 0e 	lds	r24, 0x0E26	; 0x800e26 <isRead>
    2020:	90 91 27 0e 	lds	r25, 0x0E27	; 0x800e27 <isRead+0x1>
    2024:	18 16       	cp	r1, r24
    2026:	19 06       	cpc	r1, r25
    2028:	3c f4       	brge	.+14     	; 0x2038 <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
    202a:	10 92 27 0e 	sts	0x0E27, r1	; 0x800e27 <isRead+0x1>
    202e:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <isRead>
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
    2032:	84 ed       	ldi	r24, 0xD4	; 212
    2034:	9d e0       	ldi	r25, 0x0D	; 13
    2036:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
    203c:	08 95       	ret

0000203e <__divmodhi4>:
    203e:	97 fb       	bst	r25, 7
    2040:	07 2e       	mov	r0, r23
    2042:	16 f4       	brtc	.+4      	; 0x2048 <__divmodhi4+0xa>
    2044:	00 94       	com	r0
    2046:	06 d0       	rcall	.+12     	; 0x2054 <__divmodhi4_neg1>
    2048:	77 fd       	sbrc	r23, 7
    204a:	08 d0       	rcall	.+16     	; 0x205c <__divmodhi4_neg2>
    204c:	27 d0       	rcall	.+78     	; 0x209c <__udivmodhi4>
    204e:	07 fc       	sbrc	r0, 7
    2050:	05 d0       	rcall	.+10     	; 0x205c <__divmodhi4_neg2>
    2052:	3e f4       	brtc	.+14     	; 0x2062 <__divmodhi4_exit>

00002054 <__divmodhi4_neg1>:
    2054:	90 95       	com	r25
    2056:	81 95       	neg	r24
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__divmodhi4_neg2>:
    205c:	70 95       	com	r23
    205e:	61 95       	neg	r22
    2060:	7f 4f       	sbci	r23, 0xFF	; 255

00002062 <__divmodhi4_exit>:
    2062:	08 95       	ret

00002064 <__divmodsi4>:
    2064:	05 2e       	mov	r0, r21
    2066:	97 fb       	bst	r25, 7
    2068:	16 f4       	brtc	.+4      	; 0x206e <__divmodsi4+0xa>
    206a:	00 94       	com	r0
    206c:	0f d0       	rcall	.+30     	; 0x208c <__negsi2>
    206e:	57 fd       	sbrc	r21, 7
    2070:	05 d0       	rcall	.+10     	; 0x207c <__divmodsi4_neg2>
    2072:	28 d0       	rcall	.+80     	; 0x20c4 <__udivmodsi4>
    2074:	07 fc       	sbrc	r0, 7
    2076:	02 d0       	rcall	.+4      	; 0x207c <__divmodsi4_neg2>
    2078:	46 f4       	brtc	.+16     	; 0x208a <__divmodsi4_exit>
    207a:	08 c0       	rjmp	.+16     	; 0x208c <__negsi2>

0000207c <__divmodsi4_neg2>:
    207c:	50 95       	com	r21
    207e:	40 95       	com	r20
    2080:	30 95       	com	r19
    2082:	21 95       	neg	r18
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	4f 4f       	sbci	r20, 0xFF	; 255
    2088:	5f 4f       	sbci	r21, 0xFF	; 255

0000208a <__divmodsi4_exit>:
    208a:	08 95       	ret

0000208c <__negsi2>:
    208c:	90 95       	com	r25
    208e:	80 95       	com	r24
    2090:	70 95       	com	r23
    2092:	61 95       	neg	r22
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	8f 4f       	sbci	r24, 0xFF	; 255
    2098:	9f 4f       	sbci	r25, 0xFF	; 255
    209a:	08 95       	ret

0000209c <__udivmodhi4>:
    209c:	aa 1b       	sub	r26, r26
    209e:	bb 1b       	sub	r27, r27
    20a0:	51 e1       	ldi	r21, 0x11	; 17
    20a2:	07 c0       	rjmp	.+14     	; 0x20b2 <__udivmodhi4_ep>

000020a4 <__udivmodhi4_loop>:
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	a6 17       	cp	r26, r22
    20aa:	b7 07       	cpc	r27, r23
    20ac:	10 f0       	brcs	.+4      	; 0x20b2 <__udivmodhi4_ep>
    20ae:	a6 1b       	sub	r26, r22
    20b0:	b7 0b       	sbc	r27, r23

000020b2 <__udivmodhi4_ep>:
    20b2:	88 1f       	adc	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	5a 95       	dec	r21
    20b8:	a9 f7       	brne	.-22     	; 0x20a4 <__udivmodhi4_loop>
    20ba:	80 95       	com	r24
    20bc:	90 95       	com	r25
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	08 95       	ret

000020c4 <__udivmodsi4>:
    20c4:	a1 e2       	ldi	r26, 0x21	; 33
    20c6:	1a 2e       	mov	r1, r26
    20c8:	aa 1b       	sub	r26, r26
    20ca:	bb 1b       	sub	r27, r27
    20cc:	fd 01       	movw	r30, r26
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <__udivmodsi4_ep>

000020d0 <__udivmodsi4_loop>:
    20d0:	aa 1f       	adc	r26, r26
    20d2:	bb 1f       	adc	r27, r27
    20d4:	ee 1f       	adc	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	a2 17       	cp	r26, r18
    20da:	b3 07       	cpc	r27, r19
    20dc:	e4 07       	cpc	r30, r20
    20de:	f5 07       	cpc	r31, r21
    20e0:	20 f0       	brcs	.+8      	; 0x20ea <__udivmodsi4_ep>
    20e2:	a2 1b       	sub	r26, r18
    20e4:	b3 0b       	sbc	r27, r19
    20e6:	e4 0b       	sbc	r30, r20
    20e8:	f5 0b       	sbc	r31, r21

000020ea <__udivmodsi4_ep>:
    20ea:	66 1f       	adc	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	88 1f       	adc	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	1a 94       	dec	r1
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <__udivmodsi4_loop>
    20f6:	60 95       	com	r22
    20f8:	70 95       	com	r23
    20fa:	80 95       	com	r24
    20fc:	90 95       	com	r25
    20fe:	9b 01       	movw	r18, r22
    2100:	ac 01       	movw	r20, r24
    2102:	bd 01       	movw	r22, r26
    2104:	cf 01       	movw	r24, r30
    2106:	08 95       	ret

00002108 <__subsf3>:
    2108:	50 58       	subi	r21, 0x80	; 128

0000210a <__addsf3>:
    210a:	bb 27       	eor	r27, r27
    210c:	aa 27       	eor	r26, r26
    210e:	0e d0       	rcall	.+28     	; 0x212c <__addsf3x>
    2110:	75 c1       	rjmp	.+746    	; 0x23fc <__fp_round>
    2112:	66 d1       	rcall	.+716    	; 0x23e0 <__fp_pscA>
    2114:	30 f0       	brcs	.+12     	; 0x2122 <__addsf3+0x18>
    2116:	6b d1       	rcall	.+726    	; 0x23ee <__fp_pscB>
    2118:	20 f0       	brcs	.+8      	; 0x2122 <__addsf3+0x18>
    211a:	31 f4       	brne	.+12     	; 0x2128 <__addsf3+0x1e>
    211c:	9f 3f       	cpi	r25, 0xFF	; 255
    211e:	11 f4       	brne	.+4      	; 0x2124 <__addsf3+0x1a>
    2120:	1e f4       	brtc	.+6      	; 0x2128 <__addsf3+0x1e>
    2122:	5b c1       	rjmp	.+694    	; 0x23da <__fp_nan>
    2124:	0e f4       	brtc	.+2      	; 0x2128 <__addsf3+0x1e>
    2126:	e0 95       	com	r30
    2128:	e7 fb       	bst	r30, 7
    212a:	51 c1       	rjmp	.+674    	; 0x23ce <__fp_inf>

0000212c <__addsf3x>:
    212c:	e9 2f       	mov	r30, r25
    212e:	77 d1       	rcall	.+750    	; 0x241e <__fp_split3>
    2130:	80 f3       	brcs	.-32     	; 0x2112 <__addsf3+0x8>
    2132:	ba 17       	cp	r27, r26
    2134:	62 07       	cpc	r22, r18
    2136:	73 07       	cpc	r23, r19
    2138:	84 07       	cpc	r24, r20
    213a:	95 07       	cpc	r25, r21
    213c:	18 f0       	brcs	.+6      	; 0x2144 <__addsf3x+0x18>
    213e:	71 f4       	brne	.+28     	; 0x215c <__addsf3x+0x30>
    2140:	9e f5       	brtc	.+102    	; 0x21a8 <__addsf3x+0x7c>
    2142:	8f c1       	rjmp	.+798    	; 0x2462 <__fp_zero>
    2144:	0e f4       	brtc	.+2      	; 0x2148 <__addsf3x+0x1c>
    2146:	e0 95       	com	r30
    2148:	0b 2e       	mov	r0, r27
    214a:	ba 2f       	mov	r27, r26
    214c:	a0 2d       	mov	r26, r0
    214e:	0b 01       	movw	r0, r22
    2150:	b9 01       	movw	r22, r18
    2152:	90 01       	movw	r18, r0
    2154:	0c 01       	movw	r0, r24
    2156:	ca 01       	movw	r24, r20
    2158:	a0 01       	movw	r20, r0
    215a:	11 24       	eor	r1, r1
    215c:	ff 27       	eor	r31, r31
    215e:	59 1b       	sub	r21, r25
    2160:	99 f0       	breq	.+38     	; 0x2188 <__addsf3x+0x5c>
    2162:	59 3f       	cpi	r21, 0xF9	; 249
    2164:	50 f4       	brcc	.+20     	; 0x217a <__addsf3x+0x4e>
    2166:	50 3e       	cpi	r21, 0xE0	; 224
    2168:	68 f1       	brcs	.+90     	; 0x21c4 <__addsf3x+0x98>
    216a:	1a 16       	cp	r1, r26
    216c:	f0 40       	sbci	r31, 0x00	; 0
    216e:	a2 2f       	mov	r26, r18
    2170:	23 2f       	mov	r18, r19
    2172:	34 2f       	mov	r19, r20
    2174:	44 27       	eor	r20, r20
    2176:	58 5f       	subi	r21, 0xF8	; 248
    2178:	f3 cf       	rjmp	.-26     	; 0x2160 <__addsf3x+0x34>
    217a:	46 95       	lsr	r20
    217c:	37 95       	ror	r19
    217e:	27 95       	ror	r18
    2180:	a7 95       	ror	r26
    2182:	f0 40       	sbci	r31, 0x00	; 0
    2184:	53 95       	inc	r21
    2186:	c9 f7       	brne	.-14     	; 0x217a <__addsf3x+0x4e>
    2188:	7e f4       	brtc	.+30     	; 0x21a8 <__addsf3x+0x7c>
    218a:	1f 16       	cp	r1, r31
    218c:	ba 0b       	sbc	r27, r26
    218e:	62 0b       	sbc	r22, r18
    2190:	73 0b       	sbc	r23, r19
    2192:	84 0b       	sbc	r24, r20
    2194:	ba f0       	brmi	.+46     	; 0x21c4 <__addsf3x+0x98>
    2196:	91 50       	subi	r25, 0x01	; 1
    2198:	a1 f0       	breq	.+40     	; 0x21c2 <__addsf3x+0x96>
    219a:	ff 0f       	add	r31, r31
    219c:	bb 1f       	adc	r27, r27
    219e:	66 1f       	adc	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	88 1f       	adc	r24, r24
    21a4:	c2 f7       	brpl	.-16     	; 0x2196 <__addsf3x+0x6a>
    21a6:	0e c0       	rjmp	.+28     	; 0x21c4 <__addsf3x+0x98>
    21a8:	ba 0f       	add	r27, r26
    21aa:	62 1f       	adc	r22, r18
    21ac:	73 1f       	adc	r23, r19
    21ae:	84 1f       	adc	r24, r20
    21b0:	48 f4       	brcc	.+18     	; 0x21c4 <__addsf3x+0x98>
    21b2:	87 95       	ror	r24
    21b4:	77 95       	ror	r23
    21b6:	67 95       	ror	r22
    21b8:	b7 95       	ror	r27
    21ba:	f7 95       	ror	r31
    21bc:	9e 3f       	cpi	r25, 0xFE	; 254
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <__addsf3x+0x96>
    21c0:	b3 cf       	rjmp	.-154    	; 0x2128 <__addsf3+0x1e>
    21c2:	93 95       	inc	r25
    21c4:	88 0f       	add	r24, r24
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <__addsf3x+0x9e>
    21c8:	99 27       	eor	r25, r25
    21ca:	ee 0f       	add	r30, r30
    21cc:	97 95       	ror	r25
    21ce:	87 95       	ror	r24
    21d0:	08 95       	ret

000021d2 <__cmpsf2>:
    21d2:	d9 d0       	rcall	.+434    	; 0x2386 <__fp_cmp>
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <__cmpsf2+0x6>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	08 95       	ret

000021da <__divsf3>:
    21da:	0c d0       	rcall	.+24     	; 0x21f4 <__divsf3x>
    21dc:	0f c1       	rjmp	.+542    	; 0x23fc <__fp_round>
    21de:	07 d1       	rcall	.+526    	; 0x23ee <__fp_pscB>
    21e0:	40 f0       	brcs	.+16     	; 0x21f2 <__divsf3+0x18>
    21e2:	fe d0       	rcall	.+508    	; 0x23e0 <__fp_pscA>
    21e4:	30 f0       	brcs	.+12     	; 0x21f2 <__divsf3+0x18>
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <__divsf3+0x16>
    21e8:	5f 3f       	cpi	r21, 0xFF	; 255
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <__divsf3+0x18>
    21ec:	f0 c0       	rjmp	.+480    	; 0x23ce <__fp_inf>
    21ee:	51 11       	cpse	r21, r1
    21f0:	39 c1       	rjmp	.+626    	; 0x2464 <__fp_szero>
    21f2:	f3 c0       	rjmp	.+486    	; 0x23da <__fp_nan>

000021f4 <__divsf3x>:
    21f4:	14 d1       	rcall	.+552    	; 0x241e <__fp_split3>
    21f6:	98 f3       	brcs	.-26     	; 0x21de <__divsf3+0x4>

000021f8 <__divsf3_pse>:
    21f8:	99 23       	and	r25, r25
    21fa:	c9 f3       	breq	.-14     	; 0x21ee <__divsf3+0x14>
    21fc:	55 23       	and	r21, r21
    21fe:	b1 f3       	breq	.-20     	; 0x21ec <__divsf3+0x12>
    2200:	95 1b       	sub	r25, r21
    2202:	55 0b       	sbc	r21, r21
    2204:	bb 27       	eor	r27, r27
    2206:	aa 27       	eor	r26, r26
    2208:	62 17       	cp	r22, r18
    220a:	73 07       	cpc	r23, r19
    220c:	84 07       	cpc	r24, r20
    220e:	38 f0       	brcs	.+14     	; 0x221e <__stack+0x1f>
    2210:	9f 5f       	subi	r25, 0xFF	; 255
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	44 1f       	adc	r20, r20
    221a:	aa 1f       	adc	r26, r26
    221c:	a9 f3       	breq	.-22     	; 0x2208 <__stack+0x9>
    221e:	33 d0       	rcall	.+102    	; 0x2286 <__stack+0x87>
    2220:	0e 2e       	mov	r0, r30
    2222:	3a f0       	brmi	.+14     	; 0x2232 <__stack+0x33>
    2224:	e0 e8       	ldi	r30, 0x80	; 128
    2226:	30 d0       	rcall	.+96     	; 0x2288 <__stack+0x89>
    2228:	91 50       	subi	r25, 0x01	; 1
    222a:	50 40       	sbci	r21, 0x00	; 0
    222c:	e6 95       	lsr	r30
    222e:	00 1c       	adc	r0, r0
    2230:	ca f7       	brpl	.-14     	; 0x2224 <__stack+0x25>
    2232:	29 d0       	rcall	.+82     	; 0x2286 <__stack+0x87>
    2234:	fe 2f       	mov	r31, r30
    2236:	27 d0       	rcall	.+78     	; 0x2286 <__stack+0x87>
    2238:	66 0f       	add	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	bb 1f       	adc	r27, r27
    2240:	26 17       	cp	r18, r22
    2242:	37 07       	cpc	r19, r23
    2244:	48 07       	cpc	r20, r24
    2246:	ab 07       	cpc	r26, r27
    2248:	b0 e8       	ldi	r27, 0x80	; 128
    224a:	09 f0       	breq	.+2      	; 0x224e <__stack+0x4f>
    224c:	bb 0b       	sbc	r27, r27
    224e:	80 2d       	mov	r24, r0
    2250:	bf 01       	movw	r22, r30
    2252:	ff 27       	eor	r31, r31
    2254:	93 58       	subi	r25, 0x83	; 131
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	2a f0       	brmi	.+10     	; 0x2264 <__stack+0x65>
    225a:	9e 3f       	cpi	r25, 0xFE	; 254
    225c:	51 05       	cpc	r21, r1
    225e:	68 f0       	brcs	.+26     	; 0x227a <__stack+0x7b>
    2260:	b6 c0       	rjmp	.+364    	; 0x23ce <__fp_inf>
    2262:	00 c1       	rjmp	.+512    	; 0x2464 <__fp_szero>
    2264:	5f 3f       	cpi	r21, 0xFF	; 255
    2266:	ec f3       	brlt	.-6      	; 0x2262 <__stack+0x63>
    2268:	98 3e       	cpi	r25, 0xE8	; 232
    226a:	dc f3       	brlt	.-10     	; 0x2262 <__stack+0x63>
    226c:	86 95       	lsr	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	b7 95       	ror	r27
    2274:	f7 95       	ror	r31
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	c9 f7       	brne	.-14     	; 0x226c <__stack+0x6d>
    227a:	88 0f       	add	r24, r24
    227c:	91 1d       	adc	r25, r1
    227e:	96 95       	lsr	r25
    2280:	87 95       	ror	r24
    2282:	97 f9       	bld	r25, 7
    2284:	08 95       	ret
    2286:	e1 e0       	ldi	r30, 0x01	; 1
    2288:	66 0f       	add	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	bb 1f       	adc	r27, r27
    2290:	62 17       	cp	r22, r18
    2292:	73 07       	cpc	r23, r19
    2294:	84 07       	cpc	r24, r20
    2296:	ba 07       	cpc	r27, r26
    2298:	20 f0       	brcs	.+8      	; 0x22a2 <__stack+0xa3>
    229a:	62 1b       	sub	r22, r18
    229c:	73 0b       	sbc	r23, r19
    229e:	84 0b       	sbc	r24, r20
    22a0:	ba 0b       	sbc	r27, r26
    22a2:	ee 1f       	adc	r30, r30
    22a4:	88 f7       	brcc	.-30     	; 0x2288 <__stack+0x89>
    22a6:	e0 95       	com	r30
    22a8:	08 95       	ret

000022aa <__fixsfsi>:
    22aa:	04 d0       	rcall	.+8      	; 0x22b4 <__fixunssfsi>
    22ac:	68 94       	set
    22ae:	b1 11       	cpse	r27, r1
    22b0:	d9 c0       	rjmp	.+434    	; 0x2464 <__fp_szero>
    22b2:	08 95       	ret

000022b4 <__fixunssfsi>:
    22b4:	bc d0       	rcall	.+376    	; 0x242e <__fp_splitA>
    22b6:	88 f0       	brcs	.+34     	; 0x22da <__fixunssfsi+0x26>
    22b8:	9f 57       	subi	r25, 0x7F	; 127
    22ba:	90 f0       	brcs	.+36     	; 0x22e0 <__fixunssfsi+0x2c>
    22bc:	b9 2f       	mov	r27, r25
    22be:	99 27       	eor	r25, r25
    22c0:	b7 51       	subi	r27, 0x17	; 23
    22c2:	a0 f0       	brcs	.+40     	; 0x22ec <__fixunssfsi+0x38>
    22c4:	d1 f0       	breq	.+52     	; 0x22fa <__fixunssfsi+0x46>
    22c6:	66 0f       	add	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	88 1f       	adc	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	1a f0       	brmi	.+6      	; 0x22d6 <__fixunssfsi+0x22>
    22d0:	ba 95       	dec	r27
    22d2:	c9 f7       	brne	.-14     	; 0x22c6 <__fixunssfsi+0x12>
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <__fixunssfsi+0x46>
    22d6:	b1 30       	cpi	r27, 0x01	; 1
    22d8:	81 f0       	breq	.+32     	; 0x22fa <__fixunssfsi+0x46>
    22da:	c3 d0       	rcall	.+390    	; 0x2462 <__fp_zero>
    22dc:	b1 e0       	ldi	r27, 0x01	; 1
    22de:	08 95       	ret
    22e0:	c0 c0       	rjmp	.+384    	; 0x2462 <__fp_zero>
    22e2:	67 2f       	mov	r22, r23
    22e4:	78 2f       	mov	r23, r24
    22e6:	88 27       	eor	r24, r24
    22e8:	b8 5f       	subi	r27, 0xF8	; 248
    22ea:	39 f0       	breq	.+14     	; 0x22fa <__fixunssfsi+0x46>
    22ec:	b9 3f       	cpi	r27, 0xF9	; 249
    22ee:	cc f3       	brlt	.-14     	; 0x22e2 <__fixunssfsi+0x2e>
    22f0:	86 95       	lsr	r24
    22f2:	77 95       	ror	r23
    22f4:	67 95       	ror	r22
    22f6:	b3 95       	inc	r27
    22f8:	d9 f7       	brne	.-10     	; 0x22f0 <__fixunssfsi+0x3c>
    22fa:	3e f4       	brtc	.+14     	; 0x230a <__fixunssfsi+0x56>
    22fc:	90 95       	com	r25
    22fe:	80 95       	com	r24
    2300:	70 95       	com	r23
    2302:	61 95       	neg	r22
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	8f 4f       	sbci	r24, 0xFF	; 255
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	08 95       	ret

0000230c <__floatunsisf>:
    230c:	e8 94       	clt
    230e:	09 c0       	rjmp	.+18     	; 0x2322 <__floatsisf+0x12>

00002310 <__floatsisf>:
    2310:	97 fb       	bst	r25, 7
    2312:	3e f4       	brtc	.+14     	; 0x2322 <__floatsisf+0x12>
    2314:	90 95       	com	r25
    2316:	80 95       	com	r24
    2318:	70 95       	com	r23
    231a:	61 95       	neg	r22
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8f 4f       	sbci	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	99 23       	and	r25, r25
    2324:	a9 f0       	breq	.+42     	; 0x2350 <__floatsisf+0x40>
    2326:	f9 2f       	mov	r31, r25
    2328:	96 e9       	ldi	r25, 0x96	; 150
    232a:	bb 27       	eor	r27, r27
    232c:	93 95       	inc	r25
    232e:	f6 95       	lsr	r31
    2330:	87 95       	ror	r24
    2332:	77 95       	ror	r23
    2334:	67 95       	ror	r22
    2336:	b7 95       	ror	r27
    2338:	f1 11       	cpse	r31, r1
    233a:	f8 cf       	rjmp	.-16     	; 0x232c <__floatsisf+0x1c>
    233c:	fa f4       	brpl	.+62     	; 0x237c <__floatsisf+0x6c>
    233e:	bb 0f       	add	r27, r27
    2340:	11 f4       	brne	.+4      	; 0x2346 <__floatsisf+0x36>
    2342:	60 ff       	sbrs	r22, 0
    2344:	1b c0       	rjmp	.+54     	; 0x237c <__floatsisf+0x6c>
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	8f 4f       	sbci	r24, 0xFF	; 255
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	16 c0       	rjmp	.+44     	; 0x237c <__floatsisf+0x6c>
    2350:	88 23       	and	r24, r24
    2352:	11 f0       	breq	.+4      	; 0x2358 <__floatsisf+0x48>
    2354:	96 e9       	ldi	r25, 0x96	; 150
    2356:	11 c0       	rjmp	.+34     	; 0x237a <__floatsisf+0x6a>
    2358:	77 23       	and	r23, r23
    235a:	21 f0       	breq	.+8      	; 0x2364 <__floatsisf+0x54>
    235c:	9e e8       	ldi	r25, 0x8E	; 142
    235e:	87 2f       	mov	r24, r23
    2360:	76 2f       	mov	r23, r22
    2362:	05 c0       	rjmp	.+10     	; 0x236e <__floatsisf+0x5e>
    2364:	66 23       	and	r22, r22
    2366:	71 f0       	breq	.+28     	; 0x2384 <__floatsisf+0x74>
    2368:	96 e8       	ldi	r25, 0x86	; 134
    236a:	86 2f       	mov	r24, r22
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	2a f0       	brmi	.+10     	; 0x237c <__floatsisf+0x6c>
    2372:	9a 95       	dec	r25
    2374:	66 0f       	add	r22, r22
    2376:	77 1f       	adc	r23, r23
    2378:	88 1f       	adc	r24, r24
    237a:	da f7       	brpl	.-10     	; 0x2372 <__floatsisf+0x62>
    237c:	88 0f       	add	r24, r24
    237e:	96 95       	lsr	r25
    2380:	87 95       	ror	r24
    2382:	97 f9       	bld	r25, 7
    2384:	08 95       	ret

00002386 <__fp_cmp>:
    2386:	99 0f       	add	r25, r25
    2388:	00 08       	sbc	r0, r0
    238a:	55 0f       	add	r21, r21
    238c:	aa 0b       	sbc	r26, r26
    238e:	e0 e8       	ldi	r30, 0x80	; 128
    2390:	fe ef       	ldi	r31, 0xFE	; 254
    2392:	16 16       	cp	r1, r22
    2394:	17 06       	cpc	r1, r23
    2396:	e8 07       	cpc	r30, r24
    2398:	f9 07       	cpc	r31, r25
    239a:	c0 f0       	brcs	.+48     	; 0x23cc <__fp_cmp+0x46>
    239c:	12 16       	cp	r1, r18
    239e:	13 06       	cpc	r1, r19
    23a0:	e4 07       	cpc	r30, r20
    23a2:	f5 07       	cpc	r31, r21
    23a4:	98 f0       	brcs	.+38     	; 0x23cc <__fp_cmp+0x46>
    23a6:	62 1b       	sub	r22, r18
    23a8:	73 0b       	sbc	r23, r19
    23aa:	84 0b       	sbc	r24, r20
    23ac:	95 0b       	sbc	r25, r21
    23ae:	39 f4       	brne	.+14     	; 0x23be <__fp_cmp+0x38>
    23b0:	0a 26       	eor	r0, r26
    23b2:	61 f0       	breq	.+24     	; 0x23cc <__fp_cmp+0x46>
    23b4:	23 2b       	or	r18, r19
    23b6:	24 2b       	or	r18, r20
    23b8:	25 2b       	or	r18, r21
    23ba:	21 f4       	brne	.+8      	; 0x23c4 <__fp_cmp+0x3e>
    23bc:	08 95       	ret
    23be:	0a 26       	eor	r0, r26
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <__fp_cmp+0x3e>
    23c2:	a1 40       	sbci	r26, 0x01	; 1
    23c4:	a6 95       	lsr	r26
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	81 1d       	adc	r24, r1
    23ca:	81 1d       	adc	r24, r1
    23cc:	08 95       	ret

000023ce <__fp_inf>:
    23ce:	97 f9       	bld	r25, 7
    23d0:	9f 67       	ori	r25, 0x7F	; 127
    23d2:	80 e8       	ldi	r24, 0x80	; 128
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	08 95       	ret

000023da <__fp_nan>:
    23da:	9f ef       	ldi	r25, 0xFF	; 255
    23dc:	80 ec       	ldi	r24, 0xC0	; 192
    23de:	08 95       	ret

000023e0 <__fp_pscA>:
    23e0:	00 24       	eor	r0, r0
    23e2:	0a 94       	dec	r0
    23e4:	16 16       	cp	r1, r22
    23e6:	17 06       	cpc	r1, r23
    23e8:	18 06       	cpc	r1, r24
    23ea:	09 06       	cpc	r0, r25
    23ec:	08 95       	ret

000023ee <__fp_pscB>:
    23ee:	00 24       	eor	r0, r0
    23f0:	0a 94       	dec	r0
    23f2:	12 16       	cp	r1, r18
    23f4:	13 06       	cpc	r1, r19
    23f6:	14 06       	cpc	r1, r20
    23f8:	05 06       	cpc	r0, r21
    23fa:	08 95       	ret

000023fc <__fp_round>:
    23fc:	09 2e       	mov	r0, r25
    23fe:	03 94       	inc	r0
    2400:	00 0c       	add	r0, r0
    2402:	11 f4       	brne	.+4      	; 0x2408 <__fp_round+0xc>
    2404:	88 23       	and	r24, r24
    2406:	52 f0       	brmi	.+20     	; 0x241c <__fp_round+0x20>
    2408:	bb 0f       	add	r27, r27
    240a:	40 f4       	brcc	.+16     	; 0x241c <__fp_round+0x20>
    240c:	bf 2b       	or	r27, r31
    240e:	11 f4       	brne	.+4      	; 0x2414 <__fp_round+0x18>
    2410:	60 ff       	sbrs	r22, 0
    2412:	04 c0       	rjmp	.+8      	; 0x241c <__fp_round+0x20>
    2414:	6f 5f       	subi	r22, 0xFF	; 255
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	8f 4f       	sbci	r24, 0xFF	; 255
    241a:	9f 4f       	sbci	r25, 0xFF	; 255
    241c:	08 95       	ret

0000241e <__fp_split3>:
    241e:	57 fd       	sbrc	r21, 7
    2420:	90 58       	subi	r25, 0x80	; 128
    2422:	44 0f       	add	r20, r20
    2424:	55 1f       	adc	r21, r21
    2426:	59 f0       	breq	.+22     	; 0x243e <__fp_splitA+0x10>
    2428:	5f 3f       	cpi	r21, 0xFF	; 255
    242a:	71 f0       	breq	.+28     	; 0x2448 <__fp_splitA+0x1a>
    242c:	47 95       	ror	r20

0000242e <__fp_splitA>:
    242e:	88 0f       	add	r24, r24
    2430:	97 fb       	bst	r25, 7
    2432:	99 1f       	adc	r25, r25
    2434:	61 f0       	breq	.+24     	; 0x244e <__fp_splitA+0x20>
    2436:	9f 3f       	cpi	r25, 0xFF	; 255
    2438:	79 f0       	breq	.+30     	; 0x2458 <__fp_splitA+0x2a>
    243a:	87 95       	ror	r24
    243c:	08 95       	ret
    243e:	12 16       	cp	r1, r18
    2440:	13 06       	cpc	r1, r19
    2442:	14 06       	cpc	r1, r20
    2444:	55 1f       	adc	r21, r21
    2446:	f2 cf       	rjmp	.-28     	; 0x242c <__fp_split3+0xe>
    2448:	46 95       	lsr	r20
    244a:	f1 df       	rcall	.-30     	; 0x242e <__fp_splitA>
    244c:	08 c0       	rjmp	.+16     	; 0x245e <__fp_splitA+0x30>
    244e:	16 16       	cp	r1, r22
    2450:	17 06       	cpc	r1, r23
    2452:	18 06       	cpc	r1, r24
    2454:	99 1f       	adc	r25, r25
    2456:	f1 cf       	rjmp	.-30     	; 0x243a <__fp_splitA+0xc>
    2458:	86 95       	lsr	r24
    245a:	71 05       	cpc	r23, r1
    245c:	61 05       	cpc	r22, r1
    245e:	08 94       	sec
    2460:	08 95       	ret

00002462 <__fp_zero>:
    2462:	e8 94       	clt

00002464 <__fp_szero>:
    2464:	bb 27       	eor	r27, r27
    2466:	66 27       	eor	r22, r22
    2468:	77 27       	eor	r23, r23
    246a:	cb 01       	movw	r24, r22
    246c:	97 f9       	bld	r25, 7
    246e:	08 95       	ret

00002470 <__gesf2>:
    2470:	8a df       	rcall	.-236    	; 0x2386 <__fp_cmp>
    2472:	08 f4       	brcc	.+2      	; 0x2476 <__gesf2+0x6>
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	08 95       	ret

00002478 <__mulsf3>:
    2478:	0b d0       	rcall	.+22     	; 0x2490 <__mulsf3x>
    247a:	c0 cf       	rjmp	.-128    	; 0x23fc <__fp_round>
    247c:	b1 df       	rcall	.-158    	; 0x23e0 <__fp_pscA>
    247e:	28 f0       	brcs	.+10     	; 0x248a <__mulsf3+0x12>
    2480:	b6 df       	rcall	.-148    	; 0x23ee <__fp_pscB>
    2482:	18 f0       	brcs	.+6      	; 0x248a <__mulsf3+0x12>
    2484:	95 23       	and	r25, r21
    2486:	09 f0       	breq	.+2      	; 0x248a <__mulsf3+0x12>
    2488:	a2 cf       	rjmp	.-188    	; 0x23ce <__fp_inf>
    248a:	a7 cf       	rjmp	.-178    	; 0x23da <__fp_nan>
    248c:	11 24       	eor	r1, r1
    248e:	ea cf       	rjmp	.-44     	; 0x2464 <__fp_szero>

00002490 <__mulsf3x>:
    2490:	c6 df       	rcall	.-116    	; 0x241e <__fp_split3>
    2492:	a0 f3       	brcs	.-24     	; 0x247c <__mulsf3+0x4>

00002494 <__mulsf3_pse>:
    2494:	95 9f       	mul	r25, r21
    2496:	d1 f3       	breq	.-12     	; 0x248c <__mulsf3+0x14>
    2498:	95 0f       	add	r25, r21
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	55 1f       	adc	r21, r21
    249e:	62 9f       	mul	r22, r18
    24a0:	f0 01       	movw	r30, r0
    24a2:	72 9f       	mul	r23, r18
    24a4:	bb 27       	eor	r27, r27
    24a6:	f0 0d       	add	r31, r0
    24a8:	b1 1d       	adc	r27, r1
    24aa:	63 9f       	mul	r22, r19
    24ac:	aa 27       	eor	r26, r26
    24ae:	f0 0d       	add	r31, r0
    24b0:	b1 1d       	adc	r27, r1
    24b2:	aa 1f       	adc	r26, r26
    24b4:	64 9f       	mul	r22, r20
    24b6:	66 27       	eor	r22, r22
    24b8:	b0 0d       	add	r27, r0
    24ba:	a1 1d       	adc	r26, r1
    24bc:	66 1f       	adc	r22, r22
    24be:	82 9f       	mul	r24, r18
    24c0:	22 27       	eor	r18, r18
    24c2:	b0 0d       	add	r27, r0
    24c4:	a1 1d       	adc	r26, r1
    24c6:	62 1f       	adc	r22, r18
    24c8:	73 9f       	mul	r23, r19
    24ca:	b0 0d       	add	r27, r0
    24cc:	a1 1d       	adc	r26, r1
    24ce:	62 1f       	adc	r22, r18
    24d0:	83 9f       	mul	r24, r19
    24d2:	a0 0d       	add	r26, r0
    24d4:	61 1d       	adc	r22, r1
    24d6:	22 1f       	adc	r18, r18
    24d8:	74 9f       	mul	r23, r20
    24da:	33 27       	eor	r19, r19
    24dc:	a0 0d       	add	r26, r0
    24de:	61 1d       	adc	r22, r1
    24e0:	23 1f       	adc	r18, r19
    24e2:	84 9f       	mul	r24, r20
    24e4:	60 0d       	add	r22, r0
    24e6:	21 1d       	adc	r18, r1
    24e8:	82 2f       	mov	r24, r18
    24ea:	76 2f       	mov	r23, r22
    24ec:	6a 2f       	mov	r22, r26
    24ee:	11 24       	eor	r1, r1
    24f0:	9f 57       	subi	r25, 0x7F	; 127
    24f2:	50 40       	sbci	r21, 0x00	; 0
    24f4:	8a f0       	brmi	.+34     	; 0x2518 <__mulsf3_pse+0x84>
    24f6:	e1 f0       	breq	.+56     	; 0x2530 <__mulsf3_pse+0x9c>
    24f8:	88 23       	and	r24, r24
    24fa:	4a f0       	brmi	.+18     	; 0x250e <__mulsf3_pse+0x7a>
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	bb 1f       	adc	r27, r27
    2502:	66 1f       	adc	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	88 1f       	adc	r24, r24
    2508:	91 50       	subi	r25, 0x01	; 1
    250a:	50 40       	sbci	r21, 0x00	; 0
    250c:	a9 f7       	brne	.-22     	; 0x24f8 <__mulsf3_pse+0x64>
    250e:	9e 3f       	cpi	r25, 0xFE	; 254
    2510:	51 05       	cpc	r21, r1
    2512:	70 f0       	brcs	.+28     	; 0x2530 <__mulsf3_pse+0x9c>
    2514:	5c cf       	rjmp	.-328    	; 0x23ce <__fp_inf>
    2516:	a6 cf       	rjmp	.-180    	; 0x2464 <__fp_szero>
    2518:	5f 3f       	cpi	r21, 0xFF	; 255
    251a:	ec f3       	brlt	.-6      	; 0x2516 <__mulsf3_pse+0x82>
    251c:	98 3e       	cpi	r25, 0xE8	; 232
    251e:	dc f3       	brlt	.-10     	; 0x2516 <__mulsf3_pse+0x82>
    2520:	86 95       	lsr	r24
    2522:	77 95       	ror	r23
    2524:	67 95       	ror	r22
    2526:	b7 95       	ror	r27
    2528:	f7 95       	ror	r31
    252a:	e7 95       	ror	r30
    252c:	9f 5f       	subi	r25, 0xFF	; 255
    252e:	c1 f7       	brne	.-16     	; 0x2520 <__mulsf3_pse+0x8c>
    2530:	fe 2b       	or	r31, r30
    2532:	88 0f       	add	r24, r24
    2534:	91 1d       	adc	r25, r1
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	97 f9       	bld	r25, 7
    253c:	08 95       	ret

0000253e <atoi>:
    253e:	fc 01       	movw	r30, r24
    2540:	88 27       	eor	r24, r24
    2542:	99 27       	eor	r25, r25
    2544:	e8 94       	clt
    2546:	21 91       	ld	r18, Z+
    2548:	20 32       	cpi	r18, 0x20	; 32
    254a:	e9 f3       	breq	.-6      	; 0x2546 <atoi+0x8>
    254c:	29 30       	cpi	r18, 0x09	; 9
    254e:	10 f0       	brcs	.+4      	; 0x2554 <atoi+0x16>
    2550:	2e 30       	cpi	r18, 0x0E	; 14
    2552:	c8 f3       	brcs	.-14     	; 0x2546 <atoi+0x8>
    2554:	2b 32       	cpi	r18, 0x2B	; 43
    2556:	39 f0       	breq	.+14     	; 0x2566 <atoi+0x28>
    2558:	2d 32       	cpi	r18, 0x2D	; 45
    255a:	31 f4       	brne	.+12     	; 0x2568 <atoi+0x2a>
    255c:	68 94       	set
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <atoi+0x28>
    2560:	35 d0       	rcall	.+106    	; 0x25cc <__mulhi_const_10>
    2562:	82 0f       	add	r24, r18
    2564:	91 1d       	adc	r25, r1
    2566:	21 91       	ld	r18, Z+
    2568:	20 53       	subi	r18, 0x30	; 48
    256a:	2a 30       	cpi	r18, 0x0A	; 10
    256c:	c8 f3       	brcs	.-14     	; 0x2560 <atoi+0x22>
    256e:	1e f4       	brtc	.+6      	; 0x2576 <atoi+0x38>
    2570:	90 95       	com	r25
    2572:	81 95       	neg	r24
    2574:	9f 4f       	sbci	r25, 0xFF	; 255
    2576:	08 95       	ret

00002578 <strtok>:
    2578:	4c ef       	ldi	r20, 0xFC	; 252
    257a:	5c e0       	ldi	r21, 0x0C	; 12
    257c:	00 c0       	rjmp	.+0      	; 0x257e <strtok_r>

0000257e <strtok_r>:
    257e:	fa 01       	movw	r30, r20
    2580:	a1 91       	ld	r26, Z+
    2582:	b0 81       	ld	r27, Z
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	19 f4       	brne	.+6      	; 0x258e <strtok_r+0x10>
    2588:	10 97       	sbiw	r26, 0x00	; 0
    258a:	e1 f0       	breq	.+56     	; 0x25c4 <strtok_r+0x46>
    258c:	cd 01       	movw	r24, r26
    258e:	dc 01       	movw	r26, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0d 90       	ld	r0, X+
    2594:	00 20       	and	r0, r0
    2596:	11 f4       	brne	.+4      	; 0x259c <strtok_r+0x1e>
    2598:	c0 01       	movw	r24, r0
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <strtok_r+0x44>
    259c:	fb 01       	movw	r30, r22
    259e:	21 91       	ld	r18, Z+
    25a0:	22 23       	and	r18, r18
    25a2:	19 f0       	breq	.+6      	; 0x25aa <strtok_r+0x2c>
    25a4:	20 15       	cp	r18, r0
    25a6:	d9 f7       	brne	.-10     	; 0x259e <strtok_r+0x20>
    25a8:	f3 cf       	rjmp	.-26     	; 0x2590 <strtok_r+0x12>
    25aa:	fb 01       	movw	r30, r22
    25ac:	21 91       	ld	r18, Z+
    25ae:	20 15       	cp	r18, r0
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <strtok_r+0x3a>
    25b2:	1e 92       	st	-X, r1
    25b4:	11 96       	adiw	r26, 0x01	; 1
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <strtok_r+0x46>
    25b8:	22 23       	and	r18, r18
    25ba:	c1 f7       	brne	.-16     	; 0x25ac <strtok_r+0x2e>
    25bc:	0d 90       	ld	r0, X+
    25be:	00 20       	and	r0, r0
    25c0:	a1 f7       	brne	.-24     	; 0x25aa <strtok_r+0x2c>
    25c2:	d0 01       	movw	r26, r0
    25c4:	fa 01       	movw	r30, r20
    25c6:	a1 93       	st	Z+, r26
    25c8:	b0 83       	st	Z, r27
    25ca:	08 95       	ret

000025cc <__mulhi_const_10>:
    25cc:	7a e0       	ldi	r23, 0x0A	; 10
    25ce:	97 9f       	mul	r25, r23
    25d0:	90 2d       	mov	r25, r0
    25d2:	87 9f       	mul	r24, r23
    25d4:	80 2d       	mov	r24, r0
    25d6:	91 0d       	add	r25, r1
    25d8:	11 24       	eor	r1, r1
    25da:	08 95       	ret

000025dc <fdevopen>:
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	31 f4       	brne	.+12     	; 0x25f4 <fdevopen+0x18>
    25e8:	61 15       	cp	r22, r1
    25ea:	71 05       	cpc	r23, r1
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <fdevopen+0x18>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	39 c0       	rjmp	.+114    	; 0x2666 <fdevopen+0x8a>
    25f4:	8b 01       	movw	r16, r22
    25f6:	ec 01       	movw	r28, r24
    25f8:	6e e0       	ldi	r22, 0x0E	; 14
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a6 d2       	rcall	.+1356   	; 0x2b4e <calloc>
    2602:	fc 01       	movw	r30, r24
    2604:	89 2b       	or	r24, r25
    2606:	99 f3       	breq	.-26     	; 0x25ee <fdevopen+0x12>
    2608:	80 e8       	ldi	r24, 0x80	; 128
    260a:	83 83       	std	Z+3, r24	; 0x03
    260c:	01 15       	cp	r16, r1
    260e:	11 05       	cpc	r17, r1
    2610:	71 f0       	breq	.+28     	; 0x262e <fdevopen+0x52>
    2612:	13 87       	std	Z+11, r17	; 0x0b
    2614:	02 87       	std	Z+10, r16	; 0x0a
    2616:	81 e8       	ldi	r24, 0x81	; 129
    2618:	83 83       	std	Z+3, r24	; 0x03
    261a:	80 91 32 0e 	lds	r24, 0x0E32	; 0x800e32 <__iob>
    261e:	90 91 33 0e 	lds	r25, 0x0E33	; 0x800e33 <__iob+0x1>
    2622:	89 2b       	or	r24, r25
    2624:	21 f4       	brne	.+8      	; 0x262e <fdevopen+0x52>
    2626:	f0 93 33 0e 	sts	0x0E33, r31	; 0x800e33 <__iob+0x1>
    262a:	e0 93 32 0e 	sts	0x0E32, r30	; 0x800e32 <__iob>
    262e:	20 97       	sbiw	r28, 0x00	; 0
    2630:	c9 f0       	breq	.+50     	; 0x2664 <fdevopen+0x88>
    2632:	d1 87       	std	Z+9, r29	; 0x09
    2634:	c0 87       	std	Z+8, r28	; 0x08
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	82 60       	ori	r24, 0x02	; 2
    263a:	83 83       	std	Z+3, r24	; 0x03
    263c:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <__iob+0x2>
    2640:	90 91 35 0e 	lds	r25, 0x0E35	; 0x800e35 <__iob+0x3>
    2644:	89 2b       	or	r24, r25
    2646:	71 f4       	brne	.+28     	; 0x2664 <fdevopen+0x88>
    2648:	f0 93 35 0e 	sts	0x0E35, r31	; 0x800e35 <__iob+0x3>
    264c:	e0 93 34 0e 	sts	0x0E34, r30	; 0x800e34 <__iob+0x2>
    2650:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <__iob+0x4>
    2654:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <__iob+0x5>
    2658:	89 2b       	or	r24, r25
    265a:	21 f4       	brne	.+8      	; 0x2664 <fdevopen+0x88>
    265c:	f0 93 37 0e 	sts	0x0E37, r31	; 0x800e37 <__iob+0x5>
    2660:	e0 93 36 0e 	sts	0x0E36, r30	; 0x800e36 <__iob+0x4>
    2664:	cf 01       	movw	r24, r30
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <fgetc>:
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
    2676:	2b 81       	ldd	r18, Y+3	; 0x03
    2678:	20 ff       	sbrs	r18, 0
    267a:	33 c0       	rjmp	.+102    	; 0x26e2 <fgetc+0x72>
    267c:	26 ff       	sbrs	r18, 6
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <fgetc+0x24>
    2680:	2f 7b       	andi	r18, 0xBF	; 191
    2682:	2b 83       	std	Y+3, r18	; 0x03
    2684:	8e 81       	ldd	r24, Y+6	; 0x06
    2686:	9f 81       	ldd	r25, Y+7	; 0x07
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	9f 83       	std	Y+7, r25	; 0x07
    268c:	8e 83       	std	Y+6, r24	; 0x06
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	29 c0       	rjmp	.+82     	; 0x26e6 <fgetc+0x76>
    2694:	22 ff       	sbrs	r18, 2
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <fgetc+0x46>
    2698:	e8 81       	ld	r30, Y
    269a:	f9 81       	ldd	r31, Y+1	; 0x01
    269c:	80 81       	ld	r24, Z
    269e:	08 2e       	mov	r0, r24
    26a0:	00 0c       	add	r0, r0
    26a2:	99 0b       	sbc	r25, r25
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	19 f4       	brne	.+6      	; 0x26ae <fgetc+0x3e>
    26a8:	20 62       	ori	r18, 0x20	; 32
    26aa:	2b 83       	std	Y+3, r18	; 0x03
    26ac:	1a c0       	rjmp	.+52     	; 0x26e2 <fgetc+0x72>
    26ae:	31 96       	adiw	r30, 0x01	; 1
    26b0:	f9 83       	std	Y+1, r31	; 0x01
    26b2:	e8 83       	st	Y, r30
    26b4:	0e c0       	rjmp	.+28     	; 0x26d2 <fgetc+0x62>
    26b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    26b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    26ba:	19 95       	eicall
    26bc:	97 ff       	sbrs	r25, 7
    26be:	09 c0       	rjmp	.+18     	; 0x26d2 <fgetc+0x62>
    26c0:	2b 81       	ldd	r18, Y+3	; 0x03
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	11 f0       	breq	.+4      	; 0x26ca <fgetc+0x5a>
    26c6:	80 e2       	ldi	r24, 0x20	; 32
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <fgetc+0x5c>
    26ca:	80 e1       	ldi	r24, 0x10	; 16
    26cc:	82 2b       	or	r24, r18
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	08 c0       	rjmp	.+16     	; 0x26e2 <fgetc+0x72>
    26d2:	2e 81       	ldd	r18, Y+6	; 0x06
    26d4:	3f 81       	ldd	r19, Y+7	; 0x07
    26d6:	2f 5f       	subi	r18, 0xFF	; 255
    26d8:	3f 4f       	sbci	r19, 0xFF	; 255
    26da:	3f 83       	std	Y+7, r19	; 0x07
    26dc:	2e 83       	std	Y+6, r18	; 0x06
    26de:	99 27       	eor	r25, r25
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <fgetc+0x76>
    26e2:	8f ef       	ldi	r24, 0xFF	; 255
    26e4:	9f ef       	ldi	r25, 0xFF	; 255
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <printf>:
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	ae 01       	movw	r20, r28
    26f6:	4a 5f       	subi	r20, 0xFA	; 250
    26f8:	5f 4f       	sbci	r21, 0xFF	; 255
    26fa:	fa 01       	movw	r30, r20
    26fc:	61 91       	ld	r22, Z+
    26fe:	71 91       	ld	r23, Z+
    2700:	af 01       	movw	r20, r30
    2702:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <__iob+0x2>
    2706:	90 91 35 0e 	lds	r25, 0x0E35	; 0x800e35 <__iob+0x3>
    270a:	33 d0       	rcall	.+102    	; 0x2772 <vfprintf>
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <puts>:
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	e0 91 34 0e 	lds	r30, 0x0E34	; 0x800e34 <__iob+0x2>
    271e:	f0 91 35 0e 	lds	r31, 0x0E35	; 0x800e35 <__iob+0x3>
    2722:	23 81       	ldd	r18, Z+3	; 0x03
    2724:	21 ff       	sbrs	r18, 1
    2726:	1b c0       	rjmp	.+54     	; 0x275e <puts+0x4c>
    2728:	8c 01       	movw	r16, r24
    272a:	d0 e0       	ldi	r29, 0x00	; 0
    272c:	c0 e0       	ldi	r28, 0x00	; 0
    272e:	f8 01       	movw	r30, r16
    2730:	81 91       	ld	r24, Z+
    2732:	8f 01       	movw	r16, r30
    2734:	60 91 34 0e 	lds	r22, 0x0E34	; 0x800e34 <__iob+0x2>
    2738:	70 91 35 0e 	lds	r23, 0x0E35	; 0x800e35 <__iob+0x3>
    273c:	db 01       	movw	r26, r22
    273e:	18 96       	adiw	r26, 0x08	; 8
    2740:	ed 91       	ld	r30, X+
    2742:	fc 91       	ld	r31, X
    2744:	19 97       	sbiw	r26, 0x09	; 9
    2746:	88 23       	and	r24, r24
    2748:	31 f0       	breq	.+12     	; 0x2756 <puts+0x44>
    274a:	19 95       	eicall
    274c:	89 2b       	or	r24, r25
    274e:	79 f3       	breq	.-34     	; 0x272e <puts+0x1c>
    2750:	df ef       	ldi	r29, 0xFF	; 255
    2752:	cf ef       	ldi	r28, 0xFF	; 255
    2754:	ec cf       	rjmp	.-40     	; 0x272e <puts+0x1c>
    2756:	8a e0       	ldi	r24, 0x0A	; 10
    2758:	19 95       	eicall
    275a:	89 2b       	or	r24, r25
    275c:	19 f0       	breq	.+6      	; 0x2764 <puts+0x52>
    275e:	8f ef       	ldi	r24, 0xFF	; 255
    2760:	9f ef       	ldi	r25, 0xFF	; 255
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <puts+0x56>
    2764:	8d 2f       	mov	r24, r29
    2766:	9c 2f       	mov	r25, r28
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	08 95       	ret

00002772 <vfprintf>:
    2772:	2f 92       	push	r2
    2774:	3f 92       	push	r3
    2776:	4f 92       	push	r4
    2778:	5f 92       	push	r5
    277a:	6f 92       	push	r6
    277c:	7f 92       	push	r7
    277e:	8f 92       	push	r8
    2780:	9f 92       	push	r9
    2782:	af 92       	push	r10
    2784:	bf 92       	push	r11
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	2c 97       	sbiw	r28, 0x0c	; 12
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	7c 01       	movw	r14, r24
    27a8:	6b 01       	movw	r12, r22
    27aa:	8a 01       	movw	r16, r20
    27ac:	fc 01       	movw	r30, r24
    27ae:	17 82       	std	Z+7, r1	; 0x07
    27b0:	16 82       	std	Z+6, r1	; 0x06
    27b2:	83 81       	ldd	r24, Z+3	; 0x03
    27b4:	81 ff       	sbrs	r24, 1
    27b6:	b0 c1       	rjmp	.+864    	; 0x2b18 <vfprintf+0x3a6>
    27b8:	ce 01       	movw	r24, r28
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	4c 01       	movw	r8, r24
    27be:	f7 01       	movw	r30, r14
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	f6 01       	movw	r30, r12
    27c4:	93 fd       	sbrc	r25, 3
    27c6:	85 91       	lpm	r24, Z+
    27c8:	93 ff       	sbrs	r25, 3
    27ca:	81 91       	ld	r24, Z+
    27cc:	6f 01       	movw	r12, r30
    27ce:	88 23       	and	r24, r24
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <vfprintf+0x62>
    27d2:	9e c1       	rjmp	.+828    	; 0x2b10 <vfprintf+0x39e>
    27d4:	85 32       	cpi	r24, 0x25	; 37
    27d6:	39 f4       	brne	.+14     	; 0x27e6 <vfprintf+0x74>
    27d8:	93 fd       	sbrc	r25, 3
    27da:	85 91       	lpm	r24, Z+
    27dc:	93 ff       	sbrs	r25, 3
    27de:	81 91       	ld	r24, Z+
    27e0:	6f 01       	movw	r12, r30
    27e2:	85 32       	cpi	r24, 0x25	; 37
    27e4:	21 f4       	brne	.+8      	; 0x27ee <vfprintf+0x7c>
    27e6:	b7 01       	movw	r22, r14
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	15 d3       	rcall	.+1578   	; 0x2e16 <fputc>
    27ec:	e8 cf       	rjmp	.-48     	; 0x27be <vfprintf+0x4c>
    27ee:	51 2c       	mov	r5, r1
    27f0:	31 2c       	mov	r3, r1
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	20 32       	cpi	r18, 0x20	; 32
    27f6:	a0 f4       	brcc	.+40     	; 0x2820 <vfprintf+0xae>
    27f8:	8b 32       	cpi	r24, 0x2B	; 43
    27fa:	69 f0       	breq	.+26     	; 0x2816 <vfprintf+0xa4>
    27fc:	30 f4       	brcc	.+12     	; 0x280a <vfprintf+0x98>
    27fe:	80 32       	cpi	r24, 0x20	; 32
    2800:	59 f0       	breq	.+22     	; 0x2818 <vfprintf+0xa6>
    2802:	83 32       	cpi	r24, 0x23	; 35
    2804:	69 f4       	brne	.+26     	; 0x2820 <vfprintf+0xae>
    2806:	20 61       	ori	r18, 0x10	; 16
    2808:	2c c0       	rjmp	.+88     	; 0x2862 <vfprintf+0xf0>
    280a:	8d 32       	cpi	r24, 0x2D	; 45
    280c:	39 f0       	breq	.+14     	; 0x281c <vfprintf+0xaa>
    280e:	80 33       	cpi	r24, 0x30	; 48
    2810:	39 f4       	brne	.+14     	; 0x2820 <vfprintf+0xae>
    2812:	21 60       	ori	r18, 0x01	; 1
    2814:	26 c0       	rjmp	.+76     	; 0x2862 <vfprintf+0xf0>
    2816:	22 60       	ori	r18, 0x02	; 2
    2818:	24 60       	ori	r18, 0x04	; 4
    281a:	23 c0       	rjmp	.+70     	; 0x2862 <vfprintf+0xf0>
    281c:	28 60       	ori	r18, 0x08	; 8
    281e:	21 c0       	rjmp	.+66     	; 0x2862 <vfprintf+0xf0>
    2820:	27 fd       	sbrc	r18, 7
    2822:	27 c0       	rjmp	.+78     	; 0x2872 <vfprintf+0x100>
    2824:	30 ed       	ldi	r19, 0xD0	; 208
    2826:	38 0f       	add	r19, r24
    2828:	3a 30       	cpi	r19, 0x0A	; 10
    282a:	78 f4       	brcc	.+30     	; 0x284a <vfprintf+0xd8>
    282c:	26 ff       	sbrs	r18, 6
    282e:	06 c0       	rjmp	.+12     	; 0x283c <vfprintf+0xca>
    2830:	fa e0       	ldi	r31, 0x0A	; 10
    2832:	5f 9e       	mul	r5, r31
    2834:	30 0d       	add	r19, r0
    2836:	11 24       	eor	r1, r1
    2838:	53 2e       	mov	r5, r19
    283a:	13 c0       	rjmp	.+38     	; 0x2862 <vfprintf+0xf0>
    283c:	8a e0       	ldi	r24, 0x0A	; 10
    283e:	38 9e       	mul	r3, r24
    2840:	30 0d       	add	r19, r0
    2842:	11 24       	eor	r1, r1
    2844:	33 2e       	mov	r3, r19
    2846:	20 62       	ori	r18, 0x20	; 32
    2848:	0c c0       	rjmp	.+24     	; 0x2862 <vfprintf+0xf0>
    284a:	8e 32       	cpi	r24, 0x2E	; 46
    284c:	21 f4       	brne	.+8      	; 0x2856 <vfprintf+0xe4>
    284e:	26 fd       	sbrc	r18, 6
    2850:	5f c1       	rjmp	.+702    	; 0x2b10 <vfprintf+0x39e>
    2852:	20 64       	ori	r18, 0x40	; 64
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <vfprintf+0xf0>
    2856:	8c 36       	cpi	r24, 0x6C	; 108
    2858:	11 f4       	brne	.+4      	; 0x285e <vfprintf+0xec>
    285a:	20 68       	ori	r18, 0x80	; 128
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <vfprintf+0xf0>
    285e:	88 36       	cpi	r24, 0x68	; 104
    2860:	41 f4       	brne	.+16     	; 0x2872 <vfprintf+0x100>
    2862:	f6 01       	movw	r30, r12
    2864:	93 fd       	sbrc	r25, 3
    2866:	85 91       	lpm	r24, Z+
    2868:	93 ff       	sbrs	r25, 3
    286a:	81 91       	ld	r24, Z+
    286c:	6f 01       	movw	r12, r30
    286e:	81 11       	cpse	r24, r1
    2870:	c1 cf       	rjmp	.-126    	; 0x27f4 <vfprintf+0x82>
    2872:	98 2f       	mov	r25, r24
    2874:	9f 7d       	andi	r25, 0xDF	; 223
    2876:	95 54       	subi	r25, 0x45	; 69
    2878:	93 30       	cpi	r25, 0x03	; 3
    287a:	28 f4       	brcc	.+10     	; 0x2886 <vfprintf+0x114>
    287c:	0c 5f       	subi	r16, 0xFC	; 252
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	ff e3       	ldi	r31, 0x3F	; 63
    2882:	f9 83       	std	Y+1, r31	; 0x01
    2884:	0d c0       	rjmp	.+26     	; 0x28a0 <vfprintf+0x12e>
    2886:	83 36       	cpi	r24, 0x63	; 99
    2888:	31 f0       	breq	.+12     	; 0x2896 <vfprintf+0x124>
    288a:	83 37       	cpi	r24, 0x73	; 115
    288c:	71 f0       	breq	.+28     	; 0x28aa <vfprintf+0x138>
    288e:	83 35       	cpi	r24, 0x53	; 83
    2890:	09 f0       	breq	.+2      	; 0x2894 <vfprintf+0x122>
    2892:	57 c0       	rjmp	.+174    	; 0x2942 <vfprintf+0x1d0>
    2894:	21 c0       	rjmp	.+66     	; 0x28d8 <vfprintf+0x166>
    2896:	f8 01       	movw	r30, r16
    2898:	80 81       	ld	r24, Z
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	0e 5f       	subi	r16, 0xFE	; 254
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	44 24       	eor	r4, r4
    28a2:	43 94       	inc	r4
    28a4:	51 2c       	mov	r5, r1
    28a6:	54 01       	movw	r10, r8
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <vfprintf+0x160>
    28aa:	38 01       	movw	r6, r16
    28ac:	f2 e0       	ldi	r31, 0x02	; 2
    28ae:	6f 0e       	add	r6, r31
    28b0:	71 1c       	adc	r7, r1
    28b2:	f8 01       	movw	r30, r16
    28b4:	a0 80       	ld	r10, Z
    28b6:	b1 80       	ldd	r11, Z+1	; 0x01
    28b8:	26 ff       	sbrs	r18, 6
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <vfprintf+0x150>
    28bc:	65 2d       	mov	r22, r5
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <vfprintf+0x154>
    28c2:	6f ef       	ldi	r22, 0xFF	; 255
    28c4:	7f ef       	ldi	r23, 0xFF	; 255
    28c6:	c5 01       	movw	r24, r10
    28c8:	2c 87       	std	Y+12, r18	; 0x0c
    28ca:	9a d2       	rcall	.+1332   	; 0x2e00 <strnlen>
    28cc:	2c 01       	movw	r4, r24
    28ce:	83 01       	movw	r16, r6
    28d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    28d2:	2f 77       	andi	r18, 0x7F	; 127
    28d4:	22 2e       	mov	r2, r18
    28d6:	16 c0       	rjmp	.+44     	; 0x2904 <vfprintf+0x192>
    28d8:	38 01       	movw	r6, r16
    28da:	f2 e0       	ldi	r31, 0x02	; 2
    28dc:	6f 0e       	add	r6, r31
    28de:	71 1c       	adc	r7, r1
    28e0:	f8 01       	movw	r30, r16
    28e2:	a0 80       	ld	r10, Z
    28e4:	b1 80       	ldd	r11, Z+1	; 0x01
    28e6:	26 ff       	sbrs	r18, 6
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <vfprintf+0x17e>
    28ea:	65 2d       	mov	r22, r5
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <vfprintf+0x182>
    28f0:	6f ef       	ldi	r22, 0xFF	; 255
    28f2:	7f ef       	ldi	r23, 0xFF	; 255
    28f4:	c5 01       	movw	r24, r10
    28f6:	2c 87       	std	Y+12, r18	; 0x0c
    28f8:	71 d2       	rcall	.+1250   	; 0x2ddc <strnlen_P>
    28fa:	2c 01       	movw	r4, r24
    28fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    28fe:	20 68       	ori	r18, 0x80	; 128
    2900:	22 2e       	mov	r2, r18
    2902:	83 01       	movw	r16, r6
    2904:	23 fc       	sbrc	r2, 3
    2906:	19 c0       	rjmp	.+50     	; 0x293a <vfprintf+0x1c8>
    2908:	83 2d       	mov	r24, r3
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	48 16       	cp	r4, r24
    290e:	59 06       	cpc	r5, r25
    2910:	a0 f4       	brcc	.+40     	; 0x293a <vfprintf+0x1c8>
    2912:	b7 01       	movw	r22, r14
    2914:	80 e2       	ldi	r24, 0x20	; 32
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	7e d2       	rcall	.+1276   	; 0x2e16 <fputc>
    291a:	3a 94       	dec	r3
    291c:	f5 cf       	rjmp	.-22     	; 0x2908 <vfprintf+0x196>
    291e:	f5 01       	movw	r30, r10
    2920:	27 fc       	sbrc	r2, 7
    2922:	85 91       	lpm	r24, Z+
    2924:	27 fe       	sbrs	r2, 7
    2926:	81 91       	ld	r24, Z+
    2928:	5f 01       	movw	r10, r30
    292a:	b7 01       	movw	r22, r14
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	73 d2       	rcall	.+1254   	; 0x2e16 <fputc>
    2930:	31 10       	cpse	r3, r1
    2932:	3a 94       	dec	r3
    2934:	f1 e0       	ldi	r31, 0x01	; 1
    2936:	4f 1a       	sub	r4, r31
    2938:	51 08       	sbc	r5, r1
    293a:	41 14       	cp	r4, r1
    293c:	51 04       	cpc	r5, r1
    293e:	79 f7       	brne	.-34     	; 0x291e <vfprintf+0x1ac>
    2940:	de c0       	rjmp	.+444    	; 0x2afe <vfprintf+0x38c>
    2942:	84 36       	cpi	r24, 0x64	; 100
    2944:	11 f0       	breq	.+4      	; 0x294a <vfprintf+0x1d8>
    2946:	89 36       	cpi	r24, 0x69	; 105
    2948:	31 f5       	brne	.+76     	; 0x2996 <vfprintf+0x224>
    294a:	f8 01       	movw	r30, r16
    294c:	27 ff       	sbrs	r18, 7
    294e:	07 c0       	rjmp	.+14     	; 0x295e <vfprintf+0x1ec>
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	0c 5f       	subi	r16, 0xFC	; 252
    295a:	1f 4f       	sbci	r17, 0xFF	; 255
    295c:	08 c0       	rjmp	.+16     	; 0x296e <vfprintf+0x1fc>
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	07 2e       	mov	r0, r23
    2964:	00 0c       	add	r0, r0
    2966:	88 0b       	sbc	r24, r24
    2968:	99 0b       	sbc	r25, r25
    296a:	0e 5f       	subi	r16, 0xFE	; 254
    296c:	1f 4f       	sbci	r17, 0xFF	; 255
    296e:	2f 76       	andi	r18, 0x6F	; 111
    2970:	72 2e       	mov	r7, r18
    2972:	97 ff       	sbrs	r25, 7
    2974:	09 c0       	rjmp	.+18     	; 0x2988 <vfprintf+0x216>
    2976:	90 95       	com	r25
    2978:	80 95       	com	r24
    297a:	70 95       	com	r23
    297c:	61 95       	neg	r22
    297e:	7f 4f       	sbci	r23, 0xFF	; 255
    2980:	8f 4f       	sbci	r24, 0xFF	; 255
    2982:	9f 4f       	sbci	r25, 0xFF	; 255
    2984:	20 68       	ori	r18, 0x80	; 128
    2986:	72 2e       	mov	r7, r18
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	a4 01       	movw	r20, r8
    298e:	7b d2       	rcall	.+1270   	; 0x2e86 <__ultoa_invert>
    2990:	a8 2e       	mov	r10, r24
    2992:	a8 18       	sub	r10, r8
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <vfprintf+0x2aa>
    2996:	85 37       	cpi	r24, 0x75	; 117
    2998:	29 f4       	brne	.+10     	; 0x29a4 <vfprintf+0x232>
    299a:	2f 7e       	andi	r18, 0xEF	; 239
    299c:	b2 2e       	mov	r11, r18
    299e:	2a e0       	ldi	r18, 0x0A	; 10
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	25 c0       	rjmp	.+74     	; 0x29ee <vfprintf+0x27c>
    29a4:	f2 2f       	mov	r31, r18
    29a6:	f9 7f       	andi	r31, 0xF9	; 249
    29a8:	bf 2e       	mov	r11, r31
    29aa:	8f 36       	cpi	r24, 0x6F	; 111
    29ac:	c1 f0       	breq	.+48     	; 0x29de <vfprintf+0x26c>
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <vfprintf+0x244>
    29b0:	88 35       	cpi	r24, 0x58	; 88
    29b2:	79 f0       	breq	.+30     	; 0x29d2 <vfprintf+0x260>
    29b4:	ad c0       	rjmp	.+346    	; 0x2b10 <vfprintf+0x39e>
    29b6:	80 37       	cpi	r24, 0x70	; 112
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <vfprintf+0x24e>
    29ba:	88 37       	cpi	r24, 0x78	; 120
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <vfprintf+0x254>
    29be:	a8 c0       	rjmp	.+336    	; 0x2b10 <vfprintf+0x39e>
    29c0:	2f 2f       	mov	r18, r31
    29c2:	20 61       	ori	r18, 0x10	; 16
    29c4:	b2 2e       	mov	r11, r18
    29c6:	b4 fe       	sbrs	r11, 4
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <vfprintf+0x272>
    29ca:	8b 2d       	mov	r24, r11
    29cc:	84 60       	ori	r24, 0x04	; 4
    29ce:	b8 2e       	mov	r11, r24
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <vfprintf+0x272>
    29d2:	24 ff       	sbrs	r18, 4
    29d4:	0a c0       	rjmp	.+20     	; 0x29ea <vfprintf+0x278>
    29d6:	9f 2f       	mov	r25, r31
    29d8:	96 60       	ori	r25, 0x06	; 6
    29da:	b9 2e       	mov	r11, r25
    29dc:	06 c0       	rjmp	.+12     	; 0x29ea <vfprintf+0x278>
    29de:	28 e0       	ldi	r18, 0x08	; 8
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <vfprintf+0x27c>
    29e4:	20 e1       	ldi	r18, 0x10	; 16
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <vfprintf+0x27c>
    29ea:	20 e1       	ldi	r18, 0x10	; 16
    29ec:	32 e0       	ldi	r19, 0x02	; 2
    29ee:	f8 01       	movw	r30, r16
    29f0:	b7 fe       	sbrs	r11, 7
    29f2:	07 c0       	rjmp	.+14     	; 0x2a02 <vfprintf+0x290>
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	0c 5f       	subi	r16, 0xFC	; 252
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	06 c0       	rjmp	.+12     	; 0x2a0e <vfprintf+0x29c>
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 5f       	subi	r16, 0xFE	; 254
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	a4 01       	movw	r20, r8
    2a10:	3a d2       	rcall	.+1140   	; 0x2e86 <__ultoa_invert>
    2a12:	a8 2e       	mov	r10, r24
    2a14:	a8 18       	sub	r10, r8
    2a16:	fb 2d       	mov	r31, r11
    2a18:	ff 77       	andi	r31, 0x7F	; 127
    2a1a:	7f 2e       	mov	r7, r31
    2a1c:	76 fe       	sbrs	r7, 6
    2a1e:	0b c0       	rjmp	.+22     	; 0x2a36 <vfprintf+0x2c4>
    2a20:	37 2d       	mov	r19, r7
    2a22:	3e 7f       	andi	r19, 0xFE	; 254
    2a24:	a5 14       	cp	r10, r5
    2a26:	50 f4       	brcc	.+20     	; 0x2a3c <vfprintf+0x2ca>
    2a28:	74 fe       	sbrs	r7, 4
    2a2a:	0a c0       	rjmp	.+20     	; 0x2a40 <vfprintf+0x2ce>
    2a2c:	72 fc       	sbrc	r7, 2
    2a2e:	08 c0       	rjmp	.+16     	; 0x2a40 <vfprintf+0x2ce>
    2a30:	37 2d       	mov	r19, r7
    2a32:	3e 7e       	andi	r19, 0xEE	; 238
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <vfprintf+0x2ce>
    2a36:	ba 2c       	mov	r11, r10
    2a38:	37 2d       	mov	r19, r7
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <vfprintf+0x2d0>
    2a3c:	ba 2c       	mov	r11, r10
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <vfprintf+0x2d0>
    2a40:	b5 2c       	mov	r11, r5
    2a42:	34 ff       	sbrs	r19, 4
    2a44:	0d c0       	rjmp	.+26     	; 0x2a60 <vfprintf+0x2ee>
    2a46:	fe 01       	movw	r30, r28
    2a48:	ea 0d       	add	r30, r10
    2a4a:	f1 1d       	adc	r31, r1
    2a4c:	80 81       	ld	r24, Z
    2a4e:	80 33       	cpi	r24, 0x30	; 48
    2a50:	11 f4       	brne	.+4      	; 0x2a56 <vfprintf+0x2e4>
    2a52:	39 7e       	andi	r19, 0xE9	; 233
    2a54:	09 c0       	rjmp	.+18     	; 0x2a68 <vfprintf+0x2f6>
    2a56:	32 ff       	sbrs	r19, 2
    2a58:	06 c0       	rjmp	.+12     	; 0x2a66 <vfprintf+0x2f4>
    2a5a:	b3 94       	inc	r11
    2a5c:	b3 94       	inc	r11
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <vfprintf+0x2f6>
    2a60:	83 2f       	mov	r24, r19
    2a62:	86 78       	andi	r24, 0x86	; 134
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <vfprintf+0x2f6>
    2a66:	b3 94       	inc	r11
    2a68:	33 fd       	sbrc	r19, 3
    2a6a:	12 c0       	rjmp	.+36     	; 0x2a90 <vfprintf+0x31e>
    2a6c:	30 ff       	sbrs	r19, 0
    2a6e:	06 c0       	rjmp	.+12     	; 0x2a7c <vfprintf+0x30a>
    2a70:	5a 2c       	mov	r5, r10
    2a72:	b3 14       	cp	r11, r3
    2a74:	18 f4       	brcc	.+6      	; 0x2a7c <vfprintf+0x30a>
    2a76:	53 0c       	add	r5, r3
    2a78:	5b 18       	sub	r5, r11
    2a7a:	b3 2c       	mov	r11, r3
    2a7c:	b3 14       	cp	r11, r3
    2a7e:	60 f4       	brcc	.+24     	; 0x2a98 <vfprintf+0x326>
    2a80:	b7 01       	movw	r22, r14
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	3c 87       	std	Y+12, r19	; 0x0c
    2a88:	c6 d1       	rcall	.+908    	; 0x2e16 <fputc>
    2a8a:	b3 94       	inc	r11
    2a8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a8e:	f6 cf       	rjmp	.-20     	; 0x2a7c <vfprintf+0x30a>
    2a90:	b3 14       	cp	r11, r3
    2a92:	10 f4       	brcc	.+4      	; 0x2a98 <vfprintf+0x326>
    2a94:	3b 18       	sub	r3, r11
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <vfprintf+0x328>
    2a98:	31 2c       	mov	r3, r1
    2a9a:	34 ff       	sbrs	r19, 4
    2a9c:	11 c0       	rjmp	.+34     	; 0x2ac0 <vfprintf+0x34e>
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	80 e3       	ldi	r24, 0x30	; 48
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	3c 87       	std	Y+12, r19	; 0x0c
    2aa6:	b7 d1       	rcall	.+878    	; 0x2e16 <fputc>
    2aa8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aaa:	32 ff       	sbrs	r19, 2
    2aac:	16 c0       	rjmp	.+44     	; 0x2ada <vfprintf+0x368>
    2aae:	31 fd       	sbrc	r19, 1
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <vfprintf+0x346>
    2ab2:	88 e7       	ldi	r24, 0x78	; 120
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <vfprintf+0x34a>
    2ab8:	88 e5       	ldi	r24, 0x58	; 88
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	b7 01       	movw	r22, r14
    2abe:	0c c0       	rjmp	.+24     	; 0x2ad8 <vfprintf+0x366>
    2ac0:	83 2f       	mov	r24, r19
    2ac2:	86 78       	andi	r24, 0x86	; 134
    2ac4:	51 f0       	breq	.+20     	; 0x2ada <vfprintf+0x368>
    2ac6:	31 ff       	sbrs	r19, 1
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <vfprintf+0x35c>
    2aca:	8b e2       	ldi	r24, 0x2B	; 43
    2acc:	01 c0       	rjmp	.+2      	; 0x2ad0 <vfprintf+0x35e>
    2ace:	80 e2       	ldi	r24, 0x20	; 32
    2ad0:	37 fd       	sbrc	r19, 7
    2ad2:	8d e2       	ldi	r24, 0x2D	; 45
    2ad4:	b7 01       	movw	r22, r14
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e d1       	rcall	.+828    	; 0x2e16 <fputc>
    2ada:	a5 14       	cp	r10, r5
    2adc:	30 f4       	brcc	.+12     	; 0x2aea <vfprintf+0x378>
    2ade:	b7 01       	movw	r22, r14
    2ae0:	80 e3       	ldi	r24, 0x30	; 48
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	98 d1       	rcall	.+816    	; 0x2e16 <fputc>
    2ae6:	5a 94       	dec	r5
    2ae8:	f8 cf       	rjmp	.-16     	; 0x2ada <vfprintf+0x368>
    2aea:	aa 94       	dec	r10
    2aec:	f4 01       	movw	r30, r8
    2aee:	ea 0d       	add	r30, r10
    2af0:	f1 1d       	adc	r31, r1
    2af2:	80 81       	ld	r24, Z
    2af4:	b7 01       	movw	r22, r14
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	8e d1       	rcall	.+796    	; 0x2e16 <fputc>
    2afa:	a1 10       	cpse	r10, r1
    2afc:	f6 cf       	rjmp	.-20     	; 0x2aea <vfprintf+0x378>
    2afe:	33 20       	and	r3, r3
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <vfprintf+0x392>
    2b02:	5d ce       	rjmp	.-838    	; 0x27be <vfprintf+0x4c>
    2b04:	b7 01       	movw	r22, r14
    2b06:	80 e2       	ldi	r24, 0x20	; 32
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	85 d1       	rcall	.+778    	; 0x2e16 <fputc>
    2b0c:	3a 94       	dec	r3
    2b0e:	f7 cf       	rjmp	.-18     	; 0x2afe <vfprintf+0x38c>
    2b10:	f7 01       	movw	r30, r14
    2b12:	86 81       	ldd	r24, Z+6	; 0x06
    2b14:	97 81       	ldd	r25, Z+7	; 0x07
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <vfprintf+0x3aa>
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	9f ef       	ldi	r25, 0xFF	; 255
    2b1c:	2c 96       	adiw	r28, 0x0c	; 12
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	df 90       	pop	r13
    2b36:	cf 90       	pop	r12
    2b38:	bf 90       	pop	r11
    2b3a:	af 90       	pop	r10
    2b3c:	9f 90       	pop	r9
    2b3e:	8f 90       	pop	r8
    2b40:	7f 90       	pop	r7
    2b42:	6f 90       	pop	r6
    2b44:	5f 90       	pop	r5
    2b46:	4f 90       	pop	r4
    2b48:	3f 90       	pop	r3
    2b4a:	2f 90       	pop	r2
    2b4c:	08 95       	ret

00002b4e <calloc>:
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	86 9f       	mul	r24, r22
    2b58:	80 01       	movw	r16, r0
    2b5a:	87 9f       	mul	r24, r23
    2b5c:	10 0d       	add	r17, r0
    2b5e:	96 9f       	mul	r25, r22
    2b60:	10 0d       	add	r17, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	c8 01       	movw	r24, r16
    2b66:	0d d0       	rcall	.+26     	; 0x2b82 <malloc>
    2b68:	ec 01       	movw	r28, r24
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <calloc+0x28>
    2b6e:	a8 01       	movw	r20, r16
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	3e d1       	rcall	.+636    	; 0x2df2 <memset>
    2b76:	ce 01       	movw	r24, r28
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	08 95       	ret

00002b82 <malloc>:
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	82 30       	cpi	r24, 0x02	; 2
    2b88:	91 05       	cpc	r25, r1
    2b8a:	10 f4       	brcc	.+4      	; 0x2b90 <malloc+0xe>
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	e0 91 3a 0e 	lds	r30, 0x0E3A	; 0x800e3a <__flp>
    2b94:	f0 91 3b 0e 	lds	r31, 0x0E3B	; 0x800e3b <__flp+0x1>
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	c0 e0       	ldi	r28, 0x00	; 0
    2b9e:	d0 e0       	ldi	r29, 0x00	; 0
    2ba0:	30 97       	sbiw	r30, 0x00	; 0
    2ba2:	11 f1       	breq	.+68     	; 0x2be8 <malloc+0x66>
    2ba4:	40 81       	ld	r20, Z
    2ba6:	51 81       	ldd	r21, Z+1	; 0x01
    2ba8:	48 17       	cp	r20, r24
    2baa:	59 07       	cpc	r21, r25
    2bac:	c0 f0       	brcs	.+48     	; 0x2bde <malloc+0x5c>
    2bae:	48 17       	cp	r20, r24
    2bb0:	59 07       	cpc	r21, r25
    2bb2:	61 f4       	brne	.+24     	; 0x2bcc <malloc+0x4a>
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	93 81       	ldd	r25, Z+3	; 0x03
    2bb8:	20 97       	sbiw	r28, 0x00	; 0
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <malloc+0x40>
    2bbc:	9b 83       	std	Y+3, r25	; 0x03
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
    2bc0:	2b c0       	rjmp	.+86     	; 0x2c18 <malloc+0x96>
    2bc2:	90 93 3b 0e 	sts	0x0E3B, r25	; 0x800e3b <__flp+0x1>
    2bc6:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <__flp>
    2bca:	26 c0       	rjmp	.+76     	; 0x2c18 <malloc+0x96>
    2bcc:	21 15       	cp	r18, r1
    2bce:	31 05       	cpc	r19, r1
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <malloc+0x56>
    2bd2:	42 17       	cp	r20, r18
    2bd4:	53 07       	cpc	r21, r19
    2bd6:	18 f4       	brcc	.+6      	; 0x2bde <malloc+0x5c>
    2bd8:	9a 01       	movw	r18, r20
    2bda:	be 01       	movw	r22, r28
    2bdc:	df 01       	movw	r26, r30
    2bde:	ef 01       	movw	r28, r30
    2be0:	02 80       	ldd	r0, Z+2	; 0x02
    2be2:	f3 81       	ldd	r31, Z+3	; 0x03
    2be4:	e0 2d       	mov	r30, r0
    2be6:	dc cf       	rjmp	.-72     	; 0x2ba0 <malloc+0x1e>
    2be8:	21 15       	cp	r18, r1
    2bea:	31 05       	cpc	r19, r1
    2bec:	09 f1       	breq	.+66     	; 0x2c30 <malloc+0xae>
    2bee:	28 1b       	sub	r18, r24
    2bf0:	39 0b       	sbc	r19, r25
    2bf2:	24 30       	cpi	r18, 0x04	; 4
    2bf4:	31 05       	cpc	r19, r1
    2bf6:	90 f4       	brcc	.+36     	; 0x2c1c <malloc+0x9a>
    2bf8:	12 96       	adiw	r26, 0x02	; 2
    2bfa:	8d 91       	ld	r24, X+
    2bfc:	9c 91       	ld	r25, X
    2bfe:	13 97       	sbiw	r26, 0x03	; 3
    2c00:	61 15       	cp	r22, r1
    2c02:	71 05       	cpc	r23, r1
    2c04:	21 f0       	breq	.+8      	; 0x2c0e <malloc+0x8c>
    2c06:	fb 01       	movw	r30, r22
    2c08:	93 83       	std	Z+3, r25	; 0x03
    2c0a:	82 83       	std	Z+2, r24	; 0x02
    2c0c:	04 c0       	rjmp	.+8      	; 0x2c16 <malloc+0x94>
    2c0e:	90 93 3b 0e 	sts	0x0E3B, r25	; 0x800e3b <__flp+0x1>
    2c12:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <__flp>
    2c16:	fd 01       	movw	r30, r26
    2c18:	32 96       	adiw	r30, 0x02	; 2
    2c1a:	44 c0       	rjmp	.+136    	; 0x2ca4 <malloc+0x122>
    2c1c:	fd 01       	movw	r30, r26
    2c1e:	e2 0f       	add	r30, r18
    2c20:	f3 1f       	adc	r31, r19
    2c22:	81 93       	st	Z+, r24
    2c24:	91 93       	st	Z+, r25
    2c26:	22 50       	subi	r18, 0x02	; 2
    2c28:	31 09       	sbc	r19, r1
    2c2a:	2d 93       	st	X+, r18
    2c2c:	3c 93       	st	X, r19
    2c2e:	3a c0       	rjmp	.+116    	; 0x2ca4 <malloc+0x122>
    2c30:	20 91 38 0e 	lds	r18, 0x0E38	; 0x800e38 <__brkval>
    2c34:	30 91 39 0e 	lds	r19, 0x0E39	; 0x800e39 <__brkval+0x1>
    2c38:	23 2b       	or	r18, r19
    2c3a:	41 f4       	brne	.+16     	; 0x2c4c <malloc+0xca>
    2c3c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_start>
    2c40:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_start+0x1>
    2c44:	30 93 39 0e 	sts	0x0E39, r19	; 0x800e39 <__brkval+0x1>
    2c48:	20 93 38 0e 	sts	0x0E38, r18	; 0x800e38 <__brkval>
    2c4c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_end>
    2c50:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_end+0x1>
    2c54:	21 15       	cp	r18, r1
    2c56:	31 05       	cpc	r19, r1
    2c58:	41 f4       	brne	.+16     	; 0x2c6a <malloc+0xe8>
    2c5a:	2d b7       	in	r18, 0x3d	; 61
    2c5c:	3e b7       	in	r19, 0x3e	; 62
    2c5e:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__malloc_margin>
    2c62:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__malloc_margin+0x1>
    2c66:	24 1b       	sub	r18, r20
    2c68:	35 0b       	sbc	r19, r21
    2c6a:	e0 91 38 0e 	lds	r30, 0x0E38	; 0x800e38 <__brkval>
    2c6e:	f0 91 39 0e 	lds	r31, 0x0E39	; 0x800e39 <__brkval+0x1>
    2c72:	e2 17       	cp	r30, r18
    2c74:	f3 07       	cpc	r31, r19
    2c76:	a0 f4       	brcc	.+40     	; 0x2ca0 <malloc+0x11e>
    2c78:	2e 1b       	sub	r18, r30
    2c7a:	3f 0b       	sbc	r19, r31
    2c7c:	28 17       	cp	r18, r24
    2c7e:	39 07       	cpc	r19, r25
    2c80:	78 f0       	brcs	.+30     	; 0x2ca0 <malloc+0x11e>
    2c82:	ac 01       	movw	r20, r24
    2c84:	4e 5f       	subi	r20, 0xFE	; 254
    2c86:	5f 4f       	sbci	r21, 0xFF	; 255
    2c88:	24 17       	cp	r18, r20
    2c8a:	35 07       	cpc	r19, r21
    2c8c:	48 f0       	brcs	.+18     	; 0x2ca0 <malloc+0x11e>
    2c8e:	4e 0f       	add	r20, r30
    2c90:	5f 1f       	adc	r21, r31
    2c92:	50 93 39 0e 	sts	0x0E39, r21	; 0x800e39 <__brkval+0x1>
    2c96:	40 93 38 0e 	sts	0x0E38, r20	; 0x800e38 <__brkval>
    2c9a:	81 93       	st	Z+, r24
    2c9c:	91 93       	st	Z+, r25
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <malloc+0x122>
    2ca0:	e0 e0       	ldi	r30, 0x00	; 0
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	cf 01       	movw	r24, r30
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <free>:
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <free+0xe>
    2cb8:	8c c0       	rjmp	.+280    	; 0x2dd2 <free+0x126>
    2cba:	fc 01       	movw	r30, r24
    2cbc:	32 97       	sbiw	r30, 0x02	; 2
    2cbe:	13 82       	std	Z+3, r1	; 0x03
    2cc0:	12 82       	std	Z+2, r1	; 0x02
    2cc2:	00 91 3a 0e 	lds	r16, 0x0E3A	; 0x800e3a <__flp>
    2cc6:	10 91 3b 0e 	lds	r17, 0x0E3B	; 0x800e3b <__flp+0x1>
    2cca:	01 15       	cp	r16, r1
    2ccc:	11 05       	cpc	r17, r1
    2cce:	81 f4       	brne	.+32     	; 0x2cf0 <free+0x44>
    2cd0:	20 81       	ld	r18, Z
    2cd2:	31 81       	ldd	r19, Z+1	; 0x01
    2cd4:	82 0f       	add	r24, r18
    2cd6:	93 1f       	adc	r25, r19
    2cd8:	20 91 38 0e 	lds	r18, 0x0E38	; 0x800e38 <__brkval>
    2cdc:	30 91 39 0e 	lds	r19, 0x0E39	; 0x800e39 <__brkval+0x1>
    2ce0:	28 17       	cp	r18, r24
    2ce2:	39 07       	cpc	r19, r25
    2ce4:	79 f5       	brne	.+94     	; 0x2d44 <free+0x98>
    2ce6:	f0 93 39 0e 	sts	0x0E39, r31	; 0x800e39 <__brkval+0x1>
    2cea:	e0 93 38 0e 	sts	0x0E38, r30	; 0x800e38 <__brkval>
    2cee:	71 c0       	rjmp	.+226    	; 0x2dd2 <free+0x126>
    2cf0:	d8 01       	movw	r26, r16
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	ae 17       	cp	r26, r30
    2cf8:	bf 07       	cpc	r27, r31
    2cfa:	50 f4       	brcc	.+20     	; 0x2d10 <free+0x64>
    2cfc:	12 96       	adiw	r26, 0x02	; 2
    2cfe:	2d 91       	ld	r18, X+
    2d00:	3c 91       	ld	r19, X
    2d02:	13 97       	sbiw	r26, 0x03	; 3
    2d04:	ad 01       	movw	r20, r26
    2d06:	21 15       	cp	r18, r1
    2d08:	31 05       	cpc	r19, r1
    2d0a:	09 f1       	breq	.+66     	; 0x2d4e <free+0xa2>
    2d0c:	d9 01       	movw	r26, r18
    2d0e:	f3 cf       	rjmp	.-26     	; 0x2cf6 <free+0x4a>
    2d10:	9d 01       	movw	r18, r26
    2d12:	da 01       	movw	r26, r20
    2d14:	33 83       	std	Z+3, r19	; 0x03
    2d16:	22 83       	std	Z+2, r18	; 0x02
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	86 0f       	add	r24, r22
    2d1e:	97 1f       	adc	r25, r23
    2d20:	82 17       	cp	r24, r18
    2d22:	93 07       	cpc	r25, r19
    2d24:	69 f4       	brne	.+26     	; 0x2d40 <free+0x94>
    2d26:	ec 01       	movw	r28, r24
    2d28:	28 81       	ld	r18, Y
    2d2a:	39 81       	ldd	r19, Y+1	; 0x01
    2d2c:	26 0f       	add	r18, r22
    2d2e:	37 1f       	adc	r19, r23
    2d30:	2e 5f       	subi	r18, 0xFE	; 254
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	31 83       	std	Z+1, r19	; 0x01
    2d36:	20 83       	st	Z, r18
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	93 83       	std	Z+3, r25	; 0x03
    2d3e:	82 83       	std	Z+2, r24	; 0x02
    2d40:	45 2b       	or	r20, r21
    2d42:	29 f4       	brne	.+10     	; 0x2d4e <free+0xa2>
    2d44:	f0 93 3b 0e 	sts	0x0E3B, r31	; 0x800e3b <__flp+0x1>
    2d48:	e0 93 3a 0e 	sts	0x0E3A, r30	; 0x800e3a <__flp>
    2d4c:	42 c0       	rjmp	.+132    	; 0x2dd2 <free+0x126>
    2d4e:	13 96       	adiw	r26, 0x03	; 3
    2d50:	fc 93       	st	X, r31
    2d52:	ee 93       	st	-X, r30
    2d54:	12 97       	sbiw	r26, 0x02	; 2
    2d56:	ed 01       	movw	r28, r26
    2d58:	49 91       	ld	r20, Y+
    2d5a:	59 91       	ld	r21, Y+
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	24 0f       	add	r18, r20
    2d60:	35 1f       	adc	r19, r21
    2d62:	e2 17       	cp	r30, r18
    2d64:	f3 07       	cpc	r31, r19
    2d66:	71 f4       	brne	.+28     	; 0x2d84 <free+0xd8>
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	84 0f       	add	r24, r20
    2d6e:	95 1f       	adc	r25, r21
    2d70:	02 96       	adiw	r24, 0x02	; 2
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	8e 93       	st	-X, r24
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	13 96       	adiw	r26, 0x03	; 3
    2d7e:	9c 93       	st	X, r25
    2d80:	8e 93       	st	-X, r24
    2d82:	12 97       	sbiw	r26, 0x02	; 2
    2d84:	e0 e0       	ldi	r30, 0x00	; 0
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	d8 01       	movw	r26, r16
    2d8a:	12 96       	adiw	r26, 0x02	; 2
    2d8c:	8d 91       	ld	r24, X+
    2d8e:	9c 91       	ld	r25, X
    2d90:	13 97       	sbiw	r26, 0x03	; 3
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	19 f0       	breq	.+6      	; 0x2d9c <free+0xf0>
    2d96:	f8 01       	movw	r30, r16
    2d98:	8c 01       	movw	r16, r24
    2d9a:	f6 cf       	rjmp	.-20     	; 0x2d88 <free+0xdc>
    2d9c:	8d 91       	ld	r24, X+
    2d9e:	9c 91       	ld	r25, X
    2da0:	98 01       	movw	r18, r16
    2da2:	2e 5f       	subi	r18, 0xFE	; 254
    2da4:	3f 4f       	sbci	r19, 0xFF	; 255
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	20 91 38 0e 	lds	r18, 0x0E38	; 0x800e38 <__brkval>
    2dae:	30 91 39 0e 	lds	r19, 0x0E39	; 0x800e39 <__brkval+0x1>
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	69 f4       	brne	.+26     	; 0x2dd2 <free+0x126>
    2db8:	30 97       	sbiw	r30, 0x00	; 0
    2dba:	29 f4       	brne	.+10     	; 0x2dc6 <free+0x11a>
    2dbc:	10 92 3b 0e 	sts	0x0E3B, r1	; 0x800e3b <__flp+0x1>
    2dc0:	10 92 3a 0e 	sts	0x0E3A, r1	; 0x800e3a <__flp>
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <free+0x11e>
    2dc6:	13 82       	std	Z+3, r1	; 0x03
    2dc8:	12 82       	std	Z+2, r1	; 0x02
    2dca:	10 93 39 0e 	sts	0x0E39, r17	; 0x800e39 <__brkval+0x1>
    2dce:	00 93 38 0e 	sts	0x0E38, r16	; 0x800e38 <__brkval>
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	08 95       	ret

00002ddc <strnlen_P>:
    2ddc:	fc 01       	movw	r30, r24
    2dde:	05 90       	lpm	r0, Z+
    2de0:	61 50       	subi	r22, 0x01	; 1
    2de2:	70 40       	sbci	r23, 0x00	; 0
    2de4:	01 10       	cpse	r0, r1
    2de6:	d8 f7       	brcc	.-10     	; 0x2dde <strnlen_P+0x2>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	8e 0f       	add	r24, r30
    2dee:	9f 1f       	adc	r25, r31
    2df0:	08 95       	ret

00002df2 <memset>:
    2df2:	dc 01       	movw	r26, r24
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <memset+0x6>
    2df6:	6d 93       	st	X+, r22
    2df8:	41 50       	subi	r20, 0x01	; 1
    2dfa:	50 40       	sbci	r21, 0x00	; 0
    2dfc:	e0 f7       	brcc	.-8      	; 0x2df6 <memset+0x4>
    2dfe:	08 95       	ret

00002e00 <strnlen>:
    2e00:	fc 01       	movw	r30, r24
    2e02:	61 50       	subi	r22, 0x01	; 1
    2e04:	70 40       	sbci	r23, 0x00	; 0
    2e06:	01 90       	ld	r0, Z+
    2e08:	01 10       	cpse	r0, r1
    2e0a:	d8 f7       	brcc	.-10     	; 0x2e02 <strnlen+0x2>
    2e0c:	80 95       	com	r24
    2e0e:	90 95       	com	r25
    2e10:	8e 0f       	add	r24, r30
    2e12:	9f 1f       	adc	r25, r31
    2e14:	08 95       	ret

00002e16 <fputc>:
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	fb 01       	movw	r30, r22
    2e20:	23 81       	ldd	r18, Z+3	; 0x03
    2e22:	21 fd       	sbrc	r18, 1
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <fputc+0x16>
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	9f ef       	ldi	r25, 0xFF	; 255
    2e2a:	28 c0       	rjmp	.+80     	; 0x2e7c <fputc+0x66>
    2e2c:	22 ff       	sbrs	r18, 2
    2e2e:	16 c0       	rjmp	.+44     	; 0x2e5c <fputc+0x46>
    2e30:	46 81       	ldd	r20, Z+6	; 0x06
    2e32:	57 81       	ldd	r21, Z+7	; 0x07
    2e34:	24 81       	ldd	r18, Z+4	; 0x04
    2e36:	35 81       	ldd	r19, Z+5	; 0x05
    2e38:	42 17       	cp	r20, r18
    2e3a:	53 07       	cpc	r21, r19
    2e3c:	44 f4       	brge	.+16     	; 0x2e4e <fputc+0x38>
    2e3e:	a0 81       	ld	r26, Z
    2e40:	b1 81       	ldd	r27, Z+1	; 0x01
    2e42:	9d 01       	movw	r18, r26
    2e44:	2f 5f       	subi	r18, 0xFF	; 255
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	31 83       	std	Z+1, r19	; 0x01
    2e4a:	20 83       	st	Z, r18
    2e4c:	8c 93       	st	X, r24
    2e4e:	26 81       	ldd	r18, Z+6	; 0x06
    2e50:	37 81       	ldd	r19, Z+7	; 0x07
    2e52:	2f 5f       	subi	r18, 0xFF	; 255
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	37 83       	std	Z+7, r19	; 0x07
    2e58:	26 83       	std	Z+6, r18	; 0x06
    2e5a:	10 c0       	rjmp	.+32     	; 0x2e7c <fputc+0x66>
    2e5c:	eb 01       	movw	r28, r22
    2e5e:	09 2f       	mov	r16, r25
    2e60:	18 2f       	mov	r17, r24
    2e62:	00 84       	ldd	r0, Z+8	; 0x08
    2e64:	f1 85       	ldd	r31, Z+9	; 0x09
    2e66:	e0 2d       	mov	r30, r0
    2e68:	19 95       	eicall
    2e6a:	89 2b       	or	r24, r25
    2e6c:	e1 f6       	brne	.-72     	; 0x2e26 <fputc+0x10>
    2e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e70:	9f 81       	ldd	r25, Y+7	; 0x07
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	9f 83       	std	Y+7, r25	; 0x07
    2e76:	8e 83       	std	Y+6, r24	; 0x06
    2e78:	81 2f       	mov	r24, r17
    2e7a:	90 2f       	mov	r25, r16
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	08 95       	ret

00002e86 <__ultoa_invert>:
    2e86:	fa 01       	movw	r30, r20
    2e88:	aa 27       	eor	r26, r26
    2e8a:	28 30       	cpi	r18, 0x08	; 8
    2e8c:	51 f1       	breq	.+84     	; 0x2ee2 <__ultoa_invert+0x5c>
    2e8e:	20 31       	cpi	r18, 0x10	; 16
    2e90:	81 f1       	breq	.+96     	; 0x2ef2 <__ultoa_invert+0x6c>
    2e92:	e8 94       	clt
    2e94:	6f 93       	push	r22
    2e96:	6e 7f       	andi	r22, 0xFE	; 254
    2e98:	6e 5f       	subi	r22, 0xFE	; 254
    2e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea0:	af 4f       	sbci	r26, 0xFF	; 255
    2ea2:	b1 e0       	ldi	r27, 0x01	; 1
    2ea4:	3e d0       	rcall	.+124    	; 0x2f22 <__ultoa_invert+0x9c>
    2ea6:	b4 e0       	ldi	r27, 0x04	; 4
    2ea8:	3c d0       	rcall	.+120    	; 0x2f22 <__ultoa_invert+0x9c>
    2eaa:	67 0f       	add	r22, r23
    2eac:	78 1f       	adc	r23, r24
    2eae:	89 1f       	adc	r24, r25
    2eb0:	9a 1f       	adc	r25, r26
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	68 0f       	add	r22, r24
    2eb6:	79 1f       	adc	r23, r25
    2eb8:	8a 1f       	adc	r24, r26
    2eba:	91 1d       	adc	r25, r1
    2ebc:	a1 1d       	adc	r26, r1
    2ebe:	6a 0f       	add	r22, r26
    2ec0:	71 1d       	adc	r23, r1
    2ec2:	81 1d       	adc	r24, r1
    2ec4:	91 1d       	adc	r25, r1
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	20 d0       	rcall	.+64     	; 0x2f0a <__ultoa_invert+0x84>
    2eca:	09 f4       	brne	.+2      	; 0x2ece <__ultoa_invert+0x48>
    2ecc:	68 94       	set
    2ece:	3f 91       	pop	r19
    2ed0:	2a e0       	ldi	r18, 0x0A	; 10
    2ed2:	26 9f       	mul	r18, r22
    2ed4:	11 24       	eor	r1, r1
    2ed6:	30 19       	sub	r19, r0
    2ed8:	30 5d       	subi	r19, 0xD0	; 208
    2eda:	31 93       	st	Z+, r19
    2edc:	de f6       	brtc	.-74     	; 0x2e94 <__ultoa_invert+0xe>
    2ede:	cf 01       	movw	r24, r30
    2ee0:	08 95       	ret
    2ee2:	46 2f       	mov	r20, r22
    2ee4:	47 70       	andi	r20, 0x07	; 7
    2ee6:	40 5d       	subi	r20, 0xD0	; 208
    2ee8:	41 93       	st	Z+, r20
    2eea:	b3 e0       	ldi	r27, 0x03	; 3
    2eec:	0f d0       	rcall	.+30     	; 0x2f0c <__ultoa_invert+0x86>
    2eee:	c9 f7       	brne	.-14     	; 0x2ee2 <__ultoa_invert+0x5c>
    2ef0:	f6 cf       	rjmp	.-20     	; 0x2ede <__ultoa_invert+0x58>
    2ef2:	46 2f       	mov	r20, r22
    2ef4:	4f 70       	andi	r20, 0x0F	; 15
    2ef6:	40 5d       	subi	r20, 0xD0	; 208
    2ef8:	4a 33       	cpi	r20, 0x3A	; 58
    2efa:	18 f0       	brcs	.+6      	; 0x2f02 <__ultoa_invert+0x7c>
    2efc:	49 5d       	subi	r20, 0xD9	; 217
    2efe:	31 fd       	sbrc	r19, 1
    2f00:	40 52       	subi	r20, 0x20	; 32
    2f02:	41 93       	st	Z+, r20
    2f04:	02 d0       	rcall	.+4      	; 0x2f0a <__ultoa_invert+0x84>
    2f06:	a9 f7       	brne	.-22     	; 0x2ef2 <__ultoa_invert+0x6c>
    2f08:	ea cf       	rjmp	.-44     	; 0x2ede <__ultoa_invert+0x58>
    2f0a:	b4 e0       	ldi	r27, 0x04	; 4
    2f0c:	a6 95       	lsr	r26
    2f0e:	97 95       	ror	r25
    2f10:	87 95       	ror	r24
    2f12:	77 95       	ror	r23
    2f14:	67 95       	ror	r22
    2f16:	ba 95       	dec	r27
    2f18:	c9 f7       	brne	.-14     	; 0x2f0c <__ultoa_invert+0x86>
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	61 05       	cpc	r22, r1
    2f1e:	71 05       	cpc	r23, r1
    2f20:	08 95       	ret
    2f22:	9b 01       	movw	r18, r22
    2f24:	ac 01       	movw	r20, r24
    2f26:	0a 2e       	mov	r0, r26
    2f28:	06 94       	lsr	r0
    2f2a:	57 95       	ror	r21
    2f2c:	47 95       	ror	r20
    2f2e:	37 95       	ror	r19
    2f30:	27 95       	ror	r18
    2f32:	ba 95       	dec	r27
    2f34:	c9 f7       	brne	.-14     	; 0x2f28 <__ultoa_invert+0xa2>
    2f36:	62 0f       	add	r22, r18
    2f38:	73 1f       	adc	r23, r19
    2f3a:	84 1f       	adc	r24, r20
    2f3c:	95 1f       	adc	r25, r21
    2f3e:	a0 1d       	adc	r26, r0
    2f40:	08 95       	ret

00002f42 <_exit>:
    2f42:	f8 94       	cli

00002f44 <__stop_program>:
    2f44:	ff cf       	rjmp	.-2      	; 0x2f44 <__stop_program>
