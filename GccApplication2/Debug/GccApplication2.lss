
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000066a  00800200  0000289a  0000292e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000289a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000396  0080086a  0080086a  00002f98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000280c  00000000  00000000  00003677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b31  00000000  00000000  00005e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018c1  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000075c  00000000  00000000  00008278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c0e  00000000  00000000  000089d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000171e  00000000  00000000  000095e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  0000ad00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c4       	rjmp	.+2120   	; 0x8ae <__vector_25>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c0       	rjmp	.+128    	; 0x10e <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c5       	rjmp	.+2598   	; 0xab8 <__vector_36>
      92:	00 00       	nop
      94:	3c c0       	rjmp	.+120    	; 0x10e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c0       	rjmp	.+116    	; 0x10e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c0       	rjmp	.+112    	; 0x10e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c0       	rjmp	.+108    	; 0x10e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c0       	rjmp	.+104    	; 0x10e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c0       	rjmp	.+100    	; 0x10e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c0       	rjmp	.+96     	; 0x10e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c0       	rjmp	.+92     	; 0x10e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c0       	rjmp	.+88     	; 0x10e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c0       	rjmp	.+84     	; 0x10e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c0       	rjmp	.+80     	; 0x10e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c0       	rjmp	.+76     	; 0x10e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c0       	rjmp	.+72     	; 0x10e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c0       	rjmp	.+68     	; 0x10e <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	18 e0       	ldi	r17, 0x08	; 8
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	ea e9       	ldi	r30, 0x9A	; 154
      e4:	f8 e2       	ldi	r31, 0x28	; 40
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	aa 36       	cpi	r26, 0x6A	; 106
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	2c e0       	ldi	r18, 0x0C	; 12
      f8:	aa e6       	ldi	r26, 0x6A	; 106
      fa:	b8 e0       	ldi	r27, 0x08	; 8
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a0 30       	cpi	r26, 0x00	; 0
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 84 0b 	call	0x1708	; 0x1708 <main>
     10a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <dxl_get_result>:
     110:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     114:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     118:	08 95       	ret

0000011a <dxl_set_txpacket_id>:
     11a:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <__data_end+0x2>
     11e:	08 95       	ret

00000120 <dxl_set_txpacket_instruction>:
     120:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     124:	08 95       	ret

00000126 <dxl_set_txpacket_parameter>:
     126:	fc 01       	movw	r30, r24
     128:	e6 59       	subi	r30, 0x96	; 150
     12a:	f7 4f       	sbci	r31, 0xF7	; 247
     12c:	65 83       	std	Z+5, r22	; 0x05
     12e:	08 95       	ret

00000130 <dxl_set_txpacket_length>:
     130:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     134:	08 95       	ret

00000136 <dxl_get_rxpacket_error>:
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <gbStatusPacket+0x4>
     13e:	98 23       	and	r25, r24
     140:	11 f0       	breq	.+4      	; 0x146 <dxl_get_rxpacket_error+0x10>
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	c9 01       	movw	r24, r18
     148:	08 95       	ret

0000014a <dxl_get_rxpacket_length>:
     14a:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <gbStatusPacket+0x3>
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <dxl_get_rxpacket_parameter>:
     152:	fc 01       	movw	r30, r24
     154:	e6 5f       	subi	r30, 0xF6	; 246
     156:	f6 4f       	sbci	r31, 0xF6	; 246
     158:	85 81       	ldd	r24, Z+5	; 0x05
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <dxl_makeword>:
     15e:	36 2f       	mov	r19, r22
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	28 0f       	add	r18, r24
     164:	39 1f       	adc	r19, r25
     166:	c9 01       	movw	r24, r18
     168:	08 95       	ret

0000016a <dxl_get_lowbyte>:
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <dxl_get_highbyte>:
     172:	80 70       	andi	r24, 0x00	; 0
     174:	89 2f       	mov	r24, r25
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <dxl_rx_packet>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     186:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <dxl_rx_packet+0x16>
     18e:	b8 c0       	rjmp	.+368    	; 0x300 <dxl_rx_packet+0x186>
     190:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <__data_end+0x2>
     194:	8e 3f       	cpi	r24, 0xFE	; 254
     196:	09 f4       	brne	.+2      	; 0x19a <dxl_rx_packet+0x20>
     198:	a9 c0       	rjmp	.+338    	; 0x2ec <dxl_rx_packet+0x172>
     19a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     19e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <dxl_rx_packet+0x36>
     1a6:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <gbRxGetLength>
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <gbRxPacketLength>
     1b0:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <gbRxGetLength>
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	60 91 50 09 	lds	r22, 0x0950	; 0x800950 <gbRxPacketLength>
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	86 5f       	subi	r24, 0xF6	; 246
     1c2:	96 4f       	sbci	r25, 0xF6	; 246
     1c4:	49 d3       	rcall	.+1682   	; 0x858 <dxl_hal_rx>
     1c6:	90 91 51 09 	lds	r25, 0x0951	; 0x800951 <gbRxGetLength>
     1ca:	98 0f       	add	r25, r24
     1cc:	90 93 51 09 	sts	0x0951, r25	; 0x800951 <gbRxGetLength>
     1d0:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <gbRxPacketLength>
     1d4:	98 17       	cp	r25, r24
     1d6:	18 f4       	brcc	.+6      	; 0x1de <dxl_rx_packet+0x64>
     1d8:	4a d2       	rcall	.+1172   	; 0x66e <dxl_hal_timeout>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	71 f0       	breq	.+28     	; 0x1fa <dxl_rx_packet+0x80>
     1de:	70 91 51 09 	lds	r23, 0x0951	; 0x800951 <gbRxGetLength>
     1e2:	47 2f       	mov	r20, r23
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	da 01       	movw	r26, r20
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	8a 01       	movw	r16, r20
     1ec:	02 50       	subi	r16, 0x02	; 2
     1ee:	10 40       	sbci	r17, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	ed 01       	movw	r28, r26
     1f4:	c6 5f       	subi	r28, 0xF6	; 246
     1f6:	d6 4f       	sbci	r29, 0xF6	; 246
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <dxl_rx_packet+0xb0>
     1fa:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <gbRxGetLength>
     1fe:	88 23       	and	r24, r24
     200:	09 f0       	breq	.+2      	; 0x204 <dxl_rx_packet+0x8a>
     202:	71 c0       	rjmp	.+226    	; 0x2e6 <dxl_rx_packet+0x16c>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	73 c0       	rjmp	.+230    	; 0x2f0 <dxl_rx_packet+0x176>
     20a:	f9 01       	movw	r30, r18
     20c:	e6 5f       	subi	r30, 0xF6	; 246
     20e:	f6 4f       	sbci	r31, 0xF6	; 246
     210:	80 81       	ld	r24, Z
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	19 f4       	brne	.+6      	; 0x21c <dxl_rx_packet+0xa2>
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	61 f0       	breq	.+24     	; 0x234 <dxl_rx_packet+0xba>
     21c:	20 17       	cp	r18, r16
     21e:	31 07       	cpc	r19, r17
     220:	19 f4       	brne	.+6      	; 0x228 <dxl_rx_packet+0xae>
     222:	88 81       	ld	r24, Y
     224:	8f 3f       	cpi	r24, 0xFF	; 255
     226:	31 f0       	breq	.+12     	; 0x234 <dxl_rx_packet+0xba>
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	26 2f       	mov	r18, r22
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2a 17       	cp	r18, r26
     230:	3b 07       	cpc	r19, r27
     232:	5c f3       	brlt	.-42     	; 0x20a <dxl_rx_packet+0x90>
     234:	66 23       	and	r22, r22
     236:	a1 f0       	breq	.+40     	; 0x260 <dxl_rx_packet+0xe6>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	42 1b       	sub	r20, r18
     23c:	53 0b       	sbc	r21, r19
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dxl_rx_packet+0xd6>
     240:	e6 5f       	subi	r30, 0xF6	; 246
     242:	f6 4f       	sbci	r31, 0xF6	; 246
     244:	df 01       	movw	r26, r30
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	8c 91       	ld	r24, X
     24c:	80 83       	st	Z, r24
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e4 17       	cp	r30, r20
     256:	f5 07       	cpc	r31, r21
     258:	9c f3       	brlt	.-26     	; 0x240 <dxl_rx_packet+0xc6>
     25a:	76 1b       	sub	r23, r22
     25c:	70 93 51 09 	sts	0x0951, r23	; 0x800951 <gbRxGetLength>
     260:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <gbRxGetLength>
     264:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <gbRxPacketLength>
     268:	28 17       	cp	r18, r24
     26a:	28 f1       	brcs	.+74     	; 0x2b6 <dxl_rx_packet+0x13c>
     26c:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <__data_end+0x2>
     270:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <gbStatusPacket+0x2>
     274:	98 17       	cp	r25, r24
     276:	b9 f5       	brne	.+110    	; 0x2e6 <dxl_rx_packet+0x16c>
     278:	60 91 0d 09 	lds	r22, 0x090D	; 0x80090d <gbStatusPacket+0x3>
     27c:	6c 5f       	subi	r22, 0xFC	; 252
     27e:	60 93 50 09 	sts	0x0950, r22	; 0x800950 <gbRxPacketLength>
     282:	26 17       	cp	r18, r22
     284:	88 f4       	brcc	.+34     	; 0x2a8 <dxl_rx_packet+0x12e>
     286:	82 2f       	mov	r24, r18
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	86 5f       	subi	r24, 0xF6	; 246
     292:	96 4f       	sbci	r25, 0xF6	; 246
     294:	e1 d2       	rcall	.+1474   	; 0x858 <dxl_hal_rx>
     296:	90 91 51 09 	lds	r25, 0x0951	; 0x800951 <gbRxGetLength>
     29a:	98 0f       	add	r25, r24
     29c:	90 93 51 09 	sts	0x0951, r25	; 0x800951 <gbRxGetLength>
     2a0:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <gbRxPacketLength>
     2a4:	98 17       	cp	r25, r24
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <dxl_rx_packet+0x13c>
     2a8:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <gbStatusPacket+0x3>
     2ac:	a8 2f       	mov	r26, r24
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <dxl_rx_packet+0x154>
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <dxl_rx_packet+0x186>
     2c4:	e6 5f       	subi	r30, 0xF6	; 246
     2c6:	f6 4f       	sbci	r31, 0xF6	; 246
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	98 0f       	add	r25, r24
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	e2 2f       	mov	r30, r18
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ae 17       	cp	r26, r30
     2d4:	bf 07       	cpc	r27, r31
     2d6:	b4 f7       	brge	.-20     	; 0x2c4 <dxl_rx_packet+0x14a>
     2d8:	a6 5f       	subi	r26, 0xF6	; 246
     2da:	b6 4f       	sbci	r27, 0xF6	; 246
     2dc:	90 95       	com	r25
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	8c 91       	ld	r24, X
     2e2:	89 17       	cp	r24, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <dxl_rx_packet+0x172>
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <dxl_rx_packet+0x176>
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2f4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2f8:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <giBusUsing+0x1>
     2fc:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <giBusUsing>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <dxl_tx_packet>:
     30a:	1f 93       	push	r17
     30c:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     310:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	09 f4       	brne	.+2      	; 0x31a <dxl_tx_packet+0x10>
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <dxl_tx_packet+0xca>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 53 09 	sts	0x0953, r25	; 0x800953 <giBusUsing+0x1>
     322:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <giBusUsing>
     326:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <__data_end+0x3>
     32a:	89 39       	cpi	r24, 0x99	; 153
     32c:	40 f4       	brcc	.+16     	; 0x33e <dxl_tx_packet+0x34>
     32e:	90 91 6e 08 	lds	r25, 0x086E	; 0x80086e <__data_end+0x4>
     332:	89 2f       	mov	r24, r25
     334:	81 50       	subi	r24, 0x01	; 1
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	28 f0       	brcs	.+10     	; 0x344 <dxl_tx_packet+0x3a>
     33a:	93 38       	cpi	r25, 0x83	; 131
     33c:	19 f0       	breq	.+6      	; 0x344 <dxl_tx_packet+0x3a>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <dxl_tx_packet+0x98>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__data_end>
     34a:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <__data_end+0x1>
     34e:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <__data_end+0x3>
     352:	a8 2f       	mov	r26, r24
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <dxl_tx_packet+0x5c>
     35c:	e6 59       	subi	r30, 0x96	; 150
     35e:	f7 4f       	sbci	r31, 0xF7	; 247
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	98 0f       	add	r25, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	e2 2f       	mov	r30, r18
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ae 17       	cp	r26, r30
     36c:	bf 07       	cpc	r27, r31
     36e:	b4 f7       	brge	.-20     	; 0x35c <dxl_tx_packet+0x52>
     370:	a6 59       	subi	r26, 0x96	; 150
     372:	b7 4f       	sbci	r27, 0xF7	; 247
     374:	90 95       	com	r25
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	9c 93       	st	X, r25
     37a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     37e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     382:	06 97       	sbiw	r24, 0x06	; 6
     384:	02 97       	sbiw	r24, 0x02	; 2
     386:	08 f4       	brcc	.+2      	; 0x38a <dxl_tx_packet+0x80>
     388:	38 d1       	rcall	.+624    	; 0x5fa <dxl_hal_clear>
     38a:	10 91 6d 08 	lds	r17, 0x086D	; 0x80086d <__data_end+0x3>
     38e:	1c 5f       	subi	r17, 0xFC	; 252
     390:	8a e6       	ldi	r24, 0x6A	; 106
     392:	98 e0       	ldi	r25, 0x08	; 8
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	35 d1       	rcall	.+618    	; 0x604 <dxl_hal_tx>
     39a:	18 17       	cp	r17, r24
     39c:	59 f0       	breq	.+22     	; 0x3b4 <dxl_tx_packet+0xaa>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     3a6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     3aa:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <giBusUsing+0x1>
     3ae:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <giBusUsing>
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <dxl_tx_packet+0xca>
     3b4:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <__data_end+0x4>
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	29 f4       	brne	.+10     	; 0x3c6 <dxl_tx_packet+0xbc>
     3bc:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <__data_end+0x6>
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 96       	adiw	r24, 0x06	; 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dxl_tx_packet+0xc0>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	40 d1       	rcall	.+640    	; 0x64c <dxl_hal_set_timeout>
     3cc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
     3d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <dxl_txrx_packet>:
     3d8:	98 df       	rcall	.-208    	; 0x30a <dxl_tx_packet>
     3da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3de:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3e2:	89 2b       	or	r24, r25
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <dxl_txrx_packet+0x1c>
     3e6:	c9 de       	rcall	.-622    	; 0x17a <dxl_rx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3ec:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3f0:	05 97       	sbiw	r24, 0x05	; 5
     3f2:	c9 f3       	breq	.-14     	; 0x3e6 <dxl_txrx_packet+0xe>
     3f4:	08 95       	ret

000003f6 <dxl_write_word>:
     3f6:	28 2f       	mov	r18, r24
     3f8:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     3fc:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     404:	20 93 6c 08 	sts	0x086C, r18	; 0x80086c <__data_end+0x2>
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     40e:	60 93 6f 08 	sts	0x086F, r22	; 0x80086f <__data_end+0x5>
     412:	ca 01       	movw	r24, r20
     414:	40 93 70 08 	sts	0x0870, r20	; 0x800870 <__data_end+0x6>
     418:	80 70       	andi	r24, 0x00	; 0
     41a:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <__data_end+0x7>
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     424:	d9 cf       	rjmp	.-78     	; 0x3d8 <dxl_txrx_packet>
     426:	08 95       	ret
     428:	ff cf       	rjmp	.-2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>

0000042a <dxl_read_word>:
     42a:	28 2f       	mov	r18, r24
     42c:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     430:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     434:	89 2b       	or	r24, r25
     436:	b1 f4       	brne	.+44     	; 0x464 <dxl_read_word+0x3a>
     438:	20 93 6c 08 	sts	0x086C, r18	; 0x80086c <__data_end+0x2>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     442:	60 93 6f 08 	sts	0x086F, r22	; 0x80086f <__data_end+0x5>
     446:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <__data_end+0x6>
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     450:	c3 df       	rcall	.-122    	; 0x3d8 <dxl_txrx_packet>
     452:	30 91 10 09 	lds	r19, 0x0910	; 0x800910 <gbStatusPacket+0x6>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <gbStatusPacket+0x5>
     45c:	28 0f       	add	r18, r24
     45e:	31 1d       	adc	r19, r1
     460:	c9 01       	movw	r24, r18
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_read_word+0x3a>

00000466 <dxl_write_byte>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     46c:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     470:	89 2b       	or	r24, r25
     472:	71 f4       	brne	.+28     	; 0x490 <dxl_write_byte+0x2a>
     474:	20 93 6c 08 	sts	0x086C, r18	; 0x80086c <__data_end+0x2>
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     47e:	60 93 6f 08 	sts	0x086F, r22	; 0x80086f <__data_end+0x5>
     482:	40 93 70 08 	sts	0x0870, r20	; 0x800870 <__data_end+0x6>
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     48c:	a5 cf       	rjmp	.-182    	; 0x3d8 <dxl_txrx_packet>
     48e:	08 95       	ret
     490:	ff cf       	rjmp	.-2      	; 0x490 <dxl_write_byte+0x2a>

00000492 <dxl_read_byte>:
     492:	28 2f       	mov	r18, r24
     494:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     498:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     49c:	89 2b       	or	r24, r25
     49e:	91 f4       	brne	.+36     	; 0x4c4 <dxl_read_byte+0x32>
     4a0:	20 93 6c 08 	sts	0x086C, r18	; 0x80086c <__data_end+0x2>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     4aa:	60 93 6f 08 	sts	0x086F, r22	; 0x80086f <__data_end+0x5>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <__data_end+0x6>
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     4ba:	8e df       	rcall	.-228    	; 0x3d8 <dxl_txrx_packet>
     4bc:	80 91 0f 09 	lds	r24, 0x090F	; 0x80090f <gbStatusPacket+0x5>
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <dxl_read_byte+0x32>

000004c6 <dxl_ping>:
     4c6:	28 2f       	mov	r18, r24
     4c8:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <giBusUsing>
     4cc:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <giBusUsing+0x1>
     4d0:	89 2b       	or	r24, r25
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <dxl_ping+0x22>
     4d4:	20 93 6c 08 	sts	0x086C, r18	; 0x80086c <__data_end+0x2>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <__data_end+0x4>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <__data_end+0x3>
     4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <dxl_txrx_packet>
     4e6:	08 95       	ret
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <dxl_ping+0x22>

000004ea <dxl_terminate>:
     4ea:	86 c0       	rjmp	.+268    	; 0x5f8 <dxl_hal_close>
     4ec:	08 95       	ret

000004ee <dxl_initialize>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	8c 01       	movw	r16, r24
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	74 e2       	ldi	r23, 0x24	; 36
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	99 e4       	ldi	r25, 0x49	; 73
     510:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divsf3>
     514:	ab 01       	movw	r20, r22
     516:	bc 01       	movw	r22, r24
     518:	c8 01       	movw	r24, r16
     51a:	15 d0       	rcall	.+42     	; 0x546 <dxl_hal_open>
     51c:	89 2b       	or	r24, r25
     51e:	19 f4       	brne	.+6      	; 0x526 <dxl_initialize+0x38>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	0c c0       	rjmp	.+24     	; 0x53e <dxl_initialize+0x50>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     52e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     532:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <giBusUsing+0x1>
     536:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <giBusUsing>
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	c9 01       	movw	r24, r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <dxl_hal_open>:
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	7a 01       	movw	r14, r20
     550:	8b 01       	movw	r16, r22
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	99 e4       	ldi	r25, 0x49	; 73
     56c:	a8 01       	movw	r20, r16
     56e:	97 01       	movw	r18, r14
     570:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divsf3>
     574:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     580:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 e7       	ldi	r24, 0x74	; 116
     58a:	99 e4       	ldi	r25, 0x49	; 73
     58c:	a8 01       	movw	r20, r16
     58e:	97 01       	movw	r18, r14
     590:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e4       	ldi	r20, 0x40	; 64
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
     5a0:	60 93 ee 0b 	sts	0x0BEE, r22	; 0x800bee <gfByteTransTime_us>
     5a4:	70 93 ef 0b 	sts	0x0BEF, r23	; 0x800bef <gfByteTransTime_us+0x1>
     5a8:	80 93 f0 0b 	sts	0x0BF0, r24	; 0x800bf0 <gfByteTransTime_us+0x2>
     5ac:	90 93 f1 0b 	sts	0x0BF1, r25	; 0x800bf1 <gfByteTransTime_us+0x3>
     5b0:	20 91 ee 0b 	lds	r18, 0x0BEE	; 0x800bee <gfByteTransTime_us>
     5b4:	30 91 ef 0b 	lds	r19, 0x0BEF	; 0x800bef <gfByteTransTime_us+0x1>
     5b8:	40 91 f0 0b 	lds	r20, 0x0BF0	; 0x800bf0 <gfByteTransTime_us+0x2>
     5bc:	50 91 f1 0b 	lds	r21, 0x0BF1	; 0x800bf1 <gfByteTransTime_us+0x3>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8a e7       	ldi	r24, 0x7A	; 122
     5c6:	93 e4       	ldi	r25, 0x43	; 67
     5c8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divsf3>
     5cc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
     5d0:	70 93 ed 0b 	sts	0x0BED, r23	; 0x800bed <gwReturnDelayCountNum+0x1>
     5d4:	60 93 ec 0b 	sts	0x0BEC, r22	; 0x800bec <gwReturnDelayCountNum>
     5d8:	72 98       	cbi	0x0e, 2	; 14
     5da:	73 9a       	sbi	0x0e, 3	; 14
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     5e2:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <gbDxlBufferHead>
     5e6:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <gbDxlBufferTail>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <dxl_hal_close>:
     5f8:	08 95       	ret

000005fa <dxl_hal_clear>:
     5fa:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     5fe:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <gbDxlBufferHead>
     602:	08 95       	ret

00000604 <dxl_hal_tx>:
     604:	ac 01       	movw	r20, r24
     606:	f8 94       	cli
     608:	73 98       	cbi	0x0e, 3	; 14
     60a:	72 9a       	sbi	0x0e, 2	; 14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 c0       	rjmp	.+34     	; 0x634 <dxl_hal_tx+0x30>
     612:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <dxl_hal_tx+0xe>
     61a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     624:	fa 01       	movw	r30, r20
     626:	e2 0f       	add	r30, r18
     628:	f3 1f       	adc	r31, r19
     62a:	80 81       	ld	r24, Z
     62c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	64 f3       	brlt	.-40     	; 0x612 <dxl_hal_tx+0xe>
     63a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     63e:	86 ff       	sbrs	r24, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <dxl_hal_tx+0x36>
     642:	72 98       	cbi	0x0e, 2	; 14
     644:	73 9a       	sbi	0x0e, 3	; 14
     646:	78 94       	sei
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <dxl_hal_set_timeout>:
     64c:	10 92 f5 0b 	sts	0x0BF5, r1	; 0x800bf5 <gwCountNum+0x1>
     650:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <gwCountNum>
     654:	20 91 ec 0b 	lds	r18, 0x0BEC	; 0x800bec <gwReturnDelayCountNum>
     658:	30 91 ed 0b 	lds	r19, 0x0BED	; 0x800bed <gwReturnDelayCountNum+0x1>
     65c:	26 5f       	subi	r18, 0xF6	; 246
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
     664:	30 93 f3 0b 	sts	0x0BF3, r19	; 0x800bf3 <gwTimeoutCountNum+0x1>
     668:	20 93 f2 0b 	sts	0x0BF2, r18	; 0x800bf2 <gwTimeoutCountNum>
     66c:	08 95       	ret

0000066e <dxl_hal_timeout>:
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	80 91 f4 0b 	lds	r24, 0x0BF4	; 0x800bf4 <gwCountNum>
     682:	90 91 f5 0b 	lds	r25, 0x0BF5	; 0x800bf5 <gwCountNum+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 f5 0b 	sts	0x0BF5, r25	; 0x800bf5 <gwCountNum+0x1>
     68c:	80 93 f4 0b 	sts	0x0BF4, r24	; 0x800bf4 <gwCountNum>
     690:	20 91 f4 0b 	lds	r18, 0x0BF4	; 0x800bf4 <gwCountNum>
     694:	30 91 f5 0b 	lds	r19, 0x0BF5	; 0x800bf5 <gwCountNum+0x1>
     698:	80 91 f2 0b 	lds	r24, 0x0BF2	; 0x800bf2 <gwTimeoutCountNum>
     69c:	90 91 f3 0b 	lds	r25, 0x0BF3	; 0x800bf3 <gwTimeoutCountNum+0x1>
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <dxl_hal_timeout+0x3e>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	74 c0       	rjmp	.+232    	; 0x794 <dxl_hal_timeout+0x126>
     6ac:	a0 90 ee 0b 	lds	r10, 0x0BEE	; 0x800bee <gfByteTransTime_us>
     6b0:	b0 90 ef 0b 	lds	r11, 0x0BEF	; 0x800bef <gfByteTransTime_us+0x1>
     6b4:	c0 90 f0 0b 	lds	r12, 0x0BF0	; 0x800bf0 <gfByteTransTime_us+0x2>
     6b8:	d0 90 f1 0b 	lds	r13, 0x0BF1	; 0x800bf1 <gfByteTransTime_us+0x3>
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6bc:	c6 01       	movw	r24, r12
     6be:	b5 01       	movw	r22, r10
     6c0:	2b ea       	ldi	r18, 0xAB	; 171
     6c2:	3a ea       	ldi	r19, 0xAA	; 170
     6c4:	4a ea       	ldi	r20, 0xAA	; 170
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <dxl_hal_timeout+0x76>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <dxl_hal_timeout+0x8c>
     6f8:	45 c0       	rjmp	.+138    	; 0x784 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__divsf3>
     70a:	5b 01       	movw	r10, r22
     70c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
     71a:	7b 01       	movw	r14, r22
     71c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	1c f4       	brge	.+6      	; 0x734 <dxl_hal_timeout+0xc6>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	24 c0       	rjmp	.+72     	; 0x77c <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	3f ef       	ldi	r19, 0xFF	; 255
     73c:	4f e7       	ldi	r20, 0x7F	; 127
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	b4 f4       	brge	.+44     	; 0x774 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	c6 01       	movw	r24, r12
     74a:	b5 01       	movw	r22, r10
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__mulsf3>
     758:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <dxl_hal_timeout+0xfe>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <dxl_hal_timeout+0xf4>
     772:	0e c0       	rjmp	.+28     	; 0x790 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
     77c:	cb 01       	movw	r24, r22
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <dxl_hal_timeout+0x110>
     782:	06 c0       	rjmp	.+12     	; 0x790 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78c:	6a 95       	dec	r22
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x11e>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <dxl_hal_get_qstate>:
     7a8:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     7ac:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     7b0:	98 17       	cp	r25, r24
     7b2:	19 f4       	brne	.+6      	; 0x7ba <dxl_hal_get_qstate+0x12>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <dxl_hal_get_qstate+0x40>
     7ba:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     7be:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     7c2:	98 17       	cp	r25, r24
     7c4:	38 f4       	brcc	.+14     	; 0x7d4 <dxl_hal_get_qstate+0x2c>
     7c6:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     7ca:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <dxl_hal_get_qstate+0x3c>
     7d4:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     7d8:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 50       	subi	r18, 0x00	; 0
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	29 1b       	sub	r18, r25
     7e6:	31 09       	sbc	r19, r1
     7e8:	c9 01       	movw	r24, r18
     7ea:	08 95       	ret

000007ec <dxl_hal_put_queue>:
     7ec:	1f 93       	push	r17
     7ee:	18 2f       	mov	r17, r24
     7f0:	db df       	rcall	.-74     	; 0x7a8 <dxl_hal_get_qstate>
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	91 05       	cpc	r25, r1
     7f6:	91 f0       	breq	.+36     	; 0x81c <dxl_hal_put_queue+0x30>
     7f8:	e0 91 55 0a 	lds	r30, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ec 5a       	subi	r30, 0xAC	; 172
     800:	f6 4f       	sbci	r31, 0xF6	; 246
     802:	10 83       	st	Z, r17
     804:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <dxl_hal_put_queue+0x26>
     80c:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <gbDxlBufferTail>
     810:	05 c0       	rjmp	.+10     	; 0x81c <dxl_hal_put_queue+0x30>
     812:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <gbDxlBufferTail>
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <dxl_hal_get_queue>:
     820:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     824:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     828:	98 17       	cp	r25, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <dxl_hal_get_queue+0x10>
     82c:	ef ef       	ldi	r30, 0xFF	; 255
     82e:	12 c0       	rjmp	.+36     	; 0x854 <dxl_hal_get_queue+0x34>
     830:	e0 91 54 0a 	lds	r30, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ec 5a       	subi	r30, 0xAC	; 172
     838:	f6 4f       	sbci	r31, 0xF6	; 246
     83a:	e0 81       	ld	r30, Z
     83c:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	19 f4       	brne	.+6      	; 0x84a <dxl_hal_get_queue+0x2a>
     844:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <gbDxlBufferHead>
     848:	05 c0       	rjmp	.+10     	; 0x854 <dxl_hal_get_queue+0x34>
     84a:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <gbDxlBufferHead>
     854:	8e 2f       	mov	r24, r30
     856:	08 95       	ret

00000858 <dxl_hal_rx>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	eb 01       	movw	r28, r22
     868:	90 91 54 0a 	lds	r25, 0x0A54	; 0x800a54 <gbDxlBufferHead>
     86c:	80 91 55 0a 	lds	r24, 0x0A55	; 0x800a55 <gbDxlBufferTail>
     870:	98 17       	cp	r25, r24
     872:	19 f4       	brne	.+6      	; 0x87a <dxl_hal_rx+0x22>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	12 c0       	rjmp	.+36     	; 0x89e <dxl_hal_rx+0x46>
     87a:	96 df       	rcall	.-212    	; 0x7a8 <dxl_hal_get_qstate>
     87c:	8c 01       	movw	r16, r24
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	0c f4       	brge	.+2      	; 0x886 <dxl_hal_rx+0x2e>
     884:	8e 01       	movw	r16, r28
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	06 c0       	rjmp	.+12     	; 0x898 <dxl_hal_rx+0x40>
     88c:	c9 df       	rcall	.-110    	; 0x820 <dxl_hal_get_queue>
     88e:	f7 01       	movw	r30, r14
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	80 83       	st	Z, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	c0 17       	cp	r28, r16
     89a:	d1 07       	cpc	r29, r17
     89c:	bc f3       	brlt	.-18     	; 0x88c <dxl_hal_rx+0x34>
     89e:	c8 01       	movw	r24, r16
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <__vector_25>:
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8d8:	89 df       	rcall	.-238    	; 0x7ec <dxl_hal_put_queue>
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <serial_write>:
     900:	ac 01       	movw	r20, r24
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0c c0       	rjmp	.+24     	; 0x920 <serial_write+0x20>
     908:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     90c:	85 ff       	sbrs	r24, 5
     90e:	fc cf       	rjmp	.-8      	; 0x908 <serial_write+0x8>
     910:	fa 01       	movw	r30, r20
     912:	e2 0f       	add	r30, r18
     914:	f3 1f       	adc	r31, r19
     916:	80 81       	ld	r24, Z
     918:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	8c f3       	brlt	.-30     	; 0x908 <serial_write+0x8>
     926:	08 95       	ret

00000928 <serial_read>:
     928:	dc 01       	movw	r26, r24
     92a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     92e:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     932:	98 17       	cp	r25, r24
     934:	11 f4       	brne	.+4      	; 0x93a <serial_read+0x12>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     93e:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     942:	98 17       	cp	r25, r24
     944:	19 f4       	brne	.+6      	; 0x94c <serial_read+0x24>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <serial_read+0x52>
     94c:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     950:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     954:	98 17       	cp	r25, r24
     956:	38 f4       	brcc	.+14     	; 0x966 <serial_read+0x3e>
     958:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     95c:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <serial_read+0x4e>
     966:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     96a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	20 58       	subi	r18, 0x80	; 128
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	29 1b       	sub	r18, r25
     978:	31 09       	sbc	r19, r1
     97a:	a9 01       	movw	r20, r18
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	0c f4       	brge	.+2      	; 0x984 <serial_read+0x5c>
     982:	ab 01       	movw	r20, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	20 c0       	rjmp	.+64     	; 0x9ca <serial_read+0xa2>
     98a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     98e:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     992:	98 17       	cp	r25, r24
     994:	11 f4       	brne	.+4      	; 0x99a <serial_read+0x72>
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	12 c0       	rjmp	.+36     	; 0x9be <serial_read+0x96>
     99a:	e0 91 d6 0a 	lds	r30, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ea 5a       	subi	r30, 0xAA	; 170
     9a2:	f5 4f       	sbci	r31, 0xF5	; 245
     9a4:	90 81       	ld	r25, Z
     9a6:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     9aa:	8f 37       	cpi	r24, 0x7F	; 127
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <serial_read+0x8c>
     9ae:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <gbSerialBufferHead>
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <serial_read+0x96>
     9b4:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <gbSerialBufferHead>
     9be:	fd 01       	movw	r30, r26
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	90 83       	st	Z, r25
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	24 17       	cp	r18, r20
     9cc:	35 07       	cpc	r19, r21
     9ce:	ec f2       	brlt	.-70     	; 0x98a <serial_read+0x62>
     9d0:	84 2f       	mov	r24, r20
     9d2:	08 95       	ret

000009d4 <serial_get_qstate>:
     9d4:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     9d8:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     9dc:	98 17       	cp	r25, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <serial_get_qstate+0x12>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <serial_get_qstate+0x40>
     9e6:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     9ea:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     9ee:	98 17       	cp	r25, r24
     9f0:	38 f4       	brcc	.+14     	; 0xa00 <serial_get_qstate+0x2c>
     9f2:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     9f6:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <serial_get_qstate+0x3c>
     a00:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a04:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	20 58       	subi	r18, 0x80	; 128
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	29 1b       	sub	r18, r25
     a12:	31 09       	sbc	r19, r1
     a14:	c9 01       	movw	r24, r18
     a16:	08 95       	ret

00000a18 <serial_put_queue>:
     a18:	48 2f       	mov	r20, r24
     a1a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a1e:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a22:	98 17       	cp	r25, r24
     a24:	d1 f0       	breq	.+52     	; 0xa5a <serial_put_queue+0x42>
     a26:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a2a:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a2e:	98 17       	cp	r25, r24
     a30:	38 f4       	brcc	.+14     	; 0xa40 <serial_put_queue+0x28>
     a32:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a36:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <serial_put_queue+0x38>
     a40:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a44:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 58       	subi	r18, 0x80	; 128
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	29 1b       	sub	r18, r25
     a52:	31 09       	sbc	r19, r1
     a54:	2f 37       	cpi	r18, 0x7F	; 127
     a56:	31 05       	cpc	r19, r1
     a58:	91 f0       	breq	.+36     	; 0xa7e <serial_put_queue+0x66>
     a5a:	e0 91 d7 0a 	lds	r30, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ea 5a       	subi	r30, 0xAA	; 170
     a62:	f5 4f       	sbci	r31, 0xF5	; 245
     a64:	40 83       	st	Z, r20
     a66:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a6a:	8f 37       	cpi	r24, 0x7F	; 127
     a6c:	19 f4       	brne	.+6      	; 0xa74 <serial_put_queue+0x5c>
     a6e:	10 92 d7 0a 	sts	0x0AD7, r1	; 0x800ad7 <gbSerialBufferTail>
     a72:	08 95       	ret
     a74:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 d7 0a 	sts	0x0AD7, r24	; 0x800ad7 <gbSerialBufferTail>
     a7e:	08 95       	ret

00000a80 <serial_get_queue>:
     a80:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a84:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     a88:	98 17       	cp	r25, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <serial_get_queue+0x10>
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <serial_get_queue+0x34>
     a90:	e0 91 d6 0a 	lds	r30, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ea 5a       	subi	r30, 0xAA	; 170
     a98:	f5 4f       	sbci	r31, 0xF5	; 245
     a9a:	e0 81       	ld	r30, Z
     a9c:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     aa0:	8f 37       	cpi	r24, 0x7F	; 127
     aa2:	19 f4       	brne	.+6      	; 0xaaa <serial_get_queue+0x2a>
     aa4:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <gbSerialBufferHead>
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <serial_get_queue+0x34>
     aaa:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <gbSerialBufferHead>
     ab4:	8e 2f       	mov	r24, r30
     ab6:	08 95       	ret

00000ab8 <__vector_36>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     ae2:	9a df       	rcall	.-204    	; 0xa18 <serial_put_queue>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <std_putchar>:
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	98 2f       	mov	r25, r24
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	99 f4       	brne	.+38     	; 0xb42 <std_putchar+0x38>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	fe 01       	movw	r30, r28
     b24:	31 96       	adiw	r30, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	2d 5f       	subi	r18, 0xFD	; 253
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b30:	85 ff       	sbrs	r24, 5
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <std_putchar+0x22>
     b34:	81 91       	ld	r24, Z+
     b36:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	b1 f7       	brne	.-20     	; 0xb2c <std_putchar+0x22>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <std_putchar+0x44>
     b42:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <std_putchar+0x38>
     b4a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <std_getchar>:
     b5c:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     b60:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     b64:	98 17       	cp	r25, r24
     b66:	d1 f3       	breq	.-12     	; 0xb5c <std_getchar>
     b68:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     b6c:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     b70:	98 17       	cp	r25, r24
     b72:	38 f4       	brcc	.+14     	; 0xb82 <std_getchar+0x26>
     b74:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     b78:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <std_getchar+0x36>
     b82:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     b86:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 58       	subi	r18, 0x80	; 128
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	29 1b       	sub	r18, r25
     b94:	31 09       	sbc	r19, r1
     b96:	23 2b       	or	r18, r19
     b98:	09 f3       	breq	.-62     	; 0xb5c <std_getchar>
     b9a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     b9e:	80 91 d7 0a 	lds	r24, 0x0AD7	; 0x800ad7 <gbSerialBufferTail>
     ba2:	98 17       	cp	r25, r24
     ba4:	11 f4       	brne	.+4      	; 0xbaa <std_getchar+0x4e>
     ba6:	ef ef       	ldi	r30, 0xFF	; 255
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <std_getchar+0x78>
     baa:	e0 91 d6 0a 	lds	r30, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ea 5a       	subi	r30, 0xAA	; 170
     bb2:	f5 4f       	sbci	r31, 0xF5	; 245
     bb4:	e0 81       	ld	r30, Z
     bb6:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     bba:	8f 37       	cpi	r24, 0x7F	; 127
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <std_getchar+0x68>
     bbe:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <gbSerialBufferHead>
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <std_getchar+0x72>
     bc4:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <gbSerialBufferHead>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <gbSerialBufferHead>
     bce:	ed 30       	cpi	r30, 0x0D	; 13
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <std_getchar+0x78>
     bd2:	ea e0       	ldi	r30, 0x0A	; 10
     bd4:	8e 2f       	mov	r24, r30
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <serial_initialize>:
     bda:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	74 e2       	ldi	r23, 0x24	; 36
     be6:	84 ef       	ldi	r24, 0xF4	; 244
     be8:	99 e4       	ldi	r25, 0x49	; 73
     bea:	a1 d7       	rcall	.+3906   	; 0x1b2e <__divsf3>
     bec:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fixunssfsi>
     bf0:	61 50       	subi	r22, 0x01	; 1
     bf2:	70 40       	sbci	r23, 0x00	; 0
     bf4:	22 e4       	ldi	r18, 0x42	; 66
     bf6:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     bfa:	28 e9       	ldi	r18, 0x98	; 152
     bfc:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c00:	26 e0       	ldi	r18, 0x06	; 6
     c02:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     c0c:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <gbSerialBufferHead>
     c10:	10 92 d7 0a 	sts	0x0AD7, r1	; 0x800ad7 <gbSerialBufferTail>
     c14:	27 2f       	mov	r18, r23
     c16:	33 27       	eor	r19, r19
     c18:	27 fd       	sbrc	r18, 7
     c1a:	3a 95       	dec	r19
     c1c:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c20:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c24:	72 98       	cbi	0x0e, 2	; 14
     c26:	73 9a       	sbi	0x0e, 3	; 14
     c28:	85 e8       	ldi	r24, 0x85	; 133
     c2a:	95 e0       	ldi	r25, 0x05	; 5
     c2c:	6e ea       	ldi	r22, 0xAE	; 174
     c2e:	75 e0       	ldi	r23, 0x05	; 5
     c30:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <fdevopen>
     c34:	90 93 d9 0a 	sts	0x0AD9, r25	; 0x800ad9 <device+0x1>
     c38:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <device>
     c3c:	08 95       	ret

00000c3e <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     c3e:	80 ea       	ldi	r24, 0xA0	; 160
     c40:	95 e0       	ldi	r25, 0x05	; 5
     c42:	0e 94 33 10 	call	0x2066	; 0x2066 <puts>
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	71 ee       	ldi	r23, 0xE1	; 225
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	c5 df       	rcall	.-118    	; 0xbda <serial_initialize>
     c50:	78 94       	sei
     c52:	86 e8       	ldi	r24, 0x86	; 134
     c54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c5e:	08 95       	ret

00000c60 <sensorTest>:
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	51 f0       	breq	.+20     	; 0xc7a <sensorTest+0x1a>
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	91 05       	cpc	r25, r1
     c6a:	61 f0       	breq	.+24     	; 0xc84 <sensorTest+0x24>
     c6c:	89 2b       	or	r24, r25
     c6e:	71 f4       	brne	.+28     	; 0xc8c <sensorTest+0x2c>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c76:	17 98       	cbi	0x02, 7	; 2
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <sensorTest+0x2c>
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c80:	16 98       	cbi	0x02, 6	; 2
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <sensorTest+0x2c>
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c8a:	15 98       	cbi	0x02, 5	; 2
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	8a 95       	dec	r24
     c90:	f1 f7       	brne	.-4      	; 0xc8e <sensorTest+0x2e>
     c92:	ea e7       	ldi	r30, 0x7A	; 122
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 61       	ori	r24, 0x10	; 16
     c9a:	80 83       	st	Z, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	80 64       	ori	r24, 0x40	; 64
     ca0:	80 83       	st	Z, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	84 ff       	sbrs	r24, 4
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <sensorTest+0x42>
     ca8:	8e ef       	ldi	r24, 0xFE	; 254
     caa:	82 b9       	out	0x02, r24	; 2
     cac:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     cb0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     cb4:	80 91 e0 0a 	lds	r24, 0x0AE0	; 0x800ae0 <gyroTemp>
     cb8:	90 91 e1 0a 	lds	r25, 0x0AE1	; 0x800ae1 <gyroTemp+0x1>
     cbc:	82 0f       	add	r24, r18
     cbe:	93 1f       	adc	r25, r19
     cc0:	90 93 e1 0a 	sts	0x0AE1, r25	; 0x800ae1 <gyroTemp+0x1>
     cc4:	80 93 e0 0a 	sts	0x0AE0, r24	; 0x800ae0 <gyroTemp>
     cc8:	20 91 de 0a 	lds	r18, 0x0ADE	; 0x800ade <gyroCount>
     ccc:	30 91 df 0a 	lds	r19, 0x0ADF	; 0x800adf <gyroCount+0x1>
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	30 93 df 0a 	sts	0x0ADF, r19	; 0x800adf <gyroCount+0x1>
     cd8:	20 93 de 0a 	sts	0x0ADE, r18	; 0x800ade <gyroCount>
     cdc:	25 30       	cpi	r18, 0x05	; 5
     cde:	31 05       	cpc	r19, r1
     ce0:	bc f0       	brlt	.+46     	; 0xd10 <sensorTest+0xb0>
     ce2:	20 91 e2 0a 	lds	r18, 0x0AE2	; 0x800ae2 <gyroValue>
     ce6:	30 91 e3 0a 	lds	r19, 0x0AE3	; 0x800ae3 <gyroValue+0x1>
     cea:	30 93 e5 0a 	sts	0x0AE5, r19	; 0x800ae5 <preGyroValue+0x1>
     cee:	20 93 e4 0a 	sts	0x0AE4, r18	; 0x800ae4 <preGyroValue>
     cf2:	65 e0       	ldi	r22, 0x05	; 5
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	f0 d6       	rcall	.+3552   	; 0x1ad8 <__divmodhi4>
     cf8:	70 93 e3 0a 	sts	0x0AE3, r23	; 0x800ae3 <gyroValue+0x1>
     cfc:	60 93 e2 0a 	sts	0x0AE2, r22	; 0x800ae2 <gyroValue>
     d00:	10 92 df 0a 	sts	0x0ADF, r1	; 0x800adf <gyroCount+0x1>
     d04:	10 92 de 0a 	sts	0x0ADE, r1	; 0x800ade <gyroCount>
     d08:	10 92 e1 0a 	sts	0x0AE1, r1	; 0x800ae1 <gyroTemp+0x1>
     d0c:	10 92 e0 0a 	sts	0x0AE0, r1	; 0x800ae0 <gyroTemp>
     d10:	08 95       	ret

00000d12 <sendAck>:
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	8f ea       	ldi	r24, 0xAF	; 175
     d18:	95 e0       	ldi	r25, 0x05	; 5
     d1a:	9f 93       	push	r25
     d1c:	8f 93       	push	r24
     d1e:	0e 94 20 10 	call	0x2040	; 0x2040 <printf>
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	08 95       	ret

00000d2c <MotorInit>:
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	dc db       	rcall	.-2120   	; 0x4ee <dxl_initialize>
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	6f e2       	ldi	r22, 0x2F	; 47
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	8f e1       	ldi	r24, 0x1F	; 31
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	59 db       	rcall	.-2382   	; 0x3f6 <dxl_write_word>
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	60 e2       	ldi	r22, 0x20	; 32
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	8e ef       	ldi	r24, 0xFE	; 254
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	52 db       	rcall	.-2396   	; 0x3f6 <dxl_write_word>
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	68 e1       	ldi	r22, 0x18	; 24
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	8e ef       	ldi	r24, 0xFE	; 254
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	83 db       	rcall	.-2298   	; 0x466 <dxl_write_byte>
     d60:	2f e3       	ldi	r18, 0x3F	; 63
     d62:	8d e0       	ldi	r24, 0x0D	; 13
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	21 50       	subi	r18, 0x01	; 1
     d68:	80 40       	sbci	r24, 0x00	; 0
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <MotorInit+0x3a>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <MotorInit+0x44>
     d70:	00 00       	nop
     d72:	08 95       	ret

00000d74 <split>:
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <split+0xa>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	20 e2       	ldi	r18, 0x20	; 32
     d84:	3c e2       	ldi	r19, 0x2C	; 44
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	29 83       	std	Y+1, r18	; 0x01
     d8a:	3a 83       	std	Y+2, r19	; 0x02
     d8c:	4b 83       	std	Y+3, r20	; 0x03
     d8e:	be 01       	movw	r22, r28
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strtok>
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	89 f0       	breq	.+34     	; 0xdbe <split+0x4a>
     d9c:	08 ef       	ldi	r16, 0xF8	; 248
     d9e:	1a e0       	ldi	r17, 0x0A	; 10
     da0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <atoi>
     da4:	f8 01       	movw	r30, r16
     da6:	81 93       	st	Z+, r24
     da8:	91 93       	st	Z+, r25
     daa:	8f 01       	movw	r16, r30
     dac:	be 01       	movw	r22, r28
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <strtok>
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	89 f7       	brne	.-30     	; 0xda0 <split+0x2c>
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <setAngle>:
     dce:	20 91 fa 0a 	lds	r18, 0x0AFA	; 0x800afa <serCmd+0x2>
     dd2:	30 91 fb 0a 	lds	r19, 0x0AFB	; 0x800afb <serCmd+0x3>
     dd6:	22 33       	cpi	r18, 0x32	; 50
     dd8:	31 05       	cpc	r19, r1
     dda:	cc f4       	brge	.+50     	; 0xe0e <setAngle+0x40>
     ddc:	ac ef       	ldi	r26, 0xFC	; 252
     dde:	ba e0       	ldi	r27, 0x0A	; 10
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	c9 01       	movw	r24, r18
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	28 0f       	add	r18, r24
     df4:	39 1f       	adc	r19, r25
     df6:	f9 01       	movw	r30, r18
     df8:	e4 5f       	subi	r30, 0xF4	; 244
     dfa:	fd 4f       	sbci	r31, 0xFD	; 253
     dfc:	22 5e       	subi	r18, 0xE2	; 226
     dfe:	3d 4f       	sbci	r19, 0xFD	; 253
     e00:	8d 91       	ld	r24, X+
     e02:	9d 91       	ld	r25, X+
     e04:	81 93       	st	Z+, r24
     e06:	91 93       	st	Z+, r25
     e08:	e2 17       	cp	r30, r18
     e0a:	f3 07       	cpc	r31, r19
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <setAngle+0x32>
     e0e:	08 95       	ret

00000e10 <getAngle>:
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	60 97       	sbiw	r28, 0x10	; 16
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	fe 01       	movw	r30, r28
     e32:	31 96       	adiw	r30, 0x01	; 1
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	df 01       	movw	r26, r30
     e38:	1d 92       	st	X+, r1
     e3a:	8a 95       	dec	r24
     e3c:	e9 f7       	brne	.-6      	; 0xe38 <getAngle+0x28>
     e3e:	00 e9       	ldi	r16, 0x90	; 144
     e40:	15 e0       	ldi	r17, 0x05	; 5
     e42:	7f 01       	movw	r14, r30
     e44:	0f 2e       	mov	r0, r31
     e46:	f0 ea       	ldi	r31, 0xA0	; 160
     e48:	cf 2e       	mov	r12, r31
     e4a:	f5 e0       	ldi	r31, 0x05	; 5
     e4c:	df 2e       	mov	r13, r31
     e4e:	f0 2d       	mov	r31, r0
     e50:	64 e2       	ldi	r22, 0x24	; 36
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	f8 01       	movw	r30, r16
     e56:	81 91       	ld	r24, Z+
     e58:	91 91       	ld	r25, Z+
     e5a:	8f 01       	movw	r16, r30
     e5c:	e6 da       	rcall	.-2612   	; 0x42a <dxl_read_word>
     e5e:	d7 01       	movw	r26, r14
     e60:	8d 93       	st	X+, r24
     e62:	9d 93       	st	X+, r25
     e64:	7d 01       	movw	r14, r26
     e66:	0c 15       	cp	r16, r12
     e68:	1d 05       	cpc	r17, r13
     e6a:	91 f7       	brne	.-28     	; 0xe50 <getAngle+0x40>
     e6c:	88 89       	ldd	r24, Y+16	; 0x10
     e6e:	8f 93       	push	r24
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	8f 93       	push	r24
     e74:	8e 85       	ldd	r24, Y+14	; 0x0e
     e76:	8f 93       	push	r24
     e78:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7a:	8f 93       	push	r24
     e7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e7e:	8f 93       	push	r24
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	8f 93       	push	r24
     e84:	8a 85       	ldd	r24, Y+10	; 0x0a
     e86:	8f 93       	push	r24
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	8f 93       	push	r24
     e8c:	88 85       	ldd	r24, Y+8	; 0x08
     e8e:	8f 93       	push	r24
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
     e92:	8f 93       	push	r24
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	8f 93       	push	r24
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	8f 93       	push	r24
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	8f 93       	push	r24
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	8f 93       	push	r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	8f 93       	push	r24
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	8f 93       	push	r24
     eac:	1f 92       	push	r1
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	8f 93       	push	r24
     eb2:	84 eb       	ldi	r24, 0xB4	; 180
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 20 10 	call	0x2040	; 0x2040 <printf>
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	60 96       	adiw	r28, 0x10	; 16
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	08 95       	ret

00000ee6 <sendActAngle>:
     ee6:	fc 01       	movw	r30, r24
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	9f 01       	movw	r18, r30
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	e4 5f       	subi	r30, 0xF4	; 244
     f00:	fd 4f       	sbci	r31, 0xFD	; 253
     f02:	21 8d       	ldd	r18, Z+25	; 0x19
     f04:	2f 93       	push	r18
     f06:	20 8d       	ldd	r18, Z+24	; 0x18
     f08:	2f 93       	push	r18
     f0a:	27 89       	ldd	r18, Z+23	; 0x17
     f0c:	2f 93       	push	r18
     f0e:	26 89       	ldd	r18, Z+22	; 0x16
     f10:	2f 93       	push	r18
     f12:	25 89       	ldd	r18, Z+21	; 0x15
     f14:	2f 93       	push	r18
     f16:	24 89       	ldd	r18, Z+20	; 0x14
     f18:	2f 93       	push	r18
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	dc 01       	movw	r26, r24
     f22:	aa 0f       	add	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	aa 0f       	add	r26, r26
     f28:	bb 1f       	adc	r27, r27
     f2a:	aa 0f       	add	r26, r26
     f2c:	bb 1f       	adc	r27, r27
     f2e:	8a 0f       	add	r24, r26
     f30:	9b 1f       	adc	r25, r27
     f32:	dc 01       	movw	r26, r24
     f34:	a4 5f       	subi	r26, 0xF4	; 244
     f36:	bd 4f       	sbci	r27, 0xFD	; 253
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	8c 91       	ld	r24, X
     f3c:	11 97       	sbiw	r26, 0x01	; 1
     f3e:	8f 93       	push	r24
     f40:	8c 91       	ld	r24, X
     f42:	8f 93       	push	r24
     f44:	81 89       	ldd	r24, Z+17	; 0x11
     f46:	8f 93       	push	r24
     f48:	80 89       	ldd	r24, Z+16	; 0x10
     f4a:	8f 93       	push	r24
     f4c:	87 85       	ldd	r24, Z+15	; 0x0f
     f4e:	8f 93       	push	r24
     f50:	86 85       	ldd	r24, Z+14	; 0x0e
     f52:	8f 93       	push	r24
     f54:	85 85       	ldd	r24, Z+13	; 0x0d
     f56:	8f 93       	push	r24
     f58:	84 85       	ldd	r24, Z+12	; 0x0c
     f5a:	8f 93       	push	r24
     f5c:	83 85       	ldd	r24, Z+11	; 0x0b
     f5e:	8f 93       	push	r24
     f60:	82 85       	ldd	r24, Z+10	; 0x0a
     f62:	8f 93       	push	r24
     f64:	81 85       	ldd	r24, Z+9	; 0x09
     f66:	8f 93       	push	r24
     f68:	80 85       	ldd	r24, Z+8	; 0x08
     f6a:	8f 93       	push	r24
     f6c:	87 81       	ldd	r24, Z+7	; 0x07
     f6e:	8f 93       	push	r24
     f70:	86 81       	ldd	r24, Z+6	; 0x06
     f72:	8f 93       	push	r24
     f74:	85 81       	ldd	r24, Z+5	; 0x05
     f76:	8f 93       	push	r24
     f78:	84 81       	ldd	r24, Z+4	; 0x04
     f7a:	8f 93       	push	r24
     f7c:	83 81       	ldd	r24, Z+3	; 0x03
     f7e:	8f 93       	push	r24
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	8f 93       	push	r24
     f84:	81 81       	ldd	r24, Z+1	; 0x01
     f86:	8f 93       	push	r24
     f88:	80 81       	ld	r24, Z
     f8a:	8f 93       	push	r24
     f8c:	1f 92       	push	r1
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	8f 93       	push	r24
     f92:	89 ed       	ldi	r24, 0xD9	; 217
     f94:	95 e0       	ldi	r25, 0x05	; 5
     f96:	9f 93       	push	r25
     f98:	8f 93       	push	r24
     f9a:	0e 94 20 10 	call	0x2040	; 0x2040 <printf>
     f9e:	8d b7       	in	r24, 0x3d	; 61
     fa0:	9e b7       	in	r25, 0x3e	; 62
     fa2:	4e 96       	adiw	r24, 0x1e	; 30
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	9e bf       	out	0x3e, r25	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	8d bf       	out	0x3d, r24	; 61
     fae:	08 95       	ret

00000fb0 <getLoad>:
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	60 97       	sbiw	r28, 0x10	; 16
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	fe 01       	movw	r30, r28
     fd2:	31 96       	adiw	r30, 0x01	; 1
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	df 01       	movw	r26, r30
     fd8:	1d 92       	st	X+, r1
     fda:	8a 95       	dec	r24
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <getLoad+0x28>
     fde:	00 e9       	ldi	r16, 0x90	; 144
     fe0:	15 e0       	ldi	r17, 0x05	; 5
     fe2:	7f 01       	movw	r14, r30
     fe4:	0f 2e       	mov	r0, r31
     fe6:	f0 ea       	ldi	r31, 0xA0	; 160
     fe8:	cf 2e       	mov	r12, r31
     fea:	f5 e0       	ldi	r31, 0x05	; 5
     fec:	df 2e       	mov	r13, r31
     fee:	f0 2d       	mov	r31, r0
     ff0:	68 e2       	ldi	r22, 0x28	; 40
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	f8 01       	movw	r30, r16
     ff6:	81 91       	ld	r24, Z+
     ff8:	91 91       	ld	r25, Z+
     ffa:	8f 01       	movw	r16, r30
     ffc:	16 da       	rcall	.-3028   	; 0x42a <dxl_read_word>
     ffe:	d7 01       	movw	r26, r14
    1000:	8d 93       	st	X+, r24
    1002:	9d 93       	st	X+, r25
    1004:	7d 01       	movw	r14, r26
    1006:	0c 15       	cp	r16, r12
    1008:	1d 05       	cpc	r17, r13
    100a:	91 f7       	brne	.-28     	; 0xff0 <getLoad+0x40>
    100c:	88 8d       	ldd	r24, Y+24	; 0x18
    100e:	8f 93       	push	r24
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	8f 93       	push	r24
    1014:	8e 89       	ldd	r24, Y+22	; 0x16
    1016:	8f 93       	push	r24
    1018:	8d 89       	ldd	r24, Y+21	; 0x15
    101a:	8f 93       	push	r24
    101c:	8c 89       	ldd	r24, Y+20	; 0x14
    101e:	8f 93       	push	r24
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	8f 93       	push	r24
    1024:	8a 89       	ldd	r24, Y+18	; 0x12
    1026:	8f 93       	push	r24
    1028:	89 89       	ldd	r24, Y+17	; 0x11
    102a:	8f 93       	push	r24
    102c:	88 89       	ldd	r24, Y+16	; 0x10
    102e:	8f 93       	push	r24
    1030:	8f 85       	ldd	r24, Y+15	; 0x0f
    1032:	8f 93       	push	r24
    1034:	8e 85       	ldd	r24, Y+14	; 0x0e
    1036:	8f 93       	push	r24
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	8f 93       	push	r24
    103c:	8c 85       	ldd	r24, Y+12	; 0x0c
    103e:	8f 93       	push	r24
    1040:	8b 85       	ldd	r24, Y+11	; 0x0b
    1042:	8f 93       	push	r24
    1044:	8a 85       	ldd	r24, Y+10	; 0x0a
    1046:	8f 93       	push	r24
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	8f 93       	push	r24
    104c:	88 85       	ldd	r24, Y+8	; 0x08
    104e:	8f 93       	push	r24
    1050:	8f 81       	ldd	r24, Y+7	; 0x07
    1052:	8f 93       	push	r24
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	8f 93       	push	r24
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	8f 93       	push	r24
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	8f 93       	push	r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	8f 93       	push	r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	8f 93       	push	r24
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 93       	push	r24
    106c:	1f 92       	push	r1
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	8f 93       	push	r24
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	e2 d7       	rcall	.+4036   	; 0x2040 <printf>
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	60 96       	adiw	r28, 0x10	; 16
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	08 95       	ret

000010a4 <getVoltage>:
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	60 97       	sbiw	r28, 0x10	; 16
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	fe 01       	movw	r30, r28
    10c6:	31 96       	adiw	r30, 0x01	; 1
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	df 01       	movw	r26, r30
    10cc:	1d 92       	st	X+, r1
    10ce:	8a 95       	dec	r24
    10d0:	e9 f7       	brne	.-6      	; 0x10cc <getVoltage+0x28>
    10d2:	00 e9       	ldi	r16, 0x90	; 144
    10d4:	15 e0       	ldi	r17, 0x05	; 5
    10d6:	7f 01       	movw	r14, r30
    10d8:	0f 2e       	mov	r0, r31
    10da:	f0 ea       	ldi	r31, 0xA0	; 160
    10dc:	cf 2e       	mov	r12, r31
    10de:	f5 e0       	ldi	r31, 0x05	; 5
    10e0:	df 2e       	mov	r13, r31
    10e2:	f0 2d       	mov	r31, r0
    10e4:	6a e2       	ldi	r22, 0x2A	; 42
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	f8 01       	movw	r30, r16
    10ea:	81 91       	ld	r24, Z+
    10ec:	91 91       	ld	r25, Z+
    10ee:	8f 01       	movw	r16, r30
    10f0:	9c d9       	rcall	.-3272   	; 0x42a <dxl_read_word>
    10f2:	3b d8       	rcall	.-3978   	; 0x16a <dxl_get_lowbyte>
    10f4:	d7 01       	movw	r26, r14
    10f6:	8d 93       	st	X+, r24
    10f8:	9d 93       	st	X+, r25
    10fa:	7d 01       	movw	r14, r26
    10fc:	0c 15       	cp	r16, r12
    10fe:	1d 05       	cpc	r17, r13
    1100:	89 f7       	brne	.-30     	; 0x10e4 <getVoltage+0x40>
    1102:	88 8d       	ldd	r24, Y+24	; 0x18
    1104:	8f 93       	push	r24
    1106:	8f 89       	ldd	r24, Y+23	; 0x17
    1108:	8f 93       	push	r24
    110a:	8e 89       	ldd	r24, Y+22	; 0x16
    110c:	8f 93       	push	r24
    110e:	8d 89       	ldd	r24, Y+21	; 0x15
    1110:	8f 93       	push	r24
    1112:	8c 89       	ldd	r24, Y+20	; 0x14
    1114:	8f 93       	push	r24
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	8f 93       	push	r24
    111a:	8a 89       	ldd	r24, Y+18	; 0x12
    111c:	8f 93       	push	r24
    111e:	89 89       	ldd	r24, Y+17	; 0x11
    1120:	8f 93       	push	r24
    1122:	88 89       	ldd	r24, Y+16	; 0x10
    1124:	8f 93       	push	r24
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	8f 93       	push	r24
    112a:	8e 85       	ldd	r24, Y+14	; 0x0e
    112c:	8f 93       	push	r24
    112e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1130:	8f 93       	push	r24
    1132:	8c 85       	ldd	r24, Y+12	; 0x0c
    1134:	8f 93       	push	r24
    1136:	8b 85       	ldd	r24, Y+11	; 0x0b
    1138:	8f 93       	push	r24
    113a:	8a 85       	ldd	r24, Y+10	; 0x0a
    113c:	8f 93       	push	r24
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	8f 93       	push	r24
    1142:	88 85       	ldd	r24, Y+8	; 0x08
    1144:	8f 93       	push	r24
    1146:	8f 81       	ldd	r24, Y+7	; 0x07
    1148:	8f 93       	push	r24
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	8f 93       	push	r24
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	8f 93       	push	r24
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	8f 93       	push	r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	8f 93       	push	r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	8f 93       	push	r24
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	8f 93       	push	r24
    1162:	1f 92       	push	r1
    1164:	85 e0       	ldi	r24, 0x05	; 5
    1166:	8f 93       	push	r24
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	96 e0       	ldi	r25, 0x06	; 6
    116c:	9f 93       	push	r25
    116e:	8f 93       	push	r24
    1170:	67 d7       	rcall	.+3790   	; 0x2040 <printf>
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	60 96       	adiw	r28, 0x10	; 16
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <startMotion>:
    119a:	90 93 ef 0a 	sts	0x0AEF, r25	; 0x800aef <nextMotionNumber+0x1>
    119e:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <nextMotionNumber>
    11a2:	70 93 ed 0a 	sts	0x0AED, r23	; 0x800aed <nextMotionTimes+0x1>
    11a6:	60 93 ec 0a 	sts	0x0AEC, r22	; 0x800aec <nextMotionTimes>
    11aa:	20 91 f4 0a 	lds	r18, 0x0AF4	; 0x800af4 <motionTimes>
    11ae:	30 91 f5 0a 	lds	r19, 0x0AF5	; 0x800af5 <motionTimes+0x1>
    11b2:	23 2b       	or	r18, r19
    11b4:	61 f4       	brne	.+24     	; 0x11ce <startMotion+0x34>
    11b6:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <motionNumber+0x1>
    11ba:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <motionNumber>
    11be:	70 93 f5 0a 	sts	0x0AF5, r23	; 0x800af5 <motionTimes+0x1>
    11c2:	60 93 f4 0a 	sts	0x0AF4, r22	; 0x800af4 <motionTimes>
    11c6:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <nextMotionTimes+0x1>
    11ca:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <nextMotionTimes>
    11ce:	08 95       	ret

000011d0 <forceMotion>:
    11d0:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <motionNumber+0x1>
    11d4:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <motionNumber>
    11d8:	70 93 f5 0a 	sts	0x0AF5, r23	; 0x800af5 <motionTimes+0x1>
    11dc:	60 93 f4 0a 	sts	0x0AF4, r22	; 0x800af4 <motionTimes>
    11e0:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <nextMotionTimes+0x1>
    11e4:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <nextMotionTimes>
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    11f0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    11f4:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <motionTime+0x1>
    11f8:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <motionTime>
    11fc:	08 95       	ret

000011fe <stopMotion>:
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    1206:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    120a:	10 92 f5 0a 	sts	0x0AF5, r1	; 0x800af5 <motionTimes+0x1>
    120e:	10 92 f4 0a 	sts	0x0AF4, r1	; 0x800af4 <motionTimes>
    1212:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <motionTime+0x1>
    1216:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <motionTime>
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	9f ef       	ldi	r25, 0xFF	; 255
    121e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <motionFirst+0x1>
    1222:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motionFirst>
    1226:	08 95       	ret

00001228 <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	19 f4       	brne	.+6      	; 0x123a <PrintErrorCode+0x12>
	printf("Input voltage error!\n");
    1234:	81 e3       	ldi	r24, 0x31	; 49
    1236:	96 e0       	ldi	r25, 0x06	; 6
    1238:	16 d7       	rcall	.+3628   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	19 f4       	brne	.+6      	; 0x124c <PrintErrorCode+0x24>
	printf("Angle limit error!\n");
    1246:	86 e4       	ldi	r24, 0x46	; 70
    1248:	96 e0       	ldi	r25, 0x06	; 6
    124a:	0d d7       	rcall	.+3610   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	19 f4       	brne	.+6      	; 0x125e <PrintErrorCode+0x36>
	printf("Overheat error!\n");
    1258:	89 e5       	ldi	r24, 0x59	; 89
    125a:	96 e0       	ldi	r25, 0x06	; 6
    125c:	04 d7       	rcall	.+3592   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    125e:	88 e0       	ldi	r24, 0x08	; 8
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	19 f4       	brne	.+6      	; 0x1270 <PrintErrorCode+0x48>
	printf("Out of range error!\n");
    126a:	89 e6       	ldi	r24, 0x69	; 105
    126c:	96 e0       	ldi	r25, 0x06	; 6
    126e:	fb d6       	rcall	.+3574   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    1270:	80 e1       	ldi	r24, 0x10	; 16
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	19 f4       	brne	.+6      	; 0x1282 <PrintErrorCode+0x5a>
	printf("Checksum error!\n");
    127c:	8d e7       	ldi	r24, 0x7D	; 125
    127e:	96 e0       	ldi	r25, 0x06	; 6
    1280:	f2 d6       	rcall	.+3556   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	19 f4       	brne	.+6      	; 0x1294 <PrintErrorCode+0x6c>
	printf("Overload error!\n");
    128e:	8d e8       	ldi	r24, 0x8D	; 141
    1290:	96 e0       	ldi	r25, 0x06	; 6
    1292:	e9 d6       	rcall	.+3538   	; 0x2066 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    1294:	80 e4       	ldi	r24, 0x40	; 64
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	19 f4       	brne	.+6      	; 0x12a6 <PrintErrorCode+0x7e>
	printf("Instruction code error!\n");
    12a0:	8d e9       	ldi	r24, 0x9D	; 157
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	e0 c6       	rjmp	.+3520   	; 0x2066 <puts>
    12a6:	08 95       	ret

000012a8 <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	91 05       	cpc	r25, r1
    12ac:	91 f0       	breq	.+36     	; 0x12d2 <PrintCommStatus+0x2a>
    12ae:	34 f4       	brge	.+12     	; 0x12bc <PrintCommStatus+0x14>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	51 f0       	breq	.+20     	; 0x12ca <PrintCommStatus+0x22>
    12b6:	03 97       	sbiw	r24, 0x03	; 3
    12b8:	81 f0       	breq	.+32     	; 0x12da <PrintCommStatus+0x32>
    12ba:	1f c0       	rjmp	.+62     	; 0x12fa <PrintCommStatus+0x52>
    12bc:	86 30       	cpi	r24, 0x06	; 6
    12be:	91 05       	cpc	r25, r1
    12c0:	a1 f0       	breq	.+40     	; 0x12ea <PrintCommStatus+0x42>
    12c2:	7c f0       	brlt	.+30     	; 0x12e2 <PrintCommStatus+0x3a>
    12c4:	07 97       	sbiw	r24, 0x07	; 7
    12c6:	a9 f0       	breq	.+42     	; 0x12f2 <PrintCommStatus+0x4a>
    12c8:	18 c0       	rjmp	.+48     	; 0x12fa <PrintCommStatus+0x52>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    12ca:	85 eb       	ldi	r24, 0xB5	; 181
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	cb c6       	rjmp	.+3478   	; 0x2066 <puts>
		break;
    12d0:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    12d2:	86 ee       	ldi	r24, 0xE6	; 230
    12d4:	96 e0       	ldi	r25, 0x06	; 6
    12d6:	c7 c6       	rjmp	.+3470   	; 0x2066 <puts>
		break;
    12d8:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    12da:	82 e1       	ldi	r24, 0x12	; 18
    12dc:	97 e0       	ldi	r25, 0x07	; 7
    12de:	c3 c6       	rjmp	.+3462   	; 0x2066 <puts>
		break;
    12e0:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    12e2:	85 e4       	ldi	r24, 0x45	; 69
    12e4:	97 e0       	ldi	r25, 0x07	; 7
    12e6:	bf c6       	rjmp	.+3454   	; 0x2066 <puts>
		break;
    12e8:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    12ea:	82 e7       	ldi	r24, 0x72	; 114
    12ec:	97 e0       	ldi	r25, 0x07	; 7
    12ee:	bb c6       	rjmp	.+3446   	; 0x2066 <puts>
		break;
    12f0:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    12f2:	8d e9       	ldi	r24, 0x9D	; 157
    12f4:	97 e0       	ldi	r25, 0x07	; 7
    12f6:	b7 c6       	rjmp	.+3438   	; 0x2066 <puts>
		break;
    12f8:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    12fa:	86 ec       	ldi	r24, 0xC6	; 198
    12fc:	97 e0       	ldi	r25, 0x07	; 7
    12fe:	b3 c6       	rjmp	.+3430   	; 0x2066 <puts>
    1300:	08 95       	ret

00001302 <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	08 2f       	mov	r16, r24
    130c:	19 2f       	mov	r17, r25
    130e:	d6 2f       	mov	r29, r22
    1310:	c7 2f       	mov	r28, r23
	int CommStatus;
	printf( "%d %d\n", id, power );
    1312:	7f 93       	push	r23
    1314:	6f 93       	push	r22
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	82 ee       	ldi	r24, 0xE2	; 226
    131c:	97 e0       	ldi	r25, 0x07	; 7
    131e:	9f 93       	push	r25
    1320:	8f 93       	push	r24
    1322:	8e d6       	rcall	.+3356   	; 0x2040 <printf>
		if( CommStatus == COMM_RXSUCCESS )
			PrintErrorCode();
		else
			PrintCommStatus(CommStatus);
	}else{
		dxl_set_txpacket_id(BROADCAST_ID);
    1324:	8e ef       	ldi	r24, 0xFE	; 254
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    132c:	83 e8       	ldi	r24, 0x83	; 131
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1334:	60 e2       	ldi	r22, 0x20	; 32
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    134c:	60 2f       	mov	r22, r16
    134e:	71 2f       	mov	r23, r17
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    1358:	8d 2f       	mov	r24, r29
    135a:	9c 2f       	mov	r25, r28
    135c:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1360:	bc 01       	movw	r22, r24
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    136a:	8d 2f       	mov	r24, r29
    136c:	9c 2f       	mov	r25, r28
    136e:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1372:	bc 01       	movw	r22, r24
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    137c:	87 e0       	ldi	r24, 0x07	; 7
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1384:	29 d8       	rcall	.-4014   	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1386:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	11 f4       	brne	.+4      	; 0x13a0 <MotorControl+0x9e>
			PrintErrorCode();
    139c:	45 df       	rcall	.-374    	; 0x1228 <PrintErrorCode>
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <MotorControl+0xa0>
		else
			PrintCommStatus(CommStatus);
    13a0:	83 df       	rcall	.-250    	; 0x12a8 <PrintCommStatus>
	}
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ae 97       	sbiw	r28, 0x2e	; 46
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    13e0:	82 33       	cpi	r24, 0x32	; 50
    13e2:	91 05       	cpc	r25, r1
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <ServoControl+0x3c>
    13e6:	77 c1       	rjmp	.+750    	; 0x16d6 <ServoControl+0x32a>
    13e8:	9a a7       	std	Y+42, r25	; 0x2a
    13ea:	89 a7       	std	Y+41, r24	; 0x29
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    13ec:	fe 01       	movw	r30, r28
    13ee:	31 96       	adiw	r30, 0x01	; 1
    13f0:	80 e1       	ldi	r24, 0x10	; 16
    13f2:	df 01       	movw	r26, r30
    13f4:	1d 92       	st	X+, r1
    13f6:	8a 95       	dec	r24
    13f8:	e9 f7       	brne	.-6      	; 0x13f4 <ServoControl+0x48>
    13fa:	20 e9       	ldi	r18, 0x90	; 144
    13fc:	35 e0       	ldi	r19, 0x05	; 5
    13fe:	3e a7       	std	Y+46, r19	; 0x2e
    1400:	2d a7       	std	Y+45, r18	; 0x2d
    1402:	29 a5       	ldd	r18, Y+41	; 0x29
    1404:	3a a5       	ldd	r19, Y+42	; 0x2a
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	c9 01       	movw	r24, r18
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	ac 01       	movw	r20, r24
    141e:	44 5f       	subi	r20, 0xF4	; 244
    1420:	5d 4f       	sbci	r21, 0xFD	; 253
    1422:	5c a7       	std	Y+44, r21	; 0x2c
    1424:	4b a7       	std	Y+43, r20	; 0x2b
    1426:	1f 01       	movw	r2, r30
    1428:	5e 01       	movw	r10, r28
    142a:	51 e1       	ldi	r21, 0x11	; 17
    142c:	a5 0e       	add	r10, r21
    142e:	b1 1c       	adc	r11, r1
    1430:	8f 01       	movw	r16, r30
    1432:	cb a4       	ldd	r12, Y+43	; 0x2b
    1434:	dc a4       	ldd	r13, Y+44	; 0x2c
    1436:	0f 2e       	mov	r0, r31
    1438:	f0 e9       	ldi	r31, 0x90	; 144
    143a:	ef 2e       	mov	r14, r31
    143c:	f5 e0       	ldi	r31, 0x05	; 5
    143e:	ff 2e       	mov	r15, r31
    1440:	f0 2d       	mov	r31, r0
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    1442:	81 2c       	mov	r8, r1
    1444:	91 2c       	mov	r9, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    1446:	64 e2       	ldi	r22, 0x24	; 36
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	d7 01       	movw	r26, r14
    144c:	8d 91       	ld	r24, X+
    144e:	9d 91       	ld	r25, X+
    1450:	7d 01       	movw	r14, r26
    1452:	0e 94 15 02 	call	0x42a	; 0x42a <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    1456:	f6 01       	movw	r30, r12
    1458:	21 91       	ld	r18, Z+
    145a:	31 91       	ld	r19, Z+
    145c:	6f 01       	movw	r12, r30
    145e:	a9 01       	movw	r20, r18
    1460:	48 1b       	sub	r20, r24
    1462:	59 0b       	sbc	r21, r25
    1464:	ca 01       	movw	r24, r20
		if( angleDiff[i] < 0 ){
    1466:	99 23       	and	r25, r25
    1468:	24 f0       	brlt	.+8      	; 0x1472 <ServoControl+0xc6>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    146a:	d8 01       	movw	r26, r16
    146c:	4d 93       	st	X+, r20
    146e:	5c 93       	st	X, r21
    1470:	06 c0       	rjmp	.+12     	; 0x147e <ServoControl+0xd2>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    1472:	91 95       	neg	r25
    1474:	81 95       	neg	r24
    1476:	91 09       	sbc	r25, r1
    1478:	f8 01       	movw	r30, r16
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    147e:	d8 01       	movw	r26, r16
    1480:	8d 91       	ld	r24, X+
    1482:	9d 91       	ld	r25, X+
    1484:	8d 01       	movw	r16, r26
    1486:	88 16       	cp	r8, r24
    1488:	99 06       	cpc	r9, r25
    148a:	0c f4       	brge	.+2      	; 0x148e <ServoControl+0xe2>
    148c:	4c 01       	movw	r8, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    148e:	0a 15       	cp	r16, r10
    1490:	1b 05       	cpc	r17, r11
    1492:	c9 f6       	brne	.-78     	; 0x1446 <ServoControl+0x9a>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    1494:	8e 01       	movw	r16, r28
    1496:	0f 5e       	subi	r16, 0xEF	; 239
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	80 e1       	ldi	r24, 0x10	; 16
    149c:	f8 01       	movw	r30, r16
    149e:	11 92       	st	Z+, r1
    14a0:	8a 95       	dec	r24
    14a2:	e9 f7       	brne	.-6      	; 0x149e <ServoControl+0xf2>
    14a4:	84 e6       	ldi	r24, 0x64	; 100
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    14ac:	e9 a5       	ldd	r30, Y+41	; 0x29
    14ae:	fa a5       	ldd	r31, Y+42	; 0x2a
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	cf 01       	movw	r24, r30
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	e8 0f       	add	r30, r24
    14c4:	f9 1f       	adc	r31, r25
    14c6:	e4 5f       	subi	r30, 0xF4	; 244
    14c8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ca:	60 89       	ldd	r22, Z+16	; 0x10
    14cc:	71 89       	ldd	r23, Z+17	; 0x11
    14ce:	07 2e       	mov	r0, r23
    14d0:	00 0c       	add	r0, r0
    14d2:	88 0b       	sbc	r24, r24
    14d4:	99 0b       	sbc	r25, r25
    14d6:	c6 d3       	rcall	.+1932   	; 0x1c64 <__floatsisf>
    14d8:	69 a3       	std	Y+33, r22	; 0x21
    14da:	7a a3       	std	Y+34, r23	; 0x22
    14dc:	8b a3       	std	Y+35, r24	; 0x23
    14de:	9c a3       	std	Y+36, r25	; 0x24
    14e0:	58 01       	movw	r10, r16
    14e2:	6e 01       	movw	r12, r28
    14e4:	f1 e2       	ldi	r31, 0x21	; 33
    14e6:	cf 0e       	add	r12, r31
    14e8:	d1 1c       	adc	r13, r1
    14ea:	94 01       	movw	r18, r8
    14ec:	99 0c       	add	r9, r9
    14ee:	44 0b       	sbc	r20, r20
    14f0:	55 0b       	sbc	r21, r21
    14f2:	2d a3       	std	Y+37, r18	; 0x25
    14f4:	3e a3       	std	Y+38, r19	; 0x26
    14f6:	4f a3       	std	Y+39, r20	; 0x27
    14f8:	58 a7       	std	Y+40, r21	; 0x28
		if( speed[i] == 0 ){
			speed[i] = 1;
    14fa:	88 24       	eor	r8, r8
    14fc:	83 94       	inc	r8
    14fe:	91 2c       	mov	r9, r1
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1500:	d1 01       	movw	r26, r2
    1502:	ed 90       	ld	r14, X+
    1504:	fd 90       	ld	r15, X+
    1506:	1d 01       	movw	r2, r26
    1508:	6d a1       	ldd	r22, Y+37	; 0x25
    150a:	7e a1       	ldd	r23, Y+38	; 0x26
    150c:	8f a1       	ldd	r24, Y+39	; 0x27
    150e:	98 a5       	ldd	r25, Y+40	; 0x28
    1510:	a9 d3       	rcall	.+1874   	; 0x1c64 <__floatsisf>
    1512:	2b 01       	movw	r4, r22
    1514:	3c 01       	movw	r6, r24
    1516:	b7 01       	movw	r22, r14
    1518:	ff 0c       	add	r15, r15
    151a:	88 0b       	sbc	r24, r24
    151c:	99 0b       	sbc	r25, r25
    151e:	a2 d3       	rcall	.+1860   	; 0x1c64 <__floatsisf>
    1520:	a3 01       	movw	r20, r6
    1522:	92 01       	movw	r18, r4
    1524:	04 d3       	rcall	.+1544   	; 0x1b2e <__divsf3>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	69 a1       	ldd	r22, Y+33	; 0x21
    152c:	7a a1       	ldd	r23, Y+34	; 0x22
    152e:	8b a1       	ldd	r24, Y+35	; 0x23
    1530:	9c a1       	ldd	r25, Y+36	; 0x24
    1532:	4c d4       	rcall	.+2200   	; 0x1dcc <__mulsf3>
    1534:	64 d3       	rcall	.+1736   	; 0x1bfe <__fixsfsi>
		if( speed[i] == 0 ){
    1536:	61 15       	cp	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	21 f0       	breq	.+8      	; 0x1544 <ServoControl+0x198>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    153c:	f8 01       	movw	r30, r16
    153e:	71 83       	std	Z+1, r23	; 0x01
    1540:	60 83       	st	Z, r22
    1542:	03 c0       	rjmp	.+6      	; 0x154a <ServoControl+0x19e>
		if( speed[i] == 0 ){
			speed[i] = 1;
    1544:	d8 01       	movw	r26, r16
    1546:	8d 92       	st	X+, r8
    1548:	9c 92       	st	X, r9
    154a:	0e 5f       	subi	r16, 0xFE	; 254
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    154e:	0c 15       	cp	r16, r12
    1550:	1d 05       	cpc	r17, r13
    1552:	b1 f6       	brne	.-84     	; 0x1500 <ServoControl+0x154>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1554:	89 a5       	ldd	r24, Y+41	; 0x29
    1556:	9a a5       	ldd	r25, Y+42	; 0x2a
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	fc 01       	movw	r30, r24
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	8e 0f       	add	r24, r30
    156c:	9f 1f       	adc	r25, r31
    156e:	fc 01       	movw	r30, r24
    1570:	e4 5f       	subi	r30, 0xF4	; 244
    1572:	fd 4f       	sbci	r31, 0xFD	; 253
    1574:	60 89       	ldd	r22, Z+16	; 0x10
    1576:	71 89       	ldd	r23, Z+17	; 0x11
    1578:	8b ef       	ldi	r24, 0xFB	; 251
    157a:	93 e1       	ldi	r25, 0x13	; 19
    157c:	ad d2       	rcall	.+1370   	; 0x1ad8 <__divmodhi4>
    157e:	07 2e       	mov	r0, r23
    1580:	00 0c       	add	r0, r0
    1582:	88 0b       	sbc	r24, r24
    1584:	99 0b       	sbc	r25, r25
    1586:	6e d3       	rcall	.+1756   	; 0x1c64 <__floatsisf>
    1588:	a3 01       	movw	r20, r6
    158a:	92 01       	movw	r18, r4
    158c:	1f d4       	rcall	.+2110   	; 0x1dcc <__mulsf3>
    158e:	37 d3       	rcall	.+1646   	; 0x1bfe <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    1590:	16 16       	cp	r1, r22
    1592:	17 06       	cpc	r1, r23
    1594:	2c f4       	brge	.+10     	; 0x15a0 <ServoControl+0x1f4>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1596:	70 93 f1 0a 	sts	0x0AF1, r23	; 0x800af1 <movingTime+0x1>
    159a:	60 93 f0 0a 	sts	0x0AF0, r22	; 0x800af0 <movingTime>
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <ServoControl+0x200>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	90 93 f1 0a 	sts	0x0AF1, r25	; 0x800af1 <movingTime+0x1>
    15a8:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <movingTime>
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    15ac:	8e ef       	ldi	r24, 0xFE	; 254
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    15b4:	83 e8       	ldi	r24, 0x83	; 131
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    15bc:	60 e2       	ldi	r22, 0x20	; 32
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    15c8:	62 e0       	ldi	r22, 0x02	; 2
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f0 e9       	ldi	r31, 0x90	; 144
    15d8:	cf 2e       	mov	r12, r31
    15da:	f5 e0       	ldi	r31, 0x05	; 5
    15dc:	df 2e       	mov	r13, r31
    15de:	f0 2d       	mov	r31, r0
    15e0:	02 e0       	ldi	r16, 0x02	; 2
    15e2:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    15e4:	f6 01       	movw	r30, r12
    15e6:	61 91       	ld	r22, Z+
    15e8:	71 91       	ld	r23, Z+
    15ea:	6f 01       	movw	r12, r30
    15ec:	c8 01       	movw	r24, r16
    15ee:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    15f2:	d5 01       	movw	r26, r10
    15f4:	ed 90       	ld	r14, X+
    15f6:	fd 90       	ld	r15, X+
    15f8:	5d 01       	movw	r10, r26
    15fa:	c7 01       	movw	r24, r14
    15fc:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1600:	bc 01       	movw	r22, r24
    1602:	c8 01       	movw	r24, r16
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    160a:	c7 01       	movw	r24, r14
    160c:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1610:	bc 01       	movw	r22, r24
    1612:	c8 01       	movw	r24, r16
    1614:	02 96       	adiw	r24, 0x02	; 2
    1616:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    161a:	0d 5f       	subi	r16, 0xFD	; 253
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    161e:	0a 31       	cpi	r16, 0x1A	; 26
    1620:	11 05       	cpc	r17, r1
    1622:	01 f7       	brne	.-64     	; 0x15e4 <ServoControl+0x238>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    1624:	8c e1       	ldi	r24, 0x1C	; 28
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
	dxl_txrx_packet();
    162c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    1630:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	09 f0       	breq	.+2      	; 0x163c <ServoControl+0x290>
    163a:	4c c0       	rjmp	.+152    	; 0x16d4 <ServoControl+0x328>
		PrintErrorCode();
    163c:	f5 dd       	rcall	.-1046   	; 0x1228 <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    163e:	8e ef       	ldi	r24, 0xFE	; 254
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1646:	83 e8       	ldi	r24, 0x83	; 131
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    164e:	6e e1       	ldi	r22, 0x1E	; 30
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1666:	02 e0       	ldi	r16, 0x02	; 2
    1668:	10 e0       	ldi	r17, 0x00	; 0
    166a:	cd a4       	ldd	r12, Y+45	; 0x2d
    166c:	de a4       	ldd	r13, Y+46	; 0x2e
    166e:	eb a4       	ldd	r14, Y+43	; 0x2b
    1670:	fc a4       	ldd	r15, Y+44	; 0x2c
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1672:	f6 01       	movw	r30, r12
    1674:	61 91       	ld	r22, Z+
    1676:	71 91       	ld	r23, Z+
    1678:	6f 01       	movw	r12, r30
    167a:	c8 01       	movw	r24, r16
    167c:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1680:	57 01       	movw	r10, r14
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    1682:	d7 01       	movw	r26, r14
    1684:	8d 91       	ld	r24, X+
    1686:	9d 91       	ld	r25, X+
    1688:	7d 01       	movw	r14, r26
    168a:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    168e:	bc 01       	movw	r22, r24
    1690:	c8 01       	movw	r24, r16
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    1698:	f5 01       	movw	r30, r10
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    16a2:	bc 01       	movw	r22, r24
    16a4:	c8 01       	movw	r24, r16
    16a6:	02 96       	adiw	r24, 0x02	; 2
    16a8:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    16ac:	0d 5f       	subi	r16, 0xFD	; 253
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    16b0:	0a 31       	cpi	r16, 0x1A	; 26
    16b2:	11 05       	cpc	r17, r1
    16b4:	f1 f6       	brne	.-68     	; 0x1672 <ServoControl+0x2c6>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    16b6:	8c e1       	ldi	r24, 0x1C	; 28
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    16be:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    16c2:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <ServoControl+0x324>
			PrintErrorCode();
    16cc:	ad dd       	rcall	.-1190   	; 0x1228 <PrintErrorCode>
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <ServoControl+0x32a>
		}else{
			PrintCommStatus(CommStatus);
    16d0:	eb dd       	rcall	.-1066   	; 0x12a8 <PrintCommStatus>
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <ServoControl+0x32a>
		}
	}else{
		PrintCommStatus(CommStatus);
    16d4:	e9 dd       	rcall	.-1070   	; 0x12a8 <PrintCommStatus>
	}
}
    16d6:	ae 96       	adiw	r28, 0x2e	; 46
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
    1706:	08 95       	ret

00001708 <main>:
int gyroTemp = 0;
int gyroCount = 0;
int mainCount = 0;

#if 1
int main(void){
    1708:	6f 92       	push	r6
    170a:	7f 92       	push	r7
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
	
//	int (*atest)[] = test();
//	int a = atest[0][0];
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    1724:	8c ef       	ldi	r24, 0xFC	; 252
    1726:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    1728:	8e ef       	ldi	r24, 0xFE	; 254
    172a:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    172c:	8f e7       	ldi	r24, 0x7F	; 127
    172e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    1730:	8e e7       	ldi	r24, 0x7E	; 126
    1732:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1734:	80 e7       	ldi	r24, 0x70	; 112
    1736:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1738:	81 e1       	ldi	r24, 0x11	; 17
    173a:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    173c:	f7 da       	rcall	.-2578   	; 0xd2c <MotorInit>
	initSerial();
    173e:	64 d1       	rcall	.+712    	; 0x1a08 <initSerial>
	int isFinish = 0;
	int gyro = 0; //45 - 455
	int direction = 0;
	int speed = 0;

    sensorInit();
    1740:	7e da       	rcall	.-2820   	; 0xc3e <sensorInit>
	printf( "### start\r\n");
    1742:	89 ee       	ldi	r24, 0xE9	; 233
    1744:	97 e0       	ldi	r25, 0x07	; 7
    1746:	8f d4       	rcall	.+2334   	; 0x2066 <puts>
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1748:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <isCaptureMode>
    174c:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <isCaptureMode+0x1>
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	41 f4       	brne	.+16     	; 0x1764 <main+0x5c>
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	68 e1       	ldi	r22, 0x18	; 24
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	8e ef       	ldi	r24, 0xFE	; 254
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
					speed = ((float)gyro / (float)410) * 1023;
				}
				printf( "### GYRO = %d, SPEED = %d, GOAL = %d\r\n", gyro, speed, direction);
    1764:	0f 2e       	mov	r0, r31
    1766:	f4 ef       	ldi	r31, 0xF4	; 244
    1768:	ef 2e       	mov	r14, r31
    176a:	f7 e0       	ldi	r31, 0x07	; 7
    176c:	ff 2e       	mov	r15, r31
    176e:	f0 2d       	mov	r31, r0
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    1770:	0f 2e       	mov	r0, r31
    1772:	fc eb       	ldi	r31, 0xBC	; 188
    1774:	af 2e       	mov	r10, r31
    1776:	f0 2d       	mov	r31, r0
    1778:	68 94       	set
    177a:	bb 24       	eor	r11, r11
    177c:	b1 f8       	bld	r11, 1
        sensorTest(0);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    177e:	88 24       	eor	r8, r8
    1780:	83 94       	inc	r8
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1782:	08 ef       	ldi	r16, 0xF8	; 248
    1784:	1a e0       	ldi	r17, 0x0A	; 10
    1786:	0f 2e       	mov	r0, r31
    1788:	f0 ea       	ldi	r31, 0xA0	; 160
    178a:	df 2e       	mov	r13, r31
    178c:	f0 2d       	mov	r31, r0
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    178e:	0f 2e       	mov	r0, r31
    1790:	f0 e5       	ldi	r31, 0x50	; 80
    1792:	cf 2e       	mov	r12, r31
    1794:	f0 2d       	mov	r31, r0
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
						break;
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
						PORTC = ~(1 << (LED_MAX - 2));
    1796:	0f 2e       	mov	r0, r31
    1798:	ff ed       	ldi	r31, 0xDF	; 223
    179a:	9f 2e       	mov	r9, r31
    179c:	f0 2d       	mov	r31, r0
    sensorInit();
	printf( "### start\r\n");
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	5e da       	rcall	.-2884   	; 0xc60 <sensorTest>
		if (gyroValue > 0 && preGyroValue > 0) {
    17a4:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <gyroValue>
    17a8:	90 91 e3 0a 	lds	r25, 0x0AE3	; 0x800ae3 <gyroValue+0x1>
    17ac:	18 16       	cp	r1, r24
    17ae:	19 06       	cpc	r1, r25
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <main+0xac>
    17b2:	5a c0       	rjmp	.+180    	; 0x1868 <main+0x160>
    17b4:	c0 91 e4 0a 	lds	r28, 0x0AE4	; 0x800ae4 <preGyroValue>
    17b8:	d0 91 e5 0a 	lds	r29, 0x0AE5	; 0x800ae5 <preGyroValue+0x1>
    17bc:	1c 16       	cp	r1, r28
    17be:	1d 06       	cpc	r1, r29
    17c0:	0c f0       	brlt	.+2      	; 0x17c4 <main+0xbc>
    17c2:	52 c0       	rjmp	.+164    	; 0x1868 <main+0x160>
			gyro = preGyroValue - gyroValue;
    17c4:	c8 1b       	sub	r28, r24
    17c6:	d9 0b       	sbc	r29, r25
			if(gyro != 0 && gyroValue != 0) {
    17c8:	09 f4       	brne	.+2      	; 0x17cc <main+0xc4>
    17ca:	4e c0       	rjmp	.+156    	; 0x1868 <main+0x160>
				if (gyro < 0) {
    17cc:	d2 f4       	brpl	.+52     	; 0x1802 <main+0xfa>
					direction = 300;
					speed = ((float)-gyro / (float)410) * 1023;
    17ce:	66 27       	eor	r22, r22
    17d0:	77 27       	eor	r23, r23
    17d2:	6c 1b       	sub	r22, r28
    17d4:	7d 0b       	sbc	r23, r29
    17d6:	07 2e       	mov	r0, r23
    17d8:	00 0c       	add	r0, r0
    17da:	88 0b       	sbc	r24, r24
    17dc:	99 0b       	sbc	r25, r25
    17de:	42 d2       	rcall	.+1156   	; 0x1c64 <__floatsisf>
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4d ec       	ldi	r20, 0xCD	; 205
    17e6:	53 e4       	ldi	r21, 0x43	; 67
    17e8:	a2 d1       	rcall	.+836    	; 0x1b2e <__divsf3>
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 ec       	ldi	r19, 0xC0	; 192
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	ec d2       	rcall	.+1496   	; 0x1dcc <__mulsf3>
    17f4:	04 d2       	rcall	.+1032   	; 0x1bfe <__fixsfsi>
        sensorTest(0);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    17f6:	0f 2e       	mov	r0, r31
    17f8:	fc e2       	ldi	r31, 0x2C	; 44
    17fa:	6f 2e       	mov	r6, r31
    17fc:	f0 2d       	mov	r31, r0
    17fe:	78 2c       	mov	r7, r8
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <main+0x120>
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
					speed = ((float)gyro / (float)410) * 1023;
    1802:	be 01       	movw	r22, r28
    1804:	0d 2e       	mov	r0, r29
    1806:	00 0c       	add	r0, r0
    1808:	88 0b       	sbc	r24, r24
    180a:	99 0b       	sbc	r25, r25
    180c:	2b d2       	rcall	.+1110   	; 0x1c64 <__floatsisf>
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4d ec       	ldi	r20, 0xCD	; 205
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	8b d1       	rcall	.+790    	; 0x1b2e <__divsf3>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 ec       	ldi	r19, 0xC0	; 192
    181c:	4f e7       	ldi	r20, 0x7F	; 127
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	d5 d2       	rcall	.+1450   	; 0x1dcc <__mulsf3>
    1822:	ed d1       	rcall	.+986    	; 0x1bfe <__fixsfsi>
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    1824:	6a 2c       	mov	r6, r10
    1826:	7b 2c       	mov	r7, r11
					speed = ((float)gyro / (float)410) * 1023;
				}
				printf( "### GYRO = %d, SPEED = %d, GOAL = %d\r\n", gyro, speed, direction);
    1828:	7f 92       	push	r7
    182a:	6f 92       	push	r6
    182c:	7f 93       	push	r23
    182e:	6f 93       	push	r22
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	ff 92       	push	r15
    1836:	ef 92       	push	r14
    1838:	03 d4       	rcall	.+2054   	; 0x2040 <printf>
				dxl_write_word( 17, P_GOAL_SPEED_L, gyro );
    183a:	ae 01       	movw	r20, r28
    183c:	60 e2       	ldi	r22, 0x20	; 32
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	81 e1       	ldi	r24, 0x11	; 17
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dxl_write_word>
				dxl_write_word( 17, P_GOAL_POSITION_L, direction );
    1848:	46 2d       	mov	r20, r6
    184a:	57 2d       	mov	r21, r7
    184c:	6e e1       	ldi	r22, 0x1E	; 30
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	81 e1       	ldi	r24, 0x11	; 17
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dxl_write_word>
    1858:	ed b7       	in	r30, 0x3d	; 61
    185a:	fe b7       	in	r31, 0x3e	; 62
    185c:	38 96       	adiw	r30, 0x08	; 8
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	fe bf       	out	0x3e, r31	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	ed bf       	out	0x3d, r30	; 61
		
//        sensorTest(1);
//        sensorTest(2);

//		setMode();
		if (++mainCount > 1000) {
    1868:	80 91 dc 0a 	lds	r24, 0x0ADC	; 0x800adc <mainCount>
    186c:	90 91 dd 0a 	lds	r25, 0x0ADD	; 0x800add <mainCount+0x1>
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	89 3e       	cpi	r24, 0xE9	; 233
    1874:	f3 e0       	ldi	r31, 0x03	; 3
    1876:	9f 07       	cpc	r25, r31
    1878:	2c f4       	brge	.+10     	; 0x1884 <main+0x17c>
    187a:	90 93 dd 0a 	sts	0x0ADD, r25	; 0x800add <mainCount+0x1>
    187e:	80 93 dc 0a 	sts	0x0ADC, r24	; 0x800adc <mainCount>
    1882:	8f c0       	rjmp	.+286    	; 0x19a2 <main+0x29a>
			mainCount = 0;
    1884:	10 92 dd 0a 	sts	0x0ADD, r1	; 0x800add <mainCount+0x1>
    1888:	10 92 dc 0a 	sts	0x0ADC, r1	; 0x800adc <mainCount>
			if( checkSerialRead() > 0 ){
    188c:	c4 d0       	rcall	.+392    	; 0x1a16 <checkSerialRead>
    188e:	18 16       	cp	r1, r24
    1890:	19 06       	cpc	r1, r25
    1892:	0c f0       	brlt	.+2      	; 0x1896 <main+0x18e>
    1894:	81 c0       	rjmp	.+258    	; 0x1998 <main+0x290>
				readData = getReadBuffer();
    1896:	0f d1       	rcall	.+542    	; 0x1ab6 <getReadBuffer>
    1898:	ec 01       	movw	r28, r24
				if( readData != NULL ){
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	09 f4       	brne	.+2      	; 0x18a0 <main+0x198>
    189e:	7c c0       	rjmp	.+248    	; 0x1998 <main+0x290>
	//				printf( "readData=%s\n", &readData[0] );
					split( &readData[0] );
    18a0:	69 da       	rcall	.-2862   	; 0xd74 <split>
					switch( serCmd[0] ){
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	86 30       	cpi	r24, 0x06	; 6
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <main+0x1a8>
    18ae:	5a c0       	rjmp	.+180    	; 0x1964 <main+0x25c>
    18b0:	94 f4       	brge	.+36     	; 0x18d6 <main+0x1ce>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <main+0x1b2>
    18b8:	42 c0       	rjmp	.+132    	; 0x193e <main+0x236>
    18ba:	34 f4       	brge	.+12     	; 0x18c8 <main+0x1c0>
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	01 f1       	breq	.+64     	; 0x1900 <main+0x1f8>
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <main+0x1be>
    18c4:	3e c0       	rjmp	.+124    	; 0x1942 <main+0x23a>
    18c6:	60 c0       	rjmp	.+192    	; 0x1988 <main+0x280>
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <main+0x1c8>
    18ce:	46 c0       	rjmp	.+140    	; 0x195c <main+0x254>
    18d0:	0c f4       	brge	.+2      	; 0x18d4 <main+0x1cc>
    18d2:	38 c0       	rjmp	.+112    	; 0x1944 <main+0x23c>
    18d4:	45 c0       	rjmp	.+138    	; 0x1960 <main+0x258>
    18d6:	89 30       	cpi	r24, 0x09	; 9
    18d8:	91 05       	cpc	r25, r1
    18da:	51 f1       	breq	.+84     	; 0x1930 <main+0x228>
    18dc:	34 f4       	brge	.+12     	; 0x18ea <main+0x1e2>
    18de:	87 30       	cpi	r24, 0x07	; 7
    18e0:	91 05       	cpc	r25, r1
    18e2:	b1 f0       	breq	.+44     	; 0x1910 <main+0x208>
    18e4:	08 97       	sbiw	r24, 0x08	; 8
    18e6:	f9 f0       	breq	.+62     	; 0x1926 <main+0x21e>
    18e8:	4f c0       	rjmp	.+158    	; 0x1988 <main+0x280>
    18ea:	8b 30       	cpi	r24, 0x0B	; 11
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <main+0x1ea>
    18f0:	4e c0       	rjmp	.+156    	; 0x198e <main+0x286>
    18f2:	0c f4       	brge	.+2      	; 0x18f6 <main+0x1ee>
    18f4:	40 c0       	rjmp	.+128    	; 0x1976 <main+0x26e>
    18f6:	87 3e       	cpi	r24, 0xE7	; 231
    18f8:	93 40       	sbci	r25, 0x03	; 3
    18fa:	09 f4       	brne	.+2      	; 0x18fe <main+0x1f6>
    18fc:	6c c0       	rjmp	.+216    	; 0x19d6 <main+0x2ce>
    18fe:	44 c0       	rjmp	.+136    	; 0x1988 <main+0x280>
					case EVT_ACTION:
						ServoControl( serCmd[1] );
    1900:	f8 01       	movw	r30, r16
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	52 dd       	rcall	.-1372   	; 0x13ac <ServoControl>
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 da       	rcall	.-3068   	; 0xd12 <sendAck>
						break;
    190e:	3f c0       	rjmp	.+126    	; 0x198e <main+0x286>
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
    1910:	f8 01       	movw	r30, r16
    1912:	64 81       	ldd	r22, Z+4	; 0x04
    1914:	75 81       	ldd	r23, Z+5	; 0x05
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	3f dc       	rcall	.-1922   	; 0x119a <startMotion>
						PORTC = ~(1 << (LED_MAX - 2));
    191c:	98 b8       	out	0x08, r9	; 8
						sendAck(1);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	f7 d9       	rcall	.-3090   	; 0xd12 <sendAck>
						break;
    1924:	34 c0       	rjmp	.+104    	; 0x198e <main+0x286>
					case EVT_STOP_MOTION:
						stopMotion();
    1926:	6b dc       	rcall	.-1834   	; 0x11fe <stopMotion>
						sendAck(1);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	f2 d9       	rcall	.-3100   	; 0xd12 <sendAck>
						break;
    192e:	2f c0       	rjmp	.+94     	; 0x198e <main+0x286>
					case EVT_FORCE_MOTION:
						forceMotion( serCmd[1], serCmd[2] );
    1930:	f8 01       	movw	r30, r16
    1932:	64 81       	ldd	r22, Z+4	; 0x04
    1934:	75 81       	ldd	r23, Z+5	; 0x05
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	4a dc       	rcall	.-1900   	; 0x11d0 <forceMotion>
						break;
    193c:	28 c0       	rjmp	.+80     	; 0x198e <main+0x286>
					case EVT_GET_NOW_ANGLE:
						getAngle();
    193e:	68 da       	rcall	.-2864   	; 0xe10 <getAngle>
						break;
    1940:	26 c0       	rjmp	.+76     	; 0x198e <main+0x286>
					case EVT_SET_ANGLE:
						setAngle();
    1942:	45 da       	rcall	.-2934   	; 0xdce <setAngle>
					case EVT_GET_ACT_ANGLE:
						if( serCmd[1] >= ACT_MAX ){
    1944:	f8 01       	movw	r30, r16
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	82 33       	cpi	r24, 0x32	; 50
    194c:	91 05       	cpc	r25, r1
    194e:	24 f0       	brlt	.+8      	; 0x1958 <main+0x250>
							sendAck(0);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	de d9       	rcall	.-3140   	; 0xd12 <sendAck>
    1956:	1b c0       	rjmp	.+54     	; 0x198e <main+0x286>
						}else{
							sendActAngle(serCmd[1]);
    1958:	c6 da       	rcall	.-2676   	; 0xee6 <sendActAngle>
    195a:	19 c0       	rjmp	.+50     	; 0x198e <main+0x286>
						}
						break;
					case EVT_GET_LOAD:
						getLoad();
    195c:	29 db       	rcall	.-2478   	; 0xfb0 <getLoad>
	//					printf( "%d\n", movingTime );
						break;
    195e:	17 c0       	rjmp	.+46     	; 0x198e <main+0x286>
					case EVT_GET_VOLTAGE:
						getVoltage();
    1960:	a1 db       	rcall	.-2238   	; 0x10a4 <getVoltage>
						break;
    1962:	15 c0       	rjmp	.+42     	; 0x198e <main+0x286>
					case EVT_TORQUE_DISABLE:
						dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	68 e1       	ldi	r22, 0x18	; 24
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	8e ef       	ldi	r24, 0xFE	; 254
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
						break;
    1974:	0c c0       	rjmp	.+24     	; 0x198e <main+0x286>
					case EVT_WATCH_DOG:
						watchDogCnt = 0;
    1976:	10 92 e8 0a 	sts	0x0AE8, r1	; 0x800ae8 <watchDogCnt>
    197a:	10 92 e9 0a 	sts	0x0AE9, r1	; 0x800ae9 <watchDogCnt+0x1>
    197e:	10 92 ea 0a 	sts	0x0AEA, r1	; 0x800aea <watchDogCnt+0x2>
    1982:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <watchDogCnt+0x3>
						break;
    1986:	03 c0       	rjmp	.+6      	; 0x198e <main+0x286>
	//					printf( "finish\n");
						sendAck(999);
						isFinish = 1;
						break;
					default:
						sendAck(0);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	c2 d9       	rcall	.-3196   	; 0xd12 <sendAck>
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    198e:	fe 01       	movw	r30, r28
    1990:	2c 2d       	mov	r18, r12
    1992:	11 92       	st	Z+, r1
    1994:	2a 95       	dec	r18
    1996:	e9 f7       	brne	.-6      	; 0x1992 <main+0x28a>
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1998:	f8 01       	movw	r30, r16
    199a:	2d 2d       	mov	r18, r13
    199c:	11 92       	st	Z+, r1
    199e:	2a 95       	dec	r18
    19a0:	e9 f7       	brne	.-6      	; 0x199c <main+0x294>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19a2:	89 ef       	ldi	r24, 0xF9	; 249
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <main+0x29e>
    19aa:	00 c0       	rjmp	.+0      	; 0x19ac <main+0x2a4>
    19ac:	00 00       	nop
			sensorValueOld[2] = sensorValue[2];
#endif
		}
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    19ae:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <watchDogCnt>
    19b2:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <watchDogCnt+0x1>
    19b6:	a0 91 ea 0a 	lds	r26, 0x0AEA	; 0x800aea <watchDogCnt+0x2>
    19ba:	b0 91 eb 0a 	lds	r27, 0x0AEB	; 0x800aeb <watchDogCnt+0x3>
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	a1 1d       	adc	r26, r1
    19c2:	b1 1d       	adc	r27, r1
    19c4:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <watchDogCnt>
    19c8:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <watchDogCnt+0x1>
    19cc:	a0 93 ea 0a 	sts	0x0AEA, r26	; 0x800aea <watchDogCnt+0x2>
    19d0:	b0 93 eb 0a 	sts	0x0AEB, r27	; 0x800aeb <watchDogCnt+0x3>
		if (caputureCount1 == 25){
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
    19d4:	e4 ce       	rjmp	.-568    	; 0x179e <main+0x96>
						break;
					case EVT_MOTION_EDIT:
						break;
					case 999:
	//					printf( "finish\n");
						sendAck(999);
    19d6:	87 ee       	ldi	r24, 0xE7	; 231
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	9b d9       	rcall	.-3274   	; 0xd12 <sendAck>
						break;
					default:
						sendAck(0);
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	8e dc       	rcall	.-1764   	; 0x1302 <MotorControl>
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
}
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	08 95       	ret

00001a08 <initSerial>:
			}
		}
		//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	71 ee       	ldi	r23, 0xE1	; 225
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	e4 d8       	rcall	.-3640   	; 0xbda <serial_initialize>
    1a12:	78 94       	sei
    1a14:	08 95       	ret

00001a16 <checkSerialRead>:
    1a16:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <serial_get_qstate>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	19 06       	cpc	r1, r25
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <checkSerialRead+0xc>
    1a20:	3e c0       	rjmp	.+124    	; 0x1a9e <checkSerialRead+0x88>
    1a22:	80 91 f6 0b 	lds	r24, 0x0BF6	; 0x800bf6 <__iob>
    1a26:	90 91 f7 0b 	lds	r25, 0x0BF7	; 0x800bf7 <__iob+0x1>
    1a2a:	cc d2       	rcall	.+1432   	; 0x1fc4 <fgetc>
    1a2c:	8a 30       	cpi	r24, 0x0A	; 10
    1a2e:	11 f0       	breq	.+4      	; 0x1a34 <checkSerialRead+0x1e>
    1a30:	8d 30       	cpi	r24, 0x0D	; 13
    1a32:	91 f4       	brne	.+36     	; 0x1a58 <checkSerialRead+0x42>
    1a34:	80 91 e8 0b 	lds	r24, 0x0BE8	; 0x800be8 <buffCnt>
    1a38:	90 91 e9 0b 	lds	r25, 0x0BE9	; 0x800be9 <buffCnt+0x1>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	19 06       	cpc	r1, r25
    1a40:	8c f5       	brge	.+98     	; 0x1aa4 <checkSerialRead+0x8e>
    1a42:	10 92 e9 0b 	sts	0x0BE9, r1	; 0x800be9 <buffCnt+0x1>
    1a46:	10 92 e8 0b 	sts	0x0BE8, r1	; 0x800be8 <buffCnt>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	90 93 eb 0b 	sts	0x0BEB, r25	; 0x800beb <isRead+0x1>
    1a52:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <isRead>
    1a56:	08 95       	ret
    1a58:	88 23       	and	r24, r24
    1a5a:	39 f1       	breq	.+78     	; 0x1aaa <checkSerialRead+0x94>
    1a5c:	20 91 e8 0b 	lds	r18, 0x0BE8	; 0x800be8 <buffCnt>
    1a60:	30 91 e9 0b 	lds	r19, 0x0BE9	; 0x800be9 <buffCnt+0x1>
    1a64:	a9 01       	movw	r20, r18
    1a66:	4f 5f       	subi	r20, 0xFF	; 255
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	50 93 e9 0b 	sts	0x0BE9, r21	; 0x800be9 <buffCnt+0x1>
    1a6e:	40 93 e8 0b 	sts	0x0BE8, r20	; 0x800be8 <buffCnt>
    1a72:	f9 01       	movw	r30, r18
    1a74:	e8 56       	subi	r30, 0x68	; 104
    1a76:	f4 4f       	sbci	r31, 0xF4	; 244
    1a78:	80 83       	st	Z, r24
    1a7a:	80 91 e8 0b 	lds	r24, 0x0BE8	; 0x800be8 <buffCnt>
    1a7e:	90 91 e9 0b 	lds	r25, 0x0BE9	; 0x800be9 <buffCnt+0x1>
    1a82:	8f 34       	cpi	r24, 0x4F	; 79
    1a84:	91 05       	cpc	r25, r1
    1a86:	a4 f0       	brlt	.+40     	; 0x1ab0 <checkSerialRead+0x9a>
    1a88:	10 92 e9 0b 	sts	0x0BE9, r1	; 0x800be9 <buffCnt+0x1>
    1a8c:	10 92 e8 0b 	sts	0x0BE8, r1	; 0x800be8 <buffCnt>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	90 93 eb 0b 	sts	0x0BEB, r25	; 0x800beb <isRead+0x1>
    1a98:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <isRead>
    1a9c:	08 95       	ret
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	08 95       	ret
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	08 95       	ret

00001ab6 <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
    1ab6:	80 91 ea 0b 	lds	r24, 0x0BEA	; 0x800bea <isRead>
    1aba:	90 91 eb 0b 	lds	r25, 0x0BEB	; 0x800beb <isRead+0x1>
    1abe:	18 16       	cp	r1, r24
    1ac0:	19 06       	cpc	r1, r25
    1ac2:	3c f4       	brge	.+14     	; 0x1ad2 <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
    1ac4:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <isRead+0x1>
    1ac8:	10 92 ea 0b 	sts	0x0BEA, r1	; 0x800bea <isRead>
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
    1acc:	88 e9       	ldi	r24, 0x98	; 152
    1ace:	9b e0       	ldi	r25, 0x0B	; 11
    1ad0:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
    1ad6:	08 95       	ret

00001ad8 <__divmodhi4>:
    1ad8:	97 fb       	bst	r25, 7
    1ada:	07 2e       	mov	r0, r23
    1adc:	16 f4       	brtc	.+4      	; 0x1ae2 <__divmodhi4+0xa>
    1ade:	00 94       	com	r0
    1ae0:	06 d0       	rcall	.+12     	; 0x1aee <__divmodhi4_neg1>
    1ae2:	77 fd       	sbrc	r23, 7
    1ae4:	08 d0       	rcall	.+16     	; 0x1af6 <__divmodhi4_neg2>
    1ae6:	0b d0       	rcall	.+22     	; 0x1afe <__udivmodhi4>
    1ae8:	07 fc       	sbrc	r0, 7
    1aea:	05 d0       	rcall	.+10     	; 0x1af6 <__divmodhi4_neg2>
    1aec:	3e f4       	brtc	.+14     	; 0x1afc <__divmodhi4_exit>

00001aee <__divmodhi4_neg1>:
    1aee:	90 95       	com	r25
    1af0:	81 95       	neg	r24
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	08 95       	ret

00001af6 <__divmodhi4_neg2>:
    1af6:	70 95       	com	r23
    1af8:	61 95       	neg	r22
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255

00001afc <__divmodhi4_exit>:
    1afc:	08 95       	ret

00001afe <__udivmodhi4>:
    1afe:	aa 1b       	sub	r26, r26
    1b00:	bb 1b       	sub	r27, r27
    1b02:	51 e1       	ldi	r21, 0x11	; 17
    1b04:	07 c0       	rjmp	.+14     	; 0x1b14 <__udivmodhi4_ep>

00001b06 <__udivmodhi4_loop>:
    1b06:	aa 1f       	adc	r26, r26
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	a6 17       	cp	r26, r22
    1b0c:	b7 07       	cpc	r27, r23
    1b0e:	10 f0       	brcs	.+4      	; 0x1b14 <__udivmodhi4_ep>
    1b10:	a6 1b       	sub	r26, r22
    1b12:	b7 0b       	sbc	r27, r23

00001b14 <__udivmodhi4_ep>:
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	5a 95       	dec	r21
    1b1a:	a9 f7       	brne	.-22     	; 0x1b06 <__udivmodhi4_loop>
    1b1c:	80 95       	com	r24
    1b1e:	90 95       	com	r25
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	08 95       	ret

00001b26 <__cmpsf2>:
    1b26:	d9 d0       	rcall	.+434    	; 0x1cda <__fp_cmp>
    1b28:	08 f4       	brcc	.+2      	; 0x1b2c <__cmpsf2+0x6>
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	08 95       	ret

00001b2e <__divsf3>:
    1b2e:	0c d0       	rcall	.+24     	; 0x1b48 <__divsf3x>
    1b30:	0f c1       	rjmp	.+542    	; 0x1d50 <__fp_round>
    1b32:	07 d1       	rcall	.+526    	; 0x1d42 <__fp_pscB>
    1b34:	40 f0       	brcs	.+16     	; 0x1b46 <__divsf3+0x18>
    1b36:	fe d0       	rcall	.+508    	; 0x1d34 <__fp_pscA>
    1b38:	30 f0       	brcs	.+12     	; 0x1b46 <__divsf3+0x18>
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <__divsf3+0x16>
    1b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <__divsf3+0x18>
    1b40:	f0 c0       	rjmp	.+480    	; 0x1d22 <__fp_inf>
    1b42:	51 11       	cpse	r21, r1
    1b44:	39 c1       	rjmp	.+626    	; 0x1db8 <__fp_szero>
    1b46:	f3 c0       	rjmp	.+486    	; 0x1d2e <__fp_nan>

00001b48 <__divsf3x>:
    1b48:	14 d1       	rcall	.+552    	; 0x1d72 <__fp_split3>
    1b4a:	98 f3       	brcs	.-26     	; 0x1b32 <__divsf3+0x4>

00001b4c <__divsf3_pse>:
    1b4c:	99 23       	and	r25, r25
    1b4e:	c9 f3       	breq	.-14     	; 0x1b42 <__divsf3+0x14>
    1b50:	55 23       	and	r21, r21
    1b52:	b1 f3       	breq	.-20     	; 0x1b40 <__divsf3+0x12>
    1b54:	95 1b       	sub	r25, r21
    1b56:	55 0b       	sbc	r21, r21
    1b58:	bb 27       	eor	r27, r27
    1b5a:	aa 27       	eor	r26, r26
    1b5c:	62 17       	cp	r22, r18
    1b5e:	73 07       	cpc	r23, r19
    1b60:	84 07       	cpc	r24, r20
    1b62:	38 f0       	brcs	.+14     	; 0x1b72 <__divsf3_pse+0x26>
    1b64:	9f 5f       	subi	r25, 0xFF	; 255
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	44 1f       	adc	r20, r20
    1b6e:	aa 1f       	adc	r26, r26
    1b70:	a9 f3       	breq	.-22     	; 0x1b5c <__divsf3_pse+0x10>
    1b72:	33 d0       	rcall	.+102    	; 0x1bda <__divsf3_pse+0x8e>
    1b74:	0e 2e       	mov	r0, r30
    1b76:	3a f0       	brmi	.+14     	; 0x1b86 <__divsf3_pse+0x3a>
    1b78:	e0 e8       	ldi	r30, 0x80	; 128
    1b7a:	30 d0       	rcall	.+96     	; 0x1bdc <__divsf3_pse+0x90>
    1b7c:	91 50       	subi	r25, 0x01	; 1
    1b7e:	50 40       	sbci	r21, 0x00	; 0
    1b80:	e6 95       	lsr	r30
    1b82:	00 1c       	adc	r0, r0
    1b84:	ca f7       	brpl	.-14     	; 0x1b78 <__divsf3_pse+0x2c>
    1b86:	29 d0       	rcall	.+82     	; 0x1bda <__divsf3_pse+0x8e>
    1b88:	fe 2f       	mov	r31, r30
    1b8a:	27 d0       	rcall	.+78     	; 0x1bda <__divsf3_pse+0x8e>
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	bb 1f       	adc	r27, r27
    1b94:	26 17       	cp	r18, r22
    1b96:	37 07       	cpc	r19, r23
    1b98:	48 07       	cpc	r20, r24
    1b9a:	ab 07       	cpc	r26, r27
    1b9c:	b0 e8       	ldi	r27, 0x80	; 128
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <__divsf3_pse+0x56>
    1ba0:	bb 0b       	sbc	r27, r27
    1ba2:	80 2d       	mov	r24, r0
    1ba4:	bf 01       	movw	r22, r30
    1ba6:	ff 27       	eor	r31, r31
    1ba8:	93 58       	subi	r25, 0x83	; 131
    1baa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bac:	2a f0       	brmi	.+10     	; 0x1bb8 <__divsf3_pse+0x6c>
    1bae:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	68 f0       	brcs	.+26     	; 0x1bce <__divsf3_pse+0x82>
    1bb4:	b6 c0       	rjmp	.+364    	; 0x1d22 <__fp_inf>
    1bb6:	00 c1       	rjmp	.+512    	; 0x1db8 <__fp_szero>
    1bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bba:	ec f3       	brlt	.-6      	; 0x1bb6 <__divsf3_pse+0x6a>
    1bbc:	98 3e       	cpi	r25, 0xE8	; 232
    1bbe:	dc f3       	brlt	.-10     	; 0x1bb6 <__divsf3_pse+0x6a>
    1bc0:	86 95       	lsr	r24
    1bc2:	77 95       	ror	r23
    1bc4:	67 95       	ror	r22
    1bc6:	b7 95       	ror	r27
    1bc8:	f7 95       	ror	r31
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
    1bcc:	c9 f7       	brne	.-14     	; 0x1bc0 <__divsf3_pse+0x74>
    1bce:	88 0f       	add	r24, r24
    1bd0:	91 1d       	adc	r25, r1
    1bd2:	96 95       	lsr	r25
    1bd4:	87 95       	ror	r24
    1bd6:	97 f9       	bld	r25, 7
    1bd8:	08 95       	ret
    1bda:	e1 e0       	ldi	r30, 0x01	; 1
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	bb 1f       	adc	r27, r27
    1be4:	62 17       	cp	r22, r18
    1be6:	73 07       	cpc	r23, r19
    1be8:	84 07       	cpc	r24, r20
    1bea:	ba 07       	cpc	r27, r26
    1bec:	20 f0       	brcs	.+8      	; 0x1bf6 <__divsf3_pse+0xaa>
    1bee:	62 1b       	sub	r22, r18
    1bf0:	73 0b       	sbc	r23, r19
    1bf2:	84 0b       	sbc	r24, r20
    1bf4:	ba 0b       	sbc	r27, r26
    1bf6:	ee 1f       	adc	r30, r30
    1bf8:	88 f7       	brcc	.-30     	; 0x1bdc <__divsf3_pse+0x90>
    1bfa:	e0 95       	com	r30
    1bfc:	08 95       	ret

00001bfe <__fixsfsi>:
    1bfe:	04 d0       	rcall	.+8      	; 0x1c08 <__fixunssfsi>
    1c00:	68 94       	set
    1c02:	b1 11       	cpse	r27, r1
    1c04:	d9 c0       	rjmp	.+434    	; 0x1db8 <__fp_szero>
    1c06:	08 95       	ret

00001c08 <__fixunssfsi>:
    1c08:	bc d0       	rcall	.+376    	; 0x1d82 <__fp_splitA>
    1c0a:	88 f0       	brcs	.+34     	; 0x1c2e <__fixunssfsi+0x26>
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	90 f0       	brcs	.+36     	; 0x1c34 <__fixunssfsi+0x2c>
    1c10:	b9 2f       	mov	r27, r25
    1c12:	99 27       	eor	r25, r25
    1c14:	b7 51       	subi	r27, 0x17	; 23
    1c16:	a0 f0       	brcs	.+40     	; 0x1c40 <__fixunssfsi+0x38>
    1c18:	d1 f0       	breq	.+52     	; 0x1c4e <__fixunssfsi+0x46>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	1a f0       	brmi	.+6      	; 0x1c2a <__fixunssfsi+0x22>
    1c24:	ba 95       	dec	r27
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__fixunssfsi+0x12>
    1c28:	12 c0       	rjmp	.+36     	; 0x1c4e <__fixunssfsi+0x46>
    1c2a:	b1 30       	cpi	r27, 0x01	; 1
    1c2c:	81 f0       	breq	.+32     	; 0x1c4e <__fixunssfsi+0x46>
    1c2e:	c3 d0       	rcall	.+390    	; 0x1db6 <__fp_zero>
    1c30:	b1 e0       	ldi	r27, 0x01	; 1
    1c32:	08 95       	ret
    1c34:	c0 c0       	rjmp	.+384    	; 0x1db6 <__fp_zero>
    1c36:	67 2f       	mov	r22, r23
    1c38:	78 2f       	mov	r23, r24
    1c3a:	88 27       	eor	r24, r24
    1c3c:	b8 5f       	subi	r27, 0xF8	; 248
    1c3e:	39 f0       	breq	.+14     	; 0x1c4e <__fixunssfsi+0x46>
    1c40:	b9 3f       	cpi	r27, 0xF9	; 249
    1c42:	cc f3       	brlt	.-14     	; 0x1c36 <__fixunssfsi+0x2e>
    1c44:	86 95       	lsr	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b3 95       	inc	r27
    1c4c:	d9 f7       	brne	.-10     	; 0x1c44 <__fixunssfsi+0x3c>
    1c4e:	3e f4       	brtc	.+14     	; 0x1c5e <__fixunssfsi+0x56>
    1c50:	90 95       	com	r25
    1c52:	80 95       	com	r24
    1c54:	70 95       	com	r23
    1c56:	61 95       	neg	r22
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	08 95       	ret

00001c60 <__floatunsisf>:
    1c60:	e8 94       	clt
    1c62:	09 c0       	rjmp	.+18     	; 0x1c76 <__floatsisf+0x12>

00001c64 <__floatsisf>:
    1c64:	97 fb       	bst	r25, 7
    1c66:	3e f4       	brtc	.+14     	; 0x1c76 <__floatsisf+0x12>
    1c68:	90 95       	com	r25
    1c6a:	80 95       	com	r24
    1c6c:	70 95       	com	r23
    1c6e:	61 95       	neg	r22
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	99 23       	and	r25, r25
    1c78:	a9 f0       	breq	.+42     	; 0x1ca4 <__floatsisf+0x40>
    1c7a:	f9 2f       	mov	r31, r25
    1c7c:	96 e9       	ldi	r25, 0x96	; 150
    1c7e:	bb 27       	eor	r27, r27
    1c80:	93 95       	inc	r25
    1c82:	f6 95       	lsr	r31
    1c84:	87 95       	ror	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	b7 95       	ror	r27
    1c8c:	f1 11       	cpse	r31, r1
    1c8e:	f8 cf       	rjmp	.-16     	; 0x1c80 <__floatsisf+0x1c>
    1c90:	fa f4       	brpl	.+62     	; 0x1cd0 <__floatsisf+0x6c>
    1c92:	bb 0f       	add	r27, r27
    1c94:	11 f4       	brne	.+4      	; 0x1c9a <__floatsisf+0x36>
    1c96:	60 ff       	sbrs	r22, 0
    1c98:	1b c0       	rjmp	.+54     	; 0x1cd0 <__floatsisf+0x6c>
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	16 c0       	rjmp	.+44     	; 0x1cd0 <__floatsisf+0x6c>
    1ca4:	88 23       	and	r24, r24
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <__floatsisf+0x48>
    1ca8:	96 e9       	ldi	r25, 0x96	; 150
    1caa:	11 c0       	rjmp	.+34     	; 0x1cce <__floatsisf+0x6a>
    1cac:	77 23       	and	r23, r23
    1cae:	21 f0       	breq	.+8      	; 0x1cb8 <__floatsisf+0x54>
    1cb0:	9e e8       	ldi	r25, 0x8E	; 142
    1cb2:	87 2f       	mov	r24, r23
    1cb4:	76 2f       	mov	r23, r22
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <__floatsisf+0x5e>
    1cb8:	66 23       	and	r22, r22
    1cba:	71 f0       	breq	.+28     	; 0x1cd8 <__floatsisf+0x74>
    1cbc:	96 e8       	ldi	r25, 0x86	; 134
    1cbe:	86 2f       	mov	r24, r22
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	2a f0       	brmi	.+10     	; 0x1cd0 <__floatsisf+0x6c>
    1cc6:	9a 95       	dec	r25
    1cc8:	66 0f       	add	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	da f7       	brpl	.-10     	; 0x1cc6 <__floatsisf+0x62>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret

00001cda <__fp_cmp>:
    1cda:	99 0f       	add	r25, r25
    1cdc:	00 08       	sbc	r0, r0
    1cde:	55 0f       	add	r21, r21
    1ce0:	aa 0b       	sbc	r26, r26
    1ce2:	e0 e8       	ldi	r30, 0x80	; 128
    1ce4:	fe ef       	ldi	r31, 0xFE	; 254
    1ce6:	16 16       	cp	r1, r22
    1ce8:	17 06       	cpc	r1, r23
    1cea:	e8 07       	cpc	r30, r24
    1cec:	f9 07       	cpc	r31, r25
    1cee:	c0 f0       	brcs	.+48     	; 0x1d20 <__fp_cmp+0x46>
    1cf0:	12 16       	cp	r1, r18
    1cf2:	13 06       	cpc	r1, r19
    1cf4:	e4 07       	cpc	r30, r20
    1cf6:	f5 07       	cpc	r31, r21
    1cf8:	98 f0       	brcs	.+38     	; 0x1d20 <__fp_cmp+0x46>
    1cfa:	62 1b       	sub	r22, r18
    1cfc:	73 0b       	sbc	r23, r19
    1cfe:	84 0b       	sbc	r24, r20
    1d00:	95 0b       	sbc	r25, r21
    1d02:	39 f4       	brne	.+14     	; 0x1d12 <__fp_cmp+0x38>
    1d04:	0a 26       	eor	r0, r26
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <__fp_cmp+0x46>
    1d08:	23 2b       	or	r18, r19
    1d0a:	24 2b       	or	r18, r20
    1d0c:	25 2b       	or	r18, r21
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <__fp_cmp+0x3e>
    1d10:	08 95       	ret
    1d12:	0a 26       	eor	r0, r26
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <__fp_cmp+0x3e>
    1d16:	a1 40       	sbci	r26, 0x01	; 1
    1d18:	a6 95       	lsr	r26
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	81 1d       	adc	r24, r1
    1d1e:	81 1d       	adc	r24, r1
    1d20:	08 95       	ret

00001d22 <__fp_inf>:
    1d22:	97 f9       	bld	r25, 7
    1d24:	9f 67       	ori	r25, 0x7F	; 127
    1d26:	80 e8       	ldi	r24, 0x80	; 128
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	08 95       	ret

00001d2e <__fp_nan>:
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	80 ec       	ldi	r24, 0xC0	; 192
    1d32:	08 95       	ret

00001d34 <__fp_pscA>:
    1d34:	00 24       	eor	r0, r0
    1d36:	0a 94       	dec	r0
    1d38:	16 16       	cp	r1, r22
    1d3a:	17 06       	cpc	r1, r23
    1d3c:	18 06       	cpc	r1, r24
    1d3e:	09 06       	cpc	r0, r25
    1d40:	08 95       	ret

00001d42 <__fp_pscB>:
    1d42:	00 24       	eor	r0, r0
    1d44:	0a 94       	dec	r0
    1d46:	12 16       	cp	r1, r18
    1d48:	13 06       	cpc	r1, r19
    1d4a:	14 06       	cpc	r1, r20
    1d4c:	05 06       	cpc	r0, r21
    1d4e:	08 95       	ret

00001d50 <__fp_round>:
    1d50:	09 2e       	mov	r0, r25
    1d52:	03 94       	inc	r0
    1d54:	00 0c       	add	r0, r0
    1d56:	11 f4       	brne	.+4      	; 0x1d5c <__fp_round+0xc>
    1d58:	88 23       	and	r24, r24
    1d5a:	52 f0       	brmi	.+20     	; 0x1d70 <__fp_round+0x20>
    1d5c:	bb 0f       	add	r27, r27
    1d5e:	40 f4       	brcc	.+16     	; 0x1d70 <__fp_round+0x20>
    1d60:	bf 2b       	or	r27, r31
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <__fp_round+0x18>
    1d64:	60 ff       	sbrs	r22, 0
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <__fp_round+0x20>
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	08 95       	ret

00001d72 <__fp_split3>:
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	90 58       	subi	r25, 0x80	; 128
    1d76:	44 0f       	add	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <__fp_splitA+0x10>
    1d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <__fp_splitA+0x1a>
    1d80:	47 95       	ror	r20

00001d82 <__fp_splitA>:
    1d82:	88 0f       	add	r24, r24
    1d84:	97 fb       	bst	r25, 7
    1d86:	99 1f       	adc	r25, r25
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <__fp_splitA+0x20>
    1d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <__fp_splitA+0x2a>
    1d8e:	87 95       	ror	r24
    1d90:	08 95       	ret
    1d92:	12 16       	cp	r1, r18
    1d94:	13 06       	cpc	r1, r19
    1d96:	14 06       	cpc	r1, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	f2 cf       	rjmp	.-28     	; 0x1d80 <__fp_split3+0xe>
    1d9c:	46 95       	lsr	r20
    1d9e:	f1 df       	rcall	.-30     	; 0x1d82 <__fp_splitA>
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <__fp_splitA+0x30>
    1da2:	16 16       	cp	r1, r22
    1da4:	17 06       	cpc	r1, r23
    1da6:	18 06       	cpc	r1, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	f1 cf       	rjmp	.-30     	; 0x1d8e <__fp_splitA+0xc>
    1dac:	86 95       	lsr	r24
    1dae:	71 05       	cpc	r23, r1
    1db0:	61 05       	cpc	r22, r1
    1db2:	08 94       	sec
    1db4:	08 95       	ret

00001db6 <__fp_zero>:
    1db6:	e8 94       	clt

00001db8 <__fp_szero>:
    1db8:	bb 27       	eor	r27, r27
    1dba:	66 27       	eor	r22, r22
    1dbc:	77 27       	eor	r23, r23
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	08 95       	ret

00001dc4 <__gesf2>:
    1dc4:	8a df       	rcall	.-236    	; 0x1cda <__fp_cmp>
    1dc6:	08 f4       	brcc	.+2      	; 0x1dca <__gesf2+0x6>
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	08 95       	ret

00001dcc <__mulsf3>:
    1dcc:	0b d0       	rcall	.+22     	; 0x1de4 <__mulsf3x>
    1dce:	c0 cf       	rjmp	.-128    	; 0x1d50 <__fp_round>
    1dd0:	b1 df       	rcall	.-158    	; 0x1d34 <__fp_pscA>
    1dd2:	28 f0       	brcs	.+10     	; 0x1dde <__mulsf3+0x12>
    1dd4:	b6 df       	rcall	.-148    	; 0x1d42 <__fp_pscB>
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <__mulsf3+0x12>
    1dd8:	95 23       	and	r25, r21
    1dda:	09 f0       	breq	.+2      	; 0x1dde <__mulsf3+0x12>
    1ddc:	a2 cf       	rjmp	.-188    	; 0x1d22 <__fp_inf>
    1dde:	a7 cf       	rjmp	.-178    	; 0x1d2e <__fp_nan>
    1de0:	11 24       	eor	r1, r1
    1de2:	ea cf       	rjmp	.-44     	; 0x1db8 <__fp_szero>

00001de4 <__mulsf3x>:
    1de4:	c6 df       	rcall	.-116    	; 0x1d72 <__fp_split3>
    1de6:	a0 f3       	brcs	.-24     	; 0x1dd0 <__mulsf3+0x4>

00001de8 <__mulsf3_pse>:
    1de8:	95 9f       	mul	r25, r21
    1dea:	d1 f3       	breq	.-12     	; 0x1de0 <__mulsf3+0x14>
    1dec:	95 0f       	add	r25, r21
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	55 1f       	adc	r21, r21
    1df2:	62 9f       	mul	r22, r18
    1df4:	f0 01       	movw	r30, r0
    1df6:	72 9f       	mul	r23, r18
    1df8:	bb 27       	eor	r27, r27
    1dfa:	f0 0d       	add	r31, r0
    1dfc:	b1 1d       	adc	r27, r1
    1dfe:	63 9f       	mul	r22, r19
    1e00:	aa 27       	eor	r26, r26
    1e02:	f0 0d       	add	r31, r0
    1e04:	b1 1d       	adc	r27, r1
    1e06:	aa 1f       	adc	r26, r26
    1e08:	64 9f       	mul	r22, r20
    1e0a:	66 27       	eor	r22, r22
    1e0c:	b0 0d       	add	r27, r0
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	66 1f       	adc	r22, r22
    1e12:	82 9f       	mul	r24, r18
    1e14:	22 27       	eor	r18, r18
    1e16:	b0 0d       	add	r27, r0
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	62 1f       	adc	r22, r18
    1e1c:	73 9f       	mul	r23, r19
    1e1e:	b0 0d       	add	r27, r0
    1e20:	a1 1d       	adc	r26, r1
    1e22:	62 1f       	adc	r22, r18
    1e24:	83 9f       	mul	r24, r19
    1e26:	a0 0d       	add	r26, r0
    1e28:	61 1d       	adc	r22, r1
    1e2a:	22 1f       	adc	r18, r18
    1e2c:	74 9f       	mul	r23, r20
    1e2e:	33 27       	eor	r19, r19
    1e30:	a0 0d       	add	r26, r0
    1e32:	61 1d       	adc	r22, r1
    1e34:	23 1f       	adc	r18, r19
    1e36:	84 9f       	mul	r24, r20
    1e38:	60 0d       	add	r22, r0
    1e3a:	21 1d       	adc	r18, r1
    1e3c:	82 2f       	mov	r24, r18
    1e3e:	76 2f       	mov	r23, r22
    1e40:	6a 2f       	mov	r22, r26
    1e42:	11 24       	eor	r1, r1
    1e44:	9f 57       	subi	r25, 0x7F	; 127
    1e46:	50 40       	sbci	r21, 0x00	; 0
    1e48:	8a f0       	brmi	.+34     	; 0x1e6c <__mulsf3_pse+0x84>
    1e4a:	e1 f0       	breq	.+56     	; 0x1e84 <__mulsf3_pse+0x9c>
    1e4c:	88 23       	and	r24, r24
    1e4e:	4a f0       	brmi	.+18     	; 0x1e62 <__mulsf3_pse+0x7a>
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	bb 1f       	adc	r27, r27
    1e56:	66 1f       	adc	r22, r22
    1e58:	77 1f       	adc	r23, r23
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	91 50       	subi	r25, 0x01	; 1
    1e5e:	50 40       	sbci	r21, 0x00	; 0
    1e60:	a9 f7       	brne	.-22     	; 0x1e4c <__mulsf3_pse+0x64>
    1e62:	9e 3f       	cpi	r25, 0xFE	; 254
    1e64:	51 05       	cpc	r21, r1
    1e66:	70 f0       	brcs	.+28     	; 0x1e84 <__mulsf3_pse+0x9c>
    1e68:	5c cf       	rjmp	.-328    	; 0x1d22 <__fp_inf>
    1e6a:	a6 cf       	rjmp	.-180    	; 0x1db8 <__fp_szero>
    1e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6e:	ec f3       	brlt	.-6      	; 0x1e6a <__mulsf3_pse+0x82>
    1e70:	98 3e       	cpi	r25, 0xE8	; 232
    1e72:	dc f3       	brlt	.-10     	; 0x1e6a <__mulsf3_pse+0x82>
    1e74:	86 95       	lsr	r24
    1e76:	77 95       	ror	r23
    1e78:	67 95       	ror	r22
    1e7a:	b7 95       	ror	r27
    1e7c:	f7 95       	ror	r31
    1e7e:	e7 95       	ror	r30
    1e80:	9f 5f       	subi	r25, 0xFF	; 255
    1e82:	c1 f7       	brne	.-16     	; 0x1e74 <__mulsf3_pse+0x8c>
    1e84:	fe 2b       	or	r31, r30
    1e86:	88 0f       	add	r24, r24
    1e88:	91 1d       	adc	r25, r1
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret

00001e92 <atoi>:
    1e92:	fc 01       	movw	r30, r24
    1e94:	88 27       	eor	r24, r24
    1e96:	99 27       	eor	r25, r25
    1e98:	e8 94       	clt
    1e9a:	21 91       	ld	r18, Z+
    1e9c:	20 32       	cpi	r18, 0x20	; 32
    1e9e:	e9 f3       	breq	.-6      	; 0x1e9a <atoi+0x8>
    1ea0:	29 30       	cpi	r18, 0x09	; 9
    1ea2:	10 f0       	brcs	.+4      	; 0x1ea8 <atoi+0x16>
    1ea4:	2e 30       	cpi	r18, 0x0E	; 14
    1ea6:	c8 f3       	brcs	.-14     	; 0x1e9a <atoi+0x8>
    1ea8:	2b 32       	cpi	r18, 0x2B	; 43
    1eaa:	39 f0       	breq	.+14     	; 0x1eba <atoi+0x28>
    1eac:	2d 32       	cpi	r18, 0x2D	; 45
    1eae:	31 f4       	brne	.+12     	; 0x1ebc <atoi+0x2a>
    1eb0:	68 94       	set
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <atoi+0x28>
    1eb4:	35 d0       	rcall	.+106    	; 0x1f20 <__mulhi_const_10>
    1eb6:	82 0f       	add	r24, r18
    1eb8:	91 1d       	adc	r25, r1
    1eba:	21 91       	ld	r18, Z+
    1ebc:	20 53       	subi	r18, 0x30	; 48
    1ebe:	2a 30       	cpi	r18, 0x0A	; 10
    1ec0:	c8 f3       	brcs	.-14     	; 0x1eb4 <atoi+0x22>
    1ec2:	1e f4       	brtc	.+6      	; 0x1eca <atoi+0x38>
    1ec4:	90 95       	com	r25
    1ec6:	81 95       	neg	r24
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	08 95       	ret

00001ecc <strtok>:
    1ecc:	4a ed       	ldi	r20, 0xDA	; 218
    1ece:	5a e0       	ldi	r21, 0x0A	; 10
    1ed0:	00 c0       	rjmp	.+0      	; 0x1ed2 <strtok_r>

00001ed2 <strtok_r>:
    1ed2:	fa 01       	movw	r30, r20
    1ed4:	a1 91       	ld	r26, Z+
    1ed6:	b0 81       	ld	r27, Z
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	19 f4       	brne	.+6      	; 0x1ee2 <strtok_r+0x10>
    1edc:	10 97       	sbiw	r26, 0x00	; 0
    1ede:	e1 f0       	breq	.+56     	; 0x1f18 <strtok_r+0x46>
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0d 90       	ld	r0, X+
    1ee8:	00 20       	and	r0, r0
    1eea:	11 f4       	brne	.+4      	; 0x1ef0 <strtok_r+0x1e>
    1eec:	c0 01       	movw	r24, r0
    1eee:	13 c0       	rjmp	.+38     	; 0x1f16 <strtok_r+0x44>
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	21 91       	ld	r18, Z+
    1ef4:	22 23       	and	r18, r18
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <strtok_r+0x2c>
    1ef8:	20 15       	cp	r18, r0
    1efa:	d9 f7       	brne	.-10     	; 0x1ef2 <strtok_r+0x20>
    1efc:	f3 cf       	rjmp	.-26     	; 0x1ee4 <strtok_r+0x12>
    1efe:	fb 01       	movw	r30, r22
    1f00:	21 91       	ld	r18, Z+
    1f02:	20 15       	cp	r18, r0
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <strtok_r+0x3a>
    1f06:	1e 92       	st	-X, r1
    1f08:	11 96       	adiw	r26, 0x01	; 1
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <strtok_r+0x46>
    1f0c:	22 23       	and	r18, r18
    1f0e:	c1 f7       	brne	.-16     	; 0x1f00 <strtok_r+0x2e>
    1f10:	0d 90       	ld	r0, X+
    1f12:	00 20       	and	r0, r0
    1f14:	a1 f7       	brne	.-24     	; 0x1efe <strtok_r+0x2c>
    1f16:	d0 01       	movw	r26, r0
    1f18:	fa 01       	movw	r30, r20
    1f1a:	a1 93       	st	Z+, r26
    1f1c:	b0 83       	st	Z, r27
    1f1e:	08 95       	ret

00001f20 <__mulhi_const_10>:
    1f20:	7a e0       	ldi	r23, 0x0A	; 10
    1f22:	97 9f       	mul	r25, r23
    1f24:	90 2d       	mov	r25, r0
    1f26:	87 9f       	mul	r24, r23
    1f28:	80 2d       	mov	r24, r0
    1f2a:	91 0d       	add	r25, r1
    1f2c:	11 24       	eor	r1, r1
    1f2e:	08 95       	ret

00001f30 <fdevopen>:
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	31 f4       	brne	.+12     	; 0x1f48 <fdevopen+0x18>
    1f3c:	61 15       	cp	r22, r1
    1f3e:	71 05       	cpc	r23, r1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <fdevopen+0x18>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	39 c0       	rjmp	.+114    	; 0x1fba <fdevopen+0x8a>
    1f48:	8b 01       	movw	r16, r22
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	6e e0       	ldi	r22, 0x0E	; 14
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a6 d2       	rcall	.+1356   	; 0x24a2 <calloc>
    1f56:	fc 01       	movw	r30, r24
    1f58:	89 2b       	or	r24, r25
    1f5a:	99 f3       	breq	.-26     	; 0x1f42 <fdevopen+0x12>
    1f5c:	80 e8       	ldi	r24, 0x80	; 128
    1f5e:	83 83       	std	Z+3, r24	; 0x03
    1f60:	01 15       	cp	r16, r1
    1f62:	11 05       	cpc	r17, r1
    1f64:	71 f0       	breq	.+28     	; 0x1f82 <fdevopen+0x52>
    1f66:	13 87       	std	Z+11, r17	; 0x0b
    1f68:	02 87       	std	Z+10, r16	; 0x0a
    1f6a:	81 e8       	ldi	r24, 0x81	; 129
    1f6c:	83 83       	std	Z+3, r24	; 0x03
    1f6e:	80 91 f6 0b 	lds	r24, 0x0BF6	; 0x800bf6 <__iob>
    1f72:	90 91 f7 0b 	lds	r25, 0x0BF7	; 0x800bf7 <__iob+0x1>
    1f76:	89 2b       	or	r24, r25
    1f78:	21 f4       	brne	.+8      	; 0x1f82 <fdevopen+0x52>
    1f7a:	f0 93 f7 0b 	sts	0x0BF7, r31	; 0x800bf7 <__iob+0x1>
    1f7e:	e0 93 f6 0b 	sts	0x0BF6, r30	; 0x800bf6 <__iob>
    1f82:	20 97       	sbiw	r28, 0x00	; 0
    1f84:	c9 f0       	breq	.+50     	; 0x1fb8 <fdevopen+0x88>
    1f86:	d1 87       	std	Z+9, r29	; 0x09
    1f88:	c0 87       	std	Z+8, r28	; 0x08
    1f8a:	83 81       	ldd	r24, Z+3	; 0x03
    1f8c:	82 60       	ori	r24, 0x02	; 2
    1f8e:	83 83       	std	Z+3, r24	; 0x03
    1f90:	80 91 f8 0b 	lds	r24, 0x0BF8	; 0x800bf8 <__iob+0x2>
    1f94:	90 91 f9 0b 	lds	r25, 0x0BF9	; 0x800bf9 <__iob+0x3>
    1f98:	89 2b       	or	r24, r25
    1f9a:	71 f4       	brne	.+28     	; 0x1fb8 <fdevopen+0x88>
    1f9c:	f0 93 f9 0b 	sts	0x0BF9, r31	; 0x800bf9 <__iob+0x3>
    1fa0:	e0 93 f8 0b 	sts	0x0BF8, r30	; 0x800bf8 <__iob+0x2>
    1fa4:	80 91 fa 0b 	lds	r24, 0x0BFA	; 0x800bfa <__iob+0x4>
    1fa8:	90 91 fb 0b 	lds	r25, 0x0BFB	; 0x800bfb <__iob+0x5>
    1fac:	89 2b       	or	r24, r25
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <fdevopen+0x88>
    1fb0:	f0 93 fb 0b 	sts	0x0BFB, r31	; 0x800bfb <__iob+0x5>
    1fb4:	e0 93 fa 0b 	sts	0x0BFA, r30	; 0x800bfa <__iob+0x4>
    1fb8:	cf 01       	movw	r24, r30
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <fgetc>:
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	20 ff       	sbrs	r18, 0
    1fce:	33 c0       	rjmp	.+102    	; 0x2036 <fgetc+0x72>
    1fd0:	26 ff       	sbrs	r18, 6
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <fgetc+0x24>
    1fd4:	2f 7b       	andi	r18, 0xBF	; 191
    1fd6:	2b 83       	std	Y+3, r18	; 0x03
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	9f 83       	std	Y+7, r25	; 0x07
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	29 c0       	rjmp	.+82     	; 0x203a <fgetc+0x76>
    1fe8:	22 ff       	sbrs	r18, 2
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <fgetc+0x46>
    1fec:	e8 81       	ld	r30, Y
    1fee:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff0:	80 81       	ld	r24, Z
    1ff2:	08 2e       	mov	r0, r24
    1ff4:	00 0c       	add	r0, r0
    1ff6:	99 0b       	sbc	r25, r25
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <fgetc+0x3e>
    1ffc:	20 62       	ori	r18, 0x20	; 32
    1ffe:	2b 83       	std	Y+3, r18	; 0x03
    2000:	1a c0       	rjmp	.+52     	; 0x2036 <fgetc+0x72>
    2002:	31 96       	adiw	r30, 0x01	; 1
    2004:	f9 83       	std	Y+1, r31	; 0x01
    2006:	e8 83       	st	Y, r30
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <fgetc+0x62>
    200a:	ea 85       	ldd	r30, Y+10	; 0x0a
    200c:	fb 85       	ldd	r31, Y+11	; 0x0b
    200e:	19 95       	eicall
    2010:	97 ff       	sbrs	r25, 7
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <fgetc+0x62>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	11 f0       	breq	.+4      	; 0x201e <fgetc+0x5a>
    201a:	80 e2       	ldi	r24, 0x20	; 32
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <fgetc+0x5c>
    201e:	80 e1       	ldi	r24, 0x10	; 16
    2020:	82 2b       	or	r24, r18
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	08 c0       	rjmp	.+16     	; 0x2036 <fgetc+0x72>
    2026:	2e 81       	ldd	r18, Y+6	; 0x06
    2028:	3f 81       	ldd	r19, Y+7	; 0x07
    202a:	2f 5f       	subi	r18, 0xFF	; 255
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	3f 83       	std	Y+7, r19	; 0x07
    2030:	2e 83       	std	Y+6, r18	; 0x06
    2032:	99 27       	eor	r25, r25
    2034:	02 c0       	rjmp	.+4      	; 0x203a <fgetc+0x76>
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <printf>:
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	ae 01       	movw	r20, r28
    204a:	4a 5f       	subi	r20, 0xFA	; 250
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	fa 01       	movw	r30, r20
    2050:	61 91       	ld	r22, Z+
    2052:	71 91       	ld	r23, Z+
    2054:	af 01       	movw	r20, r30
    2056:	80 91 f8 0b 	lds	r24, 0x0BF8	; 0x800bf8 <__iob+0x2>
    205a:	90 91 f9 0b 	lds	r25, 0x0BF9	; 0x800bf9 <__iob+0x3>
    205e:	33 d0       	rcall	.+102    	; 0x20c6 <vfprintf>
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <puts>:
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	e0 91 f8 0b 	lds	r30, 0x0BF8	; 0x800bf8 <__iob+0x2>
    2072:	f0 91 f9 0b 	lds	r31, 0x0BF9	; 0x800bf9 <__iob+0x3>
    2076:	23 81       	ldd	r18, Z+3	; 0x03
    2078:	21 ff       	sbrs	r18, 1
    207a:	1b c0       	rjmp	.+54     	; 0x20b2 <puts+0x4c>
    207c:	8c 01       	movw	r16, r24
    207e:	d0 e0       	ldi	r29, 0x00	; 0
    2080:	c0 e0       	ldi	r28, 0x00	; 0
    2082:	f8 01       	movw	r30, r16
    2084:	81 91       	ld	r24, Z+
    2086:	8f 01       	movw	r16, r30
    2088:	60 91 f8 0b 	lds	r22, 0x0BF8	; 0x800bf8 <__iob+0x2>
    208c:	70 91 f9 0b 	lds	r23, 0x0BF9	; 0x800bf9 <__iob+0x3>
    2090:	db 01       	movw	r26, r22
    2092:	18 96       	adiw	r26, 0x08	; 8
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	19 97       	sbiw	r26, 0x09	; 9
    209a:	88 23       	and	r24, r24
    209c:	31 f0       	breq	.+12     	; 0x20aa <puts+0x44>
    209e:	19 95       	eicall
    20a0:	89 2b       	or	r24, r25
    20a2:	79 f3       	breq	.-34     	; 0x2082 <puts+0x1c>
    20a4:	df ef       	ldi	r29, 0xFF	; 255
    20a6:	cf ef       	ldi	r28, 0xFF	; 255
    20a8:	ec cf       	rjmp	.-40     	; 0x2082 <puts+0x1c>
    20aa:	8a e0       	ldi	r24, 0x0A	; 10
    20ac:	19 95       	eicall
    20ae:	89 2b       	or	r24, r25
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <puts+0x52>
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	9f ef       	ldi	r25, 0xFF	; 255
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <puts+0x56>
    20b8:	8d 2f       	mov	r24, r29
    20ba:	9c 2f       	mov	r25, r28
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	08 95       	ret

000020c6 <vfprintf>:
    20c6:	2f 92       	push	r2
    20c8:	3f 92       	push	r3
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	2c 97       	sbiw	r28, 0x0c	; 12
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	7c 01       	movw	r14, r24
    20fc:	6b 01       	movw	r12, r22
    20fe:	8a 01       	movw	r16, r20
    2100:	fc 01       	movw	r30, r24
    2102:	17 82       	std	Z+7, r1	; 0x07
    2104:	16 82       	std	Z+6, r1	; 0x06
    2106:	83 81       	ldd	r24, Z+3	; 0x03
    2108:	81 ff       	sbrs	r24, 1
    210a:	b0 c1       	rjmp	.+864    	; 0x246c <__stack+0x26d>
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	4c 01       	movw	r8, r24
    2112:	f7 01       	movw	r30, r14
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	f6 01       	movw	r30, r12
    2118:	93 fd       	sbrc	r25, 3
    211a:	85 91       	lpm	r24, Z+
    211c:	93 ff       	sbrs	r25, 3
    211e:	81 91       	ld	r24, Z+
    2120:	6f 01       	movw	r12, r30
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <vfprintf+0x62>
    2126:	9e c1       	rjmp	.+828    	; 0x2464 <__stack+0x265>
    2128:	85 32       	cpi	r24, 0x25	; 37
    212a:	39 f4       	brne	.+14     	; 0x213a <vfprintf+0x74>
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	6f 01       	movw	r12, r30
    2136:	85 32       	cpi	r24, 0x25	; 37
    2138:	21 f4       	brne	.+8      	; 0x2142 <vfprintf+0x7c>
    213a:	b7 01       	movw	r22, r14
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	15 d3       	rcall	.+1578   	; 0x276a <fputc>
    2140:	e8 cf       	rjmp	.-48     	; 0x2112 <vfprintf+0x4c>
    2142:	51 2c       	mov	r5, r1
    2144:	31 2c       	mov	r3, r1
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	20 32       	cpi	r18, 0x20	; 32
    214a:	a0 f4       	brcc	.+40     	; 0x2174 <vfprintf+0xae>
    214c:	8b 32       	cpi	r24, 0x2B	; 43
    214e:	69 f0       	breq	.+26     	; 0x216a <vfprintf+0xa4>
    2150:	30 f4       	brcc	.+12     	; 0x215e <vfprintf+0x98>
    2152:	80 32       	cpi	r24, 0x20	; 32
    2154:	59 f0       	breq	.+22     	; 0x216c <vfprintf+0xa6>
    2156:	83 32       	cpi	r24, 0x23	; 35
    2158:	69 f4       	brne	.+26     	; 0x2174 <vfprintf+0xae>
    215a:	20 61       	ori	r18, 0x10	; 16
    215c:	2c c0       	rjmp	.+88     	; 0x21b6 <vfprintf+0xf0>
    215e:	8d 32       	cpi	r24, 0x2D	; 45
    2160:	39 f0       	breq	.+14     	; 0x2170 <vfprintf+0xaa>
    2162:	80 33       	cpi	r24, 0x30	; 48
    2164:	39 f4       	brne	.+14     	; 0x2174 <vfprintf+0xae>
    2166:	21 60       	ori	r18, 0x01	; 1
    2168:	26 c0       	rjmp	.+76     	; 0x21b6 <vfprintf+0xf0>
    216a:	22 60       	ori	r18, 0x02	; 2
    216c:	24 60       	ori	r18, 0x04	; 4
    216e:	23 c0       	rjmp	.+70     	; 0x21b6 <vfprintf+0xf0>
    2170:	28 60       	ori	r18, 0x08	; 8
    2172:	21 c0       	rjmp	.+66     	; 0x21b6 <vfprintf+0xf0>
    2174:	27 fd       	sbrc	r18, 7
    2176:	27 c0       	rjmp	.+78     	; 0x21c6 <vfprintf+0x100>
    2178:	30 ed       	ldi	r19, 0xD0	; 208
    217a:	38 0f       	add	r19, r24
    217c:	3a 30       	cpi	r19, 0x0A	; 10
    217e:	78 f4       	brcc	.+30     	; 0x219e <vfprintf+0xd8>
    2180:	26 ff       	sbrs	r18, 6
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <vfprintf+0xca>
    2184:	fa e0       	ldi	r31, 0x0A	; 10
    2186:	5f 9e       	mul	r5, r31
    2188:	30 0d       	add	r19, r0
    218a:	11 24       	eor	r1, r1
    218c:	53 2e       	mov	r5, r19
    218e:	13 c0       	rjmp	.+38     	; 0x21b6 <vfprintf+0xf0>
    2190:	8a e0       	ldi	r24, 0x0A	; 10
    2192:	38 9e       	mul	r3, r24
    2194:	30 0d       	add	r19, r0
    2196:	11 24       	eor	r1, r1
    2198:	33 2e       	mov	r3, r19
    219a:	20 62       	ori	r18, 0x20	; 32
    219c:	0c c0       	rjmp	.+24     	; 0x21b6 <vfprintf+0xf0>
    219e:	8e 32       	cpi	r24, 0x2E	; 46
    21a0:	21 f4       	brne	.+8      	; 0x21aa <vfprintf+0xe4>
    21a2:	26 fd       	sbrc	r18, 6
    21a4:	5f c1       	rjmp	.+702    	; 0x2464 <__stack+0x265>
    21a6:	20 64       	ori	r18, 0x40	; 64
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <vfprintf+0xf0>
    21aa:	8c 36       	cpi	r24, 0x6C	; 108
    21ac:	11 f4       	brne	.+4      	; 0x21b2 <vfprintf+0xec>
    21ae:	20 68       	ori	r18, 0x80	; 128
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <vfprintf+0xf0>
    21b2:	88 36       	cpi	r24, 0x68	; 104
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <vfprintf+0x100>
    21b6:	f6 01       	movw	r30, r12
    21b8:	93 fd       	sbrc	r25, 3
    21ba:	85 91       	lpm	r24, Z+
    21bc:	93 ff       	sbrs	r25, 3
    21be:	81 91       	ld	r24, Z+
    21c0:	6f 01       	movw	r12, r30
    21c2:	81 11       	cpse	r24, r1
    21c4:	c1 cf       	rjmp	.-126    	; 0x2148 <vfprintf+0x82>
    21c6:	98 2f       	mov	r25, r24
    21c8:	9f 7d       	andi	r25, 0xDF	; 223
    21ca:	95 54       	subi	r25, 0x45	; 69
    21cc:	93 30       	cpi	r25, 0x03	; 3
    21ce:	28 f4       	brcc	.+10     	; 0x21da <vfprintf+0x114>
    21d0:	0c 5f       	subi	r16, 0xFC	; 252
    21d2:	1f 4f       	sbci	r17, 0xFF	; 255
    21d4:	ff e3       	ldi	r31, 0x3F	; 63
    21d6:	f9 83       	std	Y+1, r31	; 0x01
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <vfprintf+0x12e>
    21da:	83 36       	cpi	r24, 0x63	; 99
    21dc:	31 f0       	breq	.+12     	; 0x21ea <vfprintf+0x124>
    21de:	83 37       	cpi	r24, 0x73	; 115
    21e0:	71 f0       	breq	.+28     	; 0x21fe <vfprintf+0x138>
    21e2:	83 35       	cpi	r24, 0x53	; 83
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <vfprintf+0x122>
    21e6:	57 c0       	rjmp	.+174    	; 0x2296 <__stack+0x97>
    21e8:	21 c0       	rjmp	.+66     	; 0x222c <__stack+0x2d>
    21ea:	f8 01       	movw	r30, r16
    21ec:	80 81       	ld	r24, Z
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	0e 5f       	subi	r16, 0xFE	; 254
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	44 24       	eor	r4, r4
    21f6:	43 94       	inc	r4
    21f8:	51 2c       	mov	r5, r1
    21fa:	54 01       	movw	r10, r8
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <__stack+0x27>
    21fe:	38 01       	movw	r6, r16
    2200:	f2 e0       	ldi	r31, 0x02	; 2
    2202:	6f 0e       	add	r6, r31
    2204:	71 1c       	adc	r7, r1
    2206:	f8 01       	movw	r30, r16
    2208:	a0 80       	ld	r10, Z
    220a:	b1 80       	ldd	r11, Z+1	; 0x01
    220c:	26 ff       	sbrs	r18, 6
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <__stack+0x17>
    2210:	65 2d       	mov	r22, r5
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <__stack+0x1b>
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	7f ef       	ldi	r23, 0xFF	; 255
    221a:	c5 01       	movw	r24, r10
    221c:	2c 87       	std	Y+12, r18	; 0x0c
    221e:	9a d2       	rcall	.+1332   	; 0x2754 <strnlen>
    2220:	2c 01       	movw	r4, r24
    2222:	83 01       	movw	r16, r6
    2224:	2c 85       	ldd	r18, Y+12	; 0x0c
    2226:	2f 77       	andi	r18, 0x7F	; 127
    2228:	22 2e       	mov	r2, r18
    222a:	16 c0       	rjmp	.+44     	; 0x2258 <__stack+0x59>
    222c:	38 01       	movw	r6, r16
    222e:	f2 e0       	ldi	r31, 0x02	; 2
    2230:	6f 0e       	add	r6, r31
    2232:	71 1c       	adc	r7, r1
    2234:	f8 01       	movw	r30, r16
    2236:	a0 80       	ld	r10, Z
    2238:	b1 80       	ldd	r11, Z+1	; 0x01
    223a:	26 ff       	sbrs	r18, 6
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <__stack+0x45>
    223e:	65 2d       	mov	r22, r5
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <__stack+0x49>
    2244:	6f ef       	ldi	r22, 0xFF	; 255
    2246:	7f ef       	ldi	r23, 0xFF	; 255
    2248:	c5 01       	movw	r24, r10
    224a:	2c 87       	std	Y+12, r18	; 0x0c
    224c:	71 d2       	rcall	.+1250   	; 0x2730 <strnlen_P>
    224e:	2c 01       	movw	r4, r24
    2250:	2c 85       	ldd	r18, Y+12	; 0x0c
    2252:	20 68       	ori	r18, 0x80	; 128
    2254:	22 2e       	mov	r2, r18
    2256:	83 01       	movw	r16, r6
    2258:	23 fc       	sbrc	r2, 3
    225a:	19 c0       	rjmp	.+50     	; 0x228e <__stack+0x8f>
    225c:	83 2d       	mov	r24, r3
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	48 16       	cp	r4, r24
    2262:	59 06       	cpc	r5, r25
    2264:	a0 f4       	brcc	.+40     	; 0x228e <__stack+0x8f>
    2266:	b7 01       	movw	r22, r14
    2268:	80 e2       	ldi	r24, 0x20	; 32
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	7e d2       	rcall	.+1276   	; 0x276a <fputc>
    226e:	3a 94       	dec	r3
    2270:	f5 cf       	rjmp	.-22     	; 0x225c <__stack+0x5d>
    2272:	f5 01       	movw	r30, r10
    2274:	27 fc       	sbrc	r2, 7
    2276:	85 91       	lpm	r24, Z+
    2278:	27 fe       	sbrs	r2, 7
    227a:	81 91       	ld	r24, Z+
    227c:	5f 01       	movw	r10, r30
    227e:	b7 01       	movw	r22, r14
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	73 d2       	rcall	.+1254   	; 0x276a <fputc>
    2284:	31 10       	cpse	r3, r1
    2286:	3a 94       	dec	r3
    2288:	f1 e0       	ldi	r31, 0x01	; 1
    228a:	4f 1a       	sub	r4, r31
    228c:	51 08       	sbc	r5, r1
    228e:	41 14       	cp	r4, r1
    2290:	51 04       	cpc	r5, r1
    2292:	79 f7       	brne	.-34     	; 0x2272 <__stack+0x73>
    2294:	de c0       	rjmp	.+444    	; 0x2452 <__stack+0x253>
    2296:	84 36       	cpi	r24, 0x64	; 100
    2298:	11 f0       	breq	.+4      	; 0x229e <__stack+0x9f>
    229a:	89 36       	cpi	r24, 0x69	; 105
    229c:	31 f5       	brne	.+76     	; 0x22ea <__stack+0xeb>
    229e:	f8 01       	movw	r30, r16
    22a0:	27 ff       	sbrs	r18, 7
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <__stack+0xb3>
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	0c 5f       	subi	r16, 0xFC	; 252
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <__stack+0xc3>
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	07 2e       	mov	r0, r23
    22b8:	00 0c       	add	r0, r0
    22ba:	88 0b       	sbc	r24, r24
    22bc:	99 0b       	sbc	r25, r25
    22be:	0e 5f       	subi	r16, 0xFE	; 254
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
    22c2:	2f 76       	andi	r18, 0x6F	; 111
    22c4:	72 2e       	mov	r7, r18
    22c6:	97 ff       	sbrs	r25, 7
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <__stack+0xdd>
    22ca:	90 95       	com	r25
    22cc:	80 95       	com	r24
    22ce:	70 95       	com	r23
    22d0:	61 95       	neg	r22
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	8f 4f       	sbci	r24, 0xFF	; 255
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	20 68       	ori	r18, 0x80	; 128
    22da:	72 2e       	mov	r7, r18
    22dc:	2a e0       	ldi	r18, 0x0A	; 10
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	a4 01       	movw	r20, r8
    22e2:	7b d2       	rcall	.+1270   	; 0x27da <__ultoa_invert>
    22e4:	a8 2e       	mov	r10, r24
    22e6:	a8 18       	sub	r10, r8
    22e8:	43 c0       	rjmp	.+134    	; 0x2370 <__stack+0x171>
    22ea:	85 37       	cpi	r24, 0x75	; 117
    22ec:	29 f4       	brne	.+10     	; 0x22f8 <__stack+0xf9>
    22ee:	2f 7e       	andi	r18, 0xEF	; 239
    22f0:	b2 2e       	mov	r11, r18
    22f2:	2a e0       	ldi	r18, 0x0A	; 10
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	25 c0       	rjmp	.+74     	; 0x2342 <__stack+0x143>
    22f8:	f2 2f       	mov	r31, r18
    22fa:	f9 7f       	andi	r31, 0xF9	; 249
    22fc:	bf 2e       	mov	r11, r31
    22fe:	8f 36       	cpi	r24, 0x6F	; 111
    2300:	c1 f0       	breq	.+48     	; 0x2332 <__stack+0x133>
    2302:	18 f4       	brcc	.+6      	; 0x230a <__stack+0x10b>
    2304:	88 35       	cpi	r24, 0x58	; 88
    2306:	79 f0       	breq	.+30     	; 0x2326 <__stack+0x127>
    2308:	ad c0       	rjmp	.+346    	; 0x2464 <__stack+0x265>
    230a:	80 37       	cpi	r24, 0x70	; 112
    230c:	19 f0       	breq	.+6      	; 0x2314 <__stack+0x115>
    230e:	88 37       	cpi	r24, 0x78	; 120
    2310:	21 f0       	breq	.+8      	; 0x231a <__stack+0x11b>
    2312:	a8 c0       	rjmp	.+336    	; 0x2464 <__stack+0x265>
    2314:	2f 2f       	mov	r18, r31
    2316:	20 61       	ori	r18, 0x10	; 16
    2318:	b2 2e       	mov	r11, r18
    231a:	b4 fe       	sbrs	r11, 4
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <__stack+0x139>
    231e:	8b 2d       	mov	r24, r11
    2320:	84 60       	ori	r24, 0x04	; 4
    2322:	b8 2e       	mov	r11, r24
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <__stack+0x139>
    2326:	24 ff       	sbrs	r18, 4
    2328:	0a c0       	rjmp	.+20     	; 0x233e <__stack+0x13f>
    232a:	9f 2f       	mov	r25, r31
    232c:	96 60       	ori	r25, 0x06	; 6
    232e:	b9 2e       	mov	r11, r25
    2330:	06 c0       	rjmp	.+12     	; 0x233e <__stack+0x13f>
    2332:	28 e0       	ldi	r18, 0x08	; 8
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__stack+0x143>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <__stack+0x143>
    233e:	20 e1       	ldi	r18, 0x10	; 16
    2340:	32 e0       	ldi	r19, 0x02	; 2
    2342:	f8 01       	movw	r30, r16
    2344:	b7 fe       	sbrs	r11, 7
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <__stack+0x157>
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	0c 5f       	subi	r16, 0xFC	; 252
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <__stack+0x163>
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 5f       	subi	r16, 0xFE	; 254
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	a4 01       	movw	r20, r8
    2364:	3a d2       	rcall	.+1140   	; 0x27da <__ultoa_invert>
    2366:	a8 2e       	mov	r10, r24
    2368:	a8 18       	sub	r10, r8
    236a:	fb 2d       	mov	r31, r11
    236c:	ff 77       	andi	r31, 0x7F	; 127
    236e:	7f 2e       	mov	r7, r31
    2370:	76 fe       	sbrs	r7, 6
    2372:	0b c0       	rjmp	.+22     	; 0x238a <__stack+0x18b>
    2374:	37 2d       	mov	r19, r7
    2376:	3e 7f       	andi	r19, 0xFE	; 254
    2378:	a5 14       	cp	r10, r5
    237a:	50 f4       	brcc	.+20     	; 0x2390 <__stack+0x191>
    237c:	74 fe       	sbrs	r7, 4
    237e:	0a c0       	rjmp	.+20     	; 0x2394 <__stack+0x195>
    2380:	72 fc       	sbrc	r7, 2
    2382:	08 c0       	rjmp	.+16     	; 0x2394 <__stack+0x195>
    2384:	37 2d       	mov	r19, r7
    2386:	3e 7e       	andi	r19, 0xEE	; 238
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <__stack+0x195>
    238a:	ba 2c       	mov	r11, r10
    238c:	37 2d       	mov	r19, r7
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <__stack+0x197>
    2390:	ba 2c       	mov	r11, r10
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <__stack+0x197>
    2394:	b5 2c       	mov	r11, r5
    2396:	34 ff       	sbrs	r19, 4
    2398:	0d c0       	rjmp	.+26     	; 0x23b4 <__stack+0x1b5>
    239a:	fe 01       	movw	r30, r28
    239c:	ea 0d       	add	r30, r10
    239e:	f1 1d       	adc	r31, r1
    23a0:	80 81       	ld	r24, Z
    23a2:	80 33       	cpi	r24, 0x30	; 48
    23a4:	11 f4       	brne	.+4      	; 0x23aa <__stack+0x1ab>
    23a6:	39 7e       	andi	r19, 0xE9	; 233
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <__stack+0x1bd>
    23aa:	32 ff       	sbrs	r19, 2
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <__stack+0x1bb>
    23ae:	b3 94       	inc	r11
    23b0:	b3 94       	inc	r11
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <__stack+0x1bd>
    23b4:	83 2f       	mov	r24, r19
    23b6:	86 78       	andi	r24, 0x86	; 134
    23b8:	09 f0       	breq	.+2      	; 0x23bc <__stack+0x1bd>
    23ba:	b3 94       	inc	r11
    23bc:	33 fd       	sbrc	r19, 3
    23be:	12 c0       	rjmp	.+36     	; 0x23e4 <__stack+0x1e5>
    23c0:	30 ff       	sbrs	r19, 0
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <__stack+0x1d1>
    23c4:	5a 2c       	mov	r5, r10
    23c6:	b3 14       	cp	r11, r3
    23c8:	18 f4       	brcc	.+6      	; 0x23d0 <__stack+0x1d1>
    23ca:	53 0c       	add	r5, r3
    23cc:	5b 18       	sub	r5, r11
    23ce:	b3 2c       	mov	r11, r3
    23d0:	b3 14       	cp	r11, r3
    23d2:	60 f4       	brcc	.+24     	; 0x23ec <__stack+0x1ed>
    23d4:	b7 01       	movw	r22, r14
    23d6:	80 e2       	ldi	r24, 0x20	; 32
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	3c 87       	std	Y+12, r19	; 0x0c
    23dc:	c6 d1       	rcall	.+908    	; 0x276a <fputc>
    23de:	b3 94       	inc	r11
    23e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    23e2:	f6 cf       	rjmp	.-20     	; 0x23d0 <__stack+0x1d1>
    23e4:	b3 14       	cp	r11, r3
    23e6:	10 f4       	brcc	.+4      	; 0x23ec <__stack+0x1ed>
    23e8:	3b 18       	sub	r3, r11
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <__stack+0x1ef>
    23ec:	31 2c       	mov	r3, r1
    23ee:	34 ff       	sbrs	r19, 4
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <__stack+0x215>
    23f2:	b7 01       	movw	r22, r14
    23f4:	80 e3       	ldi	r24, 0x30	; 48
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	3c 87       	std	Y+12, r19	; 0x0c
    23fa:	b7 d1       	rcall	.+878    	; 0x276a <fputc>
    23fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    23fe:	32 ff       	sbrs	r19, 2
    2400:	16 c0       	rjmp	.+44     	; 0x242e <__stack+0x22f>
    2402:	31 fd       	sbrc	r19, 1
    2404:	03 c0       	rjmp	.+6      	; 0x240c <__stack+0x20d>
    2406:	88 e7       	ldi	r24, 0x78	; 120
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <__stack+0x211>
    240c:	88 e5       	ldi	r24, 0x58	; 88
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	b7 01       	movw	r22, r14
    2412:	0c c0       	rjmp	.+24     	; 0x242c <__stack+0x22d>
    2414:	83 2f       	mov	r24, r19
    2416:	86 78       	andi	r24, 0x86	; 134
    2418:	51 f0       	breq	.+20     	; 0x242e <__stack+0x22f>
    241a:	31 ff       	sbrs	r19, 1
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <__stack+0x223>
    241e:	8b e2       	ldi	r24, 0x2B	; 43
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <__stack+0x225>
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	37 fd       	sbrc	r19, 7
    2426:	8d e2       	ldi	r24, 0x2D	; 45
    2428:	b7 01       	movw	r22, r14
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9e d1       	rcall	.+828    	; 0x276a <fputc>
    242e:	a5 14       	cp	r10, r5
    2430:	30 f4       	brcc	.+12     	; 0x243e <__stack+0x23f>
    2432:	b7 01       	movw	r22, r14
    2434:	80 e3       	ldi	r24, 0x30	; 48
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	98 d1       	rcall	.+816    	; 0x276a <fputc>
    243a:	5a 94       	dec	r5
    243c:	f8 cf       	rjmp	.-16     	; 0x242e <__stack+0x22f>
    243e:	aa 94       	dec	r10
    2440:	f4 01       	movw	r30, r8
    2442:	ea 0d       	add	r30, r10
    2444:	f1 1d       	adc	r31, r1
    2446:	80 81       	ld	r24, Z
    2448:	b7 01       	movw	r22, r14
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	8e d1       	rcall	.+796    	; 0x276a <fputc>
    244e:	a1 10       	cpse	r10, r1
    2450:	f6 cf       	rjmp	.-20     	; 0x243e <__stack+0x23f>
    2452:	33 20       	and	r3, r3
    2454:	09 f4       	brne	.+2      	; 0x2458 <__stack+0x259>
    2456:	5d ce       	rjmp	.-838    	; 0x2112 <vfprintf+0x4c>
    2458:	b7 01       	movw	r22, r14
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	85 d1       	rcall	.+778    	; 0x276a <fputc>
    2460:	3a 94       	dec	r3
    2462:	f7 cf       	rjmp	.-18     	; 0x2452 <__stack+0x253>
    2464:	f7 01       	movw	r30, r14
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <__stack+0x271>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	2c 96       	adiw	r28, 0x0c	; 12
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	4f 90       	pop	r4
    249c:	3f 90       	pop	r3
    249e:	2f 90       	pop	r2
    24a0:	08 95       	ret

000024a2 <calloc>:
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	86 9f       	mul	r24, r22
    24ac:	80 01       	movw	r16, r0
    24ae:	87 9f       	mul	r24, r23
    24b0:	10 0d       	add	r17, r0
    24b2:	96 9f       	mul	r25, r22
    24b4:	10 0d       	add	r17, r0
    24b6:	11 24       	eor	r1, r1
    24b8:	c8 01       	movw	r24, r16
    24ba:	0d d0       	rcall	.+26     	; 0x24d6 <malloc>
    24bc:	ec 01       	movw	r28, r24
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	21 f0       	breq	.+8      	; 0x24ca <calloc+0x28>
    24c2:	a8 01       	movw	r20, r16
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	3e d1       	rcall	.+636    	; 0x2746 <memset>
    24ca:	ce 01       	movw	r24, r28
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	08 95       	ret

000024d6 <malloc>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	91 05       	cpc	r25, r1
    24de:	10 f4       	brcc	.+4      	; 0x24e4 <malloc+0xe>
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	e0 91 fe 0b 	lds	r30, 0x0BFE	; 0x800bfe <__flp>
    24e8:	f0 91 ff 0b 	lds	r31, 0x0BFF	; 0x800bff <__flp+0x1>
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	c0 e0       	ldi	r28, 0x00	; 0
    24f2:	d0 e0       	ldi	r29, 0x00	; 0
    24f4:	30 97       	sbiw	r30, 0x00	; 0
    24f6:	11 f1       	breq	.+68     	; 0x253c <malloc+0x66>
    24f8:	40 81       	ld	r20, Z
    24fa:	51 81       	ldd	r21, Z+1	; 0x01
    24fc:	48 17       	cp	r20, r24
    24fe:	59 07       	cpc	r21, r25
    2500:	c0 f0       	brcs	.+48     	; 0x2532 <malloc+0x5c>
    2502:	48 17       	cp	r20, r24
    2504:	59 07       	cpc	r21, r25
    2506:	61 f4       	brne	.+24     	; 0x2520 <malloc+0x4a>
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 97       	sbiw	r28, 0x00	; 0
    250e:	19 f0       	breq	.+6      	; 0x2516 <malloc+0x40>
    2510:	9b 83       	std	Y+3, r25	; 0x03
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	2b c0       	rjmp	.+86     	; 0x256c <malloc+0x96>
    2516:	90 93 ff 0b 	sts	0x0BFF, r25	; 0x800bff <__flp+0x1>
    251a:	80 93 fe 0b 	sts	0x0BFE, r24	; 0x800bfe <__flp>
    251e:	26 c0       	rjmp	.+76     	; 0x256c <malloc+0x96>
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	19 f0       	breq	.+6      	; 0x252c <malloc+0x56>
    2526:	42 17       	cp	r20, r18
    2528:	53 07       	cpc	r21, r19
    252a:	18 f4       	brcc	.+6      	; 0x2532 <malloc+0x5c>
    252c:	9a 01       	movw	r18, r20
    252e:	be 01       	movw	r22, r28
    2530:	df 01       	movw	r26, r30
    2532:	ef 01       	movw	r28, r30
    2534:	02 80       	ldd	r0, Z+2	; 0x02
    2536:	f3 81       	ldd	r31, Z+3	; 0x03
    2538:	e0 2d       	mov	r30, r0
    253a:	dc cf       	rjmp	.-72     	; 0x24f4 <malloc+0x1e>
    253c:	21 15       	cp	r18, r1
    253e:	31 05       	cpc	r19, r1
    2540:	09 f1       	breq	.+66     	; 0x2584 <malloc+0xae>
    2542:	28 1b       	sub	r18, r24
    2544:	39 0b       	sbc	r19, r25
    2546:	24 30       	cpi	r18, 0x04	; 4
    2548:	31 05       	cpc	r19, r1
    254a:	90 f4       	brcc	.+36     	; 0x2570 <malloc+0x9a>
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	8d 91       	ld	r24, X+
    2550:	9c 91       	ld	r25, X
    2552:	13 97       	sbiw	r26, 0x03	; 3
    2554:	61 15       	cp	r22, r1
    2556:	71 05       	cpc	r23, r1
    2558:	21 f0       	breq	.+8      	; 0x2562 <malloc+0x8c>
    255a:	fb 01       	movw	r30, r22
    255c:	93 83       	std	Z+3, r25	; 0x03
    255e:	82 83       	std	Z+2, r24	; 0x02
    2560:	04 c0       	rjmp	.+8      	; 0x256a <malloc+0x94>
    2562:	90 93 ff 0b 	sts	0x0BFF, r25	; 0x800bff <__flp+0x1>
    2566:	80 93 fe 0b 	sts	0x0BFE, r24	; 0x800bfe <__flp>
    256a:	fd 01       	movw	r30, r26
    256c:	32 96       	adiw	r30, 0x02	; 2
    256e:	44 c0       	rjmp	.+136    	; 0x25f8 <malloc+0x122>
    2570:	fd 01       	movw	r30, r26
    2572:	e2 0f       	add	r30, r18
    2574:	f3 1f       	adc	r31, r19
    2576:	81 93       	st	Z+, r24
    2578:	91 93       	st	Z+, r25
    257a:	22 50       	subi	r18, 0x02	; 2
    257c:	31 09       	sbc	r19, r1
    257e:	2d 93       	st	X+, r18
    2580:	3c 93       	st	X, r19
    2582:	3a c0       	rjmp	.+116    	; 0x25f8 <malloc+0x122>
    2584:	20 91 fc 0b 	lds	r18, 0x0BFC	; 0x800bfc <__brkval>
    2588:	30 91 fd 0b 	lds	r19, 0x0BFD	; 0x800bfd <__brkval+0x1>
    258c:	23 2b       	or	r18, r19
    258e:	41 f4       	brne	.+16     	; 0x25a0 <malloc+0xca>
    2590:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_start>
    2594:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_start+0x1>
    2598:	30 93 fd 0b 	sts	0x0BFD, r19	; 0x800bfd <__brkval+0x1>
    259c:	20 93 fc 0b 	sts	0x0BFC, r18	; 0x800bfc <__brkval>
    25a0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_end>
    25a4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_end+0x1>
    25a8:	21 15       	cp	r18, r1
    25aa:	31 05       	cpc	r19, r1
    25ac:	41 f4       	brne	.+16     	; 0x25be <malloc+0xe8>
    25ae:	2d b7       	in	r18, 0x3d	; 61
    25b0:	3e b7       	in	r19, 0x3e	; 62
    25b2:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__malloc_margin>
    25b6:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__malloc_margin+0x1>
    25ba:	24 1b       	sub	r18, r20
    25bc:	35 0b       	sbc	r19, r21
    25be:	e0 91 fc 0b 	lds	r30, 0x0BFC	; 0x800bfc <__brkval>
    25c2:	f0 91 fd 0b 	lds	r31, 0x0BFD	; 0x800bfd <__brkval+0x1>
    25c6:	e2 17       	cp	r30, r18
    25c8:	f3 07       	cpc	r31, r19
    25ca:	a0 f4       	brcc	.+40     	; 0x25f4 <malloc+0x11e>
    25cc:	2e 1b       	sub	r18, r30
    25ce:	3f 0b       	sbc	r19, r31
    25d0:	28 17       	cp	r18, r24
    25d2:	39 07       	cpc	r19, r25
    25d4:	78 f0       	brcs	.+30     	; 0x25f4 <malloc+0x11e>
    25d6:	ac 01       	movw	r20, r24
    25d8:	4e 5f       	subi	r20, 0xFE	; 254
    25da:	5f 4f       	sbci	r21, 0xFF	; 255
    25dc:	24 17       	cp	r18, r20
    25de:	35 07       	cpc	r19, r21
    25e0:	48 f0       	brcs	.+18     	; 0x25f4 <malloc+0x11e>
    25e2:	4e 0f       	add	r20, r30
    25e4:	5f 1f       	adc	r21, r31
    25e6:	50 93 fd 0b 	sts	0x0BFD, r21	; 0x800bfd <__brkval+0x1>
    25ea:	40 93 fc 0b 	sts	0x0BFC, r20	; 0x800bfc <__brkval>
    25ee:	81 93       	st	Z+, r24
    25f0:	91 93       	st	Z+, r25
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <malloc+0x122>
    25f4:	e0 e0       	ldi	r30, 0x00	; 0
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	cf 01       	movw	r24, r30
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <free>:
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	09 f4       	brne	.+2      	; 0x260e <free+0xe>
    260c:	8c c0       	rjmp	.+280    	; 0x2726 <free+0x126>
    260e:	fc 01       	movw	r30, r24
    2610:	32 97       	sbiw	r30, 0x02	; 2
    2612:	13 82       	std	Z+3, r1	; 0x03
    2614:	12 82       	std	Z+2, r1	; 0x02
    2616:	00 91 fe 0b 	lds	r16, 0x0BFE	; 0x800bfe <__flp>
    261a:	10 91 ff 0b 	lds	r17, 0x0BFF	; 0x800bff <__flp+0x1>
    261e:	01 15       	cp	r16, r1
    2620:	11 05       	cpc	r17, r1
    2622:	81 f4       	brne	.+32     	; 0x2644 <free+0x44>
    2624:	20 81       	ld	r18, Z
    2626:	31 81       	ldd	r19, Z+1	; 0x01
    2628:	82 0f       	add	r24, r18
    262a:	93 1f       	adc	r25, r19
    262c:	20 91 fc 0b 	lds	r18, 0x0BFC	; 0x800bfc <__brkval>
    2630:	30 91 fd 0b 	lds	r19, 0x0BFD	; 0x800bfd <__brkval+0x1>
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	79 f5       	brne	.+94     	; 0x2698 <free+0x98>
    263a:	f0 93 fd 0b 	sts	0x0BFD, r31	; 0x800bfd <__brkval+0x1>
    263e:	e0 93 fc 0b 	sts	0x0BFC, r30	; 0x800bfc <__brkval>
    2642:	71 c0       	rjmp	.+226    	; 0x2726 <free+0x126>
    2644:	d8 01       	movw	r26, r16
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	ae 17       	cp	r26, r30
    264c:	bf 07       	cpc	r27, r31
    264e:	50 f4       	brcc	.+20     	; 0x2664 <free+0x64>
    2650:	12 96       	adiw	r26, 0x02	; 2
    2652:	2d 91       	ld	r18, X+
    2654:	3c 91       	ld	r19, X
    2656:	13 97       	sbiw	r26, 0x03	; 3
    2658:	ad 01       	movw	r20, r26
    265a:	21 15       	cp	r18, r1
    265c:	31 05       	cpc	r19, r1
    265e:	09 f1       	breq	.+66     	; 0x26a2 <free+0xa2>
    2660:	d9 01       	movw	r26, r18
    2662:	f3 cf       	rjmp	.-26     	; 0x264a <free+0x4a>
    2664:	9d 01       	movw	r18, r26
    2666:	da 01       	movw	r26, r20
    2668:	33 83       	std	Z+3, r19	; 0x03
    266a:	22 83       	std	Z+2, r18	; 0x02
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	86 0f       	add	r24, r22
    2672:	97 1f       	adc	r25, r23
    2674:	82 17       	cp	r24, r18
    2676:	93 07       	cpc	r25, r19
    2678:	69 f4       	brne	.+26     	; 0x2694 <free+0x94>
    267a:	ec 01       	movw	r28, r24
    267c:	28 81       	ld	r18, Y
    267e:	39 81       	ldd	r19, Y+1	; 0x01
    2680:	26 0f       	add	r18, r22
    2682:	37 1f       	adc	r19, r23
    2684:	2e 5f       	subi	r18, 0xFE	; 254
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	31 83       	std	Z+1, r19	; 0x01
    268a:	20 83       	st	Z, r18
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	93 83       	std	Z+3, r25	; 0x03
    2692:	82 83       	std	Z+2, r24	; 0x02
    2694:	45 2b       	or	r20, r21
    2696:	29 f4       	brne	.+10     	; 0x26a2 <free+0xa2>
    2698:	f0 93 ff 0b 	sts	0x0BFF, r31	; 0x800bff <__flp+0x1>
    269c:	e0 93 fe 0b 	sts	0x0BFE, r30	; 0x800bfe <__flp>
    26a0:	42 c0       	rjmp	.+132    	; 0x2726 <free+0x126>
    26a2:	13 96       	adiw	r26, 0x03	; 3
    26a4:	fc 93       	st	X, r31
    26a6:	ee 93       	st	-X, r30
    26a8:	12 97       	sbiw	r26, 0x02	; 2
    26aa:	ed 01       	movw	r28, r26
    26ac:	49 91       	ld	r20, Y+
    26ae:	59 91       	ld	r21, Y+
    26b0:	9e 01       	movw	r18, r28
    26b2:	24 0f       	add	r18, r20
    26b4:	35 1f       	adc	r19, r21
    26b6:	e2 17       	cp	r30, r18
    26b8:	f3 07       	cpc	r31, r19
    26ba:	71 f4       	brne	.+28     	; 0x26d8 <free+0xd8>
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	84 0f       	add	r24, r20
    26c2:	95 1f       	adc	r25, r21
    26c4:	02 96       	adiw	r24, 0x02	; 2
    26c6:	11 96       	adiw	r26, 0x01	; 1
    26c8:	9c 93       	st	X, r25
    26ca:	8e 93       	st	-X, r24
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	13 96       	adiw	r26, 0x03	; 3
    26d2:	9c 93       	st	X, r25
    26d4:	8e 93       	st	-X, r24
    26d6:	12 97       	sbiw	r26, 0x02	; 2
    26d8:	e0 e0       	ldi	r30, 0x00	; 0
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	d8 01       	movw	r26, r16
    26de:	12 96       	adiw	r26, 0x02	; 2
    26e0:	8d 91       	ld	r24, X+
    26e2:	9c 91       	ld	r25, X
    26e4:	13 97       	sbiw	r26, 0x03	; 3
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <free+0xf0>
    26ea:	f8 01       	movw	r30, r16
    26ec:	8c 01       	movw	r16, r24
    26ee:	f6 cf       	rjmp	.-20     	; 0x26dc <free+0xdc>
    26f0:	8d 91       	ld	r24, X+
    26f2:	9c 91       	ld	r25, X
    26f4:	98 01       	movw	r18, r16
    26f6:	2e 5f       	subi	r18, 0xFE	; 254
    26f8:	3f 4f       	sbci	r19, 0xFF	; 255
    26fa:	82 0f       	add	r24, r18
    26fc:	93 1f       	adc	r25, r19
    26fe:	20 91 fc 0b 	lds	r18, 0x0BFC	; 0x800bfc <__brkval>
    2702:	30 91 fd 0b 	lds	r19, 0x0BFD	; 0x800bfd <__brkval+0x1>
    2706:	28 17       	cp	r18, r24
    2708:	39 07       	cpc	r19, r25
    270a:	69 f4       	brne	.+26     	; 0x2726 <free+0x126>
    270c:	30 97       	sbiw	r30, 0x00	; 0
    270e:	29 f4       	brne	.+10     	; 0x271a <free+0x11a>
    2710:	10 92 ff 0b 	sts	0x0BFF, r1	; 0x800bff <__flp+0x1>
    2714:	10 92 fe 0b 	sts	0x0BFE, r1	; 0x800bfe <__flp>
    2718:	02 c0       	rjmp	.+4      	; 0x271e <free+0x11e>
    271a:	13 82       	std	Z+3, r1	; 0x03
    271c:	12 82       	std	Z+2, r1	; 0x02
    271e:	10 93 fd 0b 	sts	0x0BFD, r17	; 0x800bfd <__brkval+0x1>
    2722:	00 93 fc 0b 	sts	0x0BFC, r16	; 0x800bfc <__brkval>
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	08 95       	ret

00002730 <strnlen_P>:
    2730:	fc 01       	movw	r30, r24
    2732:	05 90       	lpm	r0, Z+
    2734:	61 50       	subi	r22, 0x01	; 1
    2736:	70 40       	sbci	r23, 0x00	; 0
    2738:	01 10       	cpse	r0, r1
    273a:	d8 f7       	brcc	.-10     	; 0x2732 <strnlen_P+0x2>
    273c:	80 95       	com	r24
    273e:	90 95       	com	r25
    2740:	8e 0f       	add	r24, r30
    2742:	9f 1f       	adc	r25, r31
    2744:	08 95       	ret

00002746 <memset>:
    2746:	dc 01       	movw	r26, r24
    2748:	01 c0       	rjmp	.+2      	; 0x274c <memset+0x6>
    274a:	6d 93       	st	X+, r22
    274c:	41 50       	subi	r20, 0x01	; 1
    274e:	50 40       	sbci	r21, 0x00	; 0
    2750:	e0 f7       	brcc	.-8      	; 0x274a <memset+0x4>
    2752:	08 95       	ret

00002754 <strnlen>:
    2754:	fc 01       	movw	r30, r24
    2756:	61 50       	subi	r22, 0x01	; 1
    2758:	70 40       	sbci	r23, 0x00	; 0
    275a:	01 90       	ld	r0, Z+
    275c:	01 10       	cpse	r0, r1
    275e:	d8 f7       	brcc	.-10     	; 0x2756 <strnlen+0x2>
    2760:	80 95       	com	r24
    2762:	90 95       	com	r25
    2764:	8e 0f       	add	r24, r30
    2766:	9f 1f       	adc	r25, r31
    2768:	08 95       	ret

0000276a <fputc>:
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	fb 01       	movw	r30, r22
    2774:	23 81       	ldd	r18, Z+3	; 0x03
    2776:	21 fd       	sbrc	r18, 1
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <fputc+0x16>
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	9f ef       	ldi	r25, 0xFF	; 255
    277e:	28 c0       	rjmp	.+80     	; 0x27d0 <fputc+0x66>
    2780:	22 ff       	sbrs	r18, 2
    2782:	16 c0       	rjmp	.+44     	; 0x27b0 <fputc+0x46>
    2784:	46 81       	ldd	r20, Z+6	; 0x06
    2786:	57 81       	ldd	r21, Z+7	; 0x07
    2788:	24 81       	ldd	r18, Z+4	; 0x04
    278a:	35 81       	ldd	r19, Z+5	; 0x05
    278c:	42 17       	cp	r20, r18
    278e:	53 07       	cpc	r21, r19
    2790:	44 f4       	brge	.+16     	; 0x27a2 <fputc+0x38>
    2792:	a0 81       	ld	r26, Z
    2794:	b1 81       	ldd	r27, Z+1	; 0x01
    2796:	9d 01       	movw	r18, r26
    2798:	2f 5f       	subi	r18, 0xFF	; 255
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	31 83       	std	Z+1, r19	; 0x01
    279e:	20 83       	st	Z, r18
    27a0:	8c 93       	st	X, r24
    27a2:	26 81       	ldd	r18, Z+6	; 0x06
    27a4:	37 81       	ldd	r19, Z+7	; 0x07
    27a6:	2f 5f       	subi	r18, 0xFF	; 255
    27a8:	3f 4f       	sbci	r19, 0xFF	; 255
    27aa:	37 83       	std	Z+7, r19	; 0x07
    27ac:	26 83       	std	Z+6, r18	; 0x06
    27ae:	10 c0       	rjmp	.+32     	; 0x27d0 <fputc+0x66>
    27b0:	eb 01       	movw	r28, r22
    27b2:	09 2f       	mov	r16, r25
    27b4:	18 2f       	mov	r17, r24
    27b6:	00 84       	ldd	r0, Z+8	; 0x08
    27b8:	f1 85       	ldd	r31, Z+9	; 0x09
    27ba:	e0 2d       	mov	r30, r0
    27bc:	19 95       	eicall
    27be:	89 2b       	or	r24, r25
    27c0:	e1 f6       	brne	.-72     	; 0x277a <fputc+0x10>
    27c2:	8e 81       	ldd	r24, Y+6	; 0x06
    27c4:	9f 81       	ldd	r25, Y+7	; 0x07
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	9f 83       	std	Y+7, r25	; 0x07
    27ca:	8e 83       	std	Y+6, r24	; 0x06
    27cc:	81 2f       	mov	r24, r17
    27ce:	90 2f       	mov	r25, r16
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <__ultoa_invert>:
    27da:	fa 01       	movw	r30, r20
    27dc:	aa 27       	eor	r26, r26
    27de:	28 30       	cpi	r18, 0x08	; 8
    27e0:	51 f1       	breq	.+84     	; 0x2836 <__ultoa_invert+0x5c>
    27e2:	20 31       	cpi	r18, 0x10	; 16
    27e4:	81 f1       	breq	.+96     	; 0x2846 <__ultoa_invert+0x6c>
    27e6:	e8 94       	clt
    27e8:	6f 93       	push	r22
    27ea:	6e 7f       	andi	r22, 0xFE	; 254
    27ec:	6e 5f       	subi	r22, 0xFE	; 254
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	8f 4f       	sbci	r24, 0xFF	; 255
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	af 4f       	sbci	r26, 0xFF	; 255
    27f6:	b1 e0       	ldi	r27, 0x01	; 1
    27f8:	3e d0       	rcall	.+124    	; 0x2876 <__ultoa_invert+0x9c>
    27fa:	b4 e0       	ldi	r27, 0x04	; 4
    27fc:	3c d0       	rcall	.+120    	; 0x2876 <__ultoa_invert+0x9c>
    27fe:	67 0f       	add	r22, r23
    2800:	78 1f       	adc	r23, r24
    2802:	89 1f       	adc	r24, r25
    2804:	9a 1f       	adc	r25, r26
    2806:	a1 1d       	adc	r26, r1
    2808:	68 0f       	add	r22, r24
    280a:	79 1f       	adc	r23, r25
    280c:	8a 1f       	adc	r24, r26
    280e:	91 1d       	adc	r25, r1
    2810:	a1 1d       	adc	r26, r1
    2812:	6a 0f       	add	r22, r26
    2814:	71 1d       	adc	r23, r1
    2816:	81 1d       	adc	r24, r1
    2818:	91 1d       	adc	r25, r1
    281a:	a1 1d       	adc	r26, r1
    281c:	20 d0       	rcall	.+64     	; 0x285e <__ultoa_invert+0x84>
    281e:	09 f4       	brne	.+2      	; 0x2822 <__ultoa_invert+0x48>
    2820:	68 94       	set
    2822:	3f 91       	pop	r19
    2824:	2a e0       	ldi	r18, 0x0A	; 10
    2826:	26 9f       	mul	r18, r22
    2828:	11 24       	eor	r1, r1
    282a:	30 19       	sub	r19, r0
    282c:	30 5d       	subi	r19, 0xD0	; 208
    282e:	31 93       	st	Z+, r19
    2830:	de f6       	brtc	.-74     	; 0x27e8 <__ultoa_invert+0xe>
    2832:	cf 01       	movw	r24, r30
    2834:	08 95       	ret
    2836:	46 2f       	mov	r20, r22
    2838:	47 70       	andi	r20, 0x07	; 7
    283a:	40 5d       	subi	r20, 0xD0	; 208
    283c:	41 93       	st	Z+, r20
    283e:	b3 e0       	ldi	r27, 0x03	; 3
    2840:	0f d0       	rcall	.+30     	; 0x2860 <__ultoa_invert+0x86>
    2842:	c9 f7       	brne	.-14     	; 0x2836 <__ultoa_invert+0x5c>
    2844:	f6 cf       	rjmp	.-20     	; 0x2832 <__ultoa_invert+0x58>
    2846:	46 2f       	mov	r20, r22
    2848:	4f 70       	andi	r20, 0x0F	; 15
    284a:	40 5d       	subi	r20, 0xD0	; 208
    284c:	4a 33       	cpi	r20, 0x3A	; 58
    284e:	18 f0       	brcs	.+6      	; 0x2856 <__ultoa_invert+0x7c>
    2850:	49 5d       	subi	r20, 0xD9	; 217
    2852:	31 fd       	sbrc	r19, 1
    2854:	40 52       	subi	r20, 0x20	; 32
    2856:	41 93       	st	Z+, r20
    2858:	02 d0       	rcall	.+4      	; 0x285e <__ultoa_invert+0x84>
    285a:	a9 f7       	brne	.-22     	; 0x2846 <__ultoa_invert+0x6c>
    285c:	ea cf       	rjmp	.-44     	; 0x2832 <__ultoa_invert+0x58>
    285e:	b4 e0       	ldi	r27, 0x04	; 4
    2860:	a6 95       	lsr	r26
    2862:	97 95       	ror	r25
    2864:	87 95       	ror	r24
    2866:	77 95       	ror	r23
    2868:	67 95       	ror	r22
    286a:	ba 95       	dec	r27
    286c:	c9 f7       	brne	.-14     	; 0x2860 <__ultoa_invert+0x86>
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	61 05       	cpc	r22, r1
    2872:	71 05       	cpc	r23, r1
    2874:	08 95       	ret
    2876:	9b 01       	movw	r18, r22
    2878:	ac 01       	movw	r20, r24
    287a:	0a 2e       	mov	r0, r26
    287c:	06 94       	lsr	r0
    287e:	57 95       	ror	r21
    2880:	47 95       	ror	r20
    2882:	37 95       	ror	r19
    2884:	27 95       	ror	r18
    2886:	ba 95       	dec	r27
    2888:	c9 f7       	brne	.-14     	; 0x287c <__ultoa_invert+0xa2>
    288a:	62 0f       	add	r22, r18
    288c:	73 1f       	adc	r23, r19
    288e:	84 1f       	adc	r24, r20
    2890:	95 1f       	adc	r25, r21
    2892:	a0 1d       	adc	r26, r0
    2894:	08 95       	ret

00002896 <_exit>:
    2896:	f8 94       	cli

00002898 <__stop_program>:
    2898:	ff cf       	rjmp	.-2      	; 0x2898 <__stop_program>
