
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006e8  00800200  00003018  000030ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ae  008008e8  008008e8  00003794  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f49  00000000  00000000  00003ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c51  00000000  00000000  00006e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b57  00000000  00000000  00007a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000930  00000000  00000000  000095ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d23  00000000  00000000  00009edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002000  00000000  00000000  0000abff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  0000cbff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c4       	rjmp	.+2120   	; 0x8ae <__vector_25>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c0       	rjmp	.+128    	; 0x10e <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c5       	rjmp	.+2598   	; 0xab8 <__vector_36>
      92:	00 00       	nop
      94:	3c c0       	rjmp	.+120    	; 0x10e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c0       	rjmp	.+116    	; 0x10e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c0       	rjmp	.+112    	; 0x10e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c0       	rjmp	.+108    	; 0x10e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c0       	rjmp	.+104    	; 0x10e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c0       	rjmp	.+100    	; 0x10e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c0       	rjmp	.+96     	; 0x10e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c0       	rjmp	.+92     	; 0x10e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c0       	rjmp	.+88     	; 0x10e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c0       	rjmp	.+84     	; 0x10e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c0       	rjmp	.+80     	; 0x10e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c0       	rjmp	.+76     	; 0x10e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c0       	rjmp	.+72     	; 0x10e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c0       	rjmp	.+68     	; 0x10e <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	18 e0       	ldi	r17, 0x08	; 8
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e8 e1       	ldi	r30, 0x18	; 24
      e4:	f0 e3       	ldi	r31, 0x30	; 48
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a8 3e       	cpi	r26, 0xE8	; 232
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	2c e0       	ldi	r18, 0x0C	; 12
      f8:	a8 ee       	ldi	r26, 0xE8	; 232
      fa:	b8 e0       	ldi	r27, 0x08	; 8
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a6 39       	cpi	r26, 0x96	; 150
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 ad 0b 	call	0x175a	; 0x175a <main>
     10a:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <dxl_get_result>:
     110:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     114:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     118:	08 95       	ret

0000011a <dxl_set_txpacket_id>:
     11a:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <__data_end+0x2>
     11e:	08 95       	ret

00000120 <dxl_set_txpacket_instruction>:
     120:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     124:	08 95       	ret

00000126 <dxl_set_txpacket_parameter>:
     126:	fc 01       	movw	r30, r24
     128:	e8 51       	subi	r30, 0x18	; 24
     12a:	f7 4f       	sbci	r31, 0xF7	; 247
     12c:	65 83       	std	Z+5, r22	; 0x05
     12e:	08 95       	ret

00000130 <dxl_set_txpacket_length>:
     130:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     134:	08 95       	ret

00000136 <dxl_get_rxpacket_error>:
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <gbStatusPacket+0x4>
     13e:	98 23       	and	r25, r24
     140:	11 f0       	breq	.+4      	; 0x146 <dxl_get_rxpacket_error+0x10>
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	c9 01       	movw	r24, r18
     148:	08 95       	ret

0000014a <dxl_get_rxpacket_length>:
     14a:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <gbStatusPacket+0x3>
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <dxl_get_rxpacket_parameter>:
     152:	fc 01       	movw	r30, r24
     154:	e8 57       	subi	r30, 0x78	; 120
     156:	f6 4f       	sbci	r31, 0xF6	; 246
     158:	85 81       	ldd	r24, Z+5	; 0x05
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <dxl_makeword>:
     15e:	36 2f       	mov	r19, r22
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	28 0f       	add	r18, r24
     164:	39 1f       	adc	r19, r25
     166:	c9 01       	movw	r24, r18
     168:	08 95       	ret

0000016a <dxl_get_lowbyte>:
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <dxl_get_highbyte>:
     172:	80 70       	andi	r24, 0x00	; 0
     174:	89 2f       	mov	r24, r25
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <dxl_rx_packet>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     186:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     18a:	89 2b       	or	r24, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <dxl_rx_packet+0x16>
     18e:	b8 c0       	rjmp	.+368    	; 0x300 <dxl_rx_packet+0x186>
     190:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <__data_end+0x2>
     194:	8e 3f       	cpi	r24, 0xFE	; 254
     196:	09 f4       	brne	.+2      	; 0x19a <dxl_rx_packet+0x20>
     198:	a9 c0       	rjmp	.+338    	; 0x2ec <dxl_rx_packet+0x172>
     19a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     19e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <dxl_rx_packet+0x36>
     1a6:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <gbRxGetLength>
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 ce 09 	sts	0x09CE, r24	; 0x8009ce <gbRxPacketLength>
     1b0:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <gbRxGetLength>
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	60 91 ce 09 	lds	r22, 0x09CE	; 0x8009ce <gbRxPacketLength>
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	88 57       	subi	r24, 0x78	; 120
     1c2:	96 4f       	sbci	r25, 0xF6	; 246
     1c4:	49 d3       	rcall	.+1682   	; 0x858 <dxl_hal_rx>
     1c6:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <gbRxGetLength>
     1ca:	98 0f       	add	r25, r24
     1cc:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <gbRxGetLength>
     1d0:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <gbRxPacketLength>
     1d4:	98 17       	cp	r25, r24
     1d6:	18 f4       	brcc	.+6      	; 0x1de <dxl_rx_packet+0x64>
     1d8:	4a d2       	rcall	.+1172   	; 0x66e <dxl_hal_timeout>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	71 f0       	breq	.+28     	; 0x1fa <dxl_rx_packet+0x80>
     1de:	70 91 cf 09 	lds	r23, 0x09CF	; 0x8009cf <gbRxGetLength>
     1e2:	47 2f       	mov	r20, r23
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	da 01       	movw	r26, r20
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	8a 01       	movw	r16, r20
     1ec:	02 50       	subi	r16, 0x02	; 2
     1ee:	10 40       	sbci	r17, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	ed 01       	movw	r28, r26
     1f4:	c8 57       	subi	r28, 0x78	; 120
     1f6:	d6 4f       	sbci	r29, 0xF6	; 246
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <dxl_rx_packet+0xb0>
     1fa:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <gbRxGetLength>
     1fe:	88 23       	and	r24, r24
     200:	09 f0       	breq	.+2      	; 0x204 <dxl_rx_packet+0x8a>
     202:	71 c0       	rjmp	.+226    	; 0x2e6 <dxl_rx_packet+0x16c>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	73 c0       	rjmp	.+230    	; 0x2f0 <dxl_rx_packet+0x176>
     20a:	f9 01       	movw	r30, r18
     20c:	e8 57       	subi	r30, 0x78	; 120
     20e:	f6 4f       	sbci	r31, 0xF6	; 246
     210:	80 81       	ld	r24, Z
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	19 f4       	brne	.+6      	; 0x21c <dxl_rx_packet+0xa2>
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	61 f0       	breq	.+24     	; 0x234 <dxl_rx_packet+0xba>
     21c:	20 17       	cp	r18, r16
     21e:	31 07       	cpc	r19, r17
     220:	19 f4       	brne	.+6      	; 0x228 <dxl_rx_packet+0xae>
     222:	88 81       	ld	r24, Y
     224:	8f 3f       	cpi	r24, 0xFF	; 255
     226:	31 f0       	breq	.+12     	; 0x234 <dxl_rx_packet+0xba>
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	26 2f       	mov	r18, r22
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2a 17       	cp	r18, r26
     230:	3b 07       	cpc	r19, r27
     232:	5c f3       	brlt	.-42     	; 0x20a <dxl_rx_packet+0x90>
     234:	66 23       	and	r22, r22
     236:	a1 f0       	breq	.+40     	; 0x260 <dxl_rx_packet+0xe6>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	42 1b       	sub	r20, r18
     23c:	53 0b       	sbc	r21, r19
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dxl_rx_packet+0xd6>
     240:	e8 57       	subi	r30, 0x78	; 120
     242:	f6 4f       	sbci	r31, 0xF6	; 246
     244:	df 01       	movw	r26, r30
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	8c 91       	ld	r24, X
     24c:	80 83       	st	Z, r24
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e4 17       	cp	r30, r20
     256:	f5 07       	cpc	r31, r21
     258:	9c f3       	brlt	.-26     	; 0x240 <dxl_rx_packet+0xc6>
     25a:	76 1b       	sub	r23, r22
     25c:	70 93 cf 09 	sts	0x09CF, r23	; 0x8009cf <gbRxGetLength>
     260:	20 91 cf 09 	lds	r18, 0x09CF	; 0x8009cf <gbRxGetLength>
     264:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <gbRxPacketLength>
     268:	28 17       	cp	r18, r24
     26a:	28 f1       	brcs	.+74     	; 0x2b6 <dxl_rx_packet+0x13c>
     26c:	90 91 ea 08 	lds	r25, 0x08EA	; 0x8008ea <__data_end+0x2>
     270:	80 91 8a 09 	lds	r24, 0x098A	; 0x80098a <gbStatusPacket+0x2>
     274:	98 17       	cp	r25, r24
     276:	b9 f5       	brne	.+110    	; 0x2e6 <dxl_rx_packet+0x16c>
     278:	60 91 8b 09 	lds	r22, 0x098B	; 0x80098b <gbStatusPacket+0x3>
     27c:	6c 5f       	subi	r22, 0xFC	; 252
     27e:	60 93 ce 09 	sts	0x09CE, r22	; 0x8009ce <gbRxPacketLength>
     282:	26 17       	cp	r18, r22
     284:	88 f4       	brcc	.+34     	; 0x2a8 <dxl_rx_packet+0x12e>
     286:	82 2f       	mov	r24, r18
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	88 57       	subi	r24, 0x78	; 120
     292:	96 4f       	sbci	r25, 0xF6	; 246
     294:	e1 d2       	rcall	.+1474   	; 0x858 <dxl_hal_rx>
     296:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <gbRxGetLength>
     29a:	98 0f       	add	r25, r24
     29c:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <gbRxGetLength>
     2a0:	80 91 ce 09 	lds	r24, 0x09CE	; 0x8009ce <gbRxPacketLength>
     2a4:	98 17       	cp	r25, r24
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <dxl_rx_packet+0x13c>
     2a8:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <gbStatusPacket+0x3>
     2ac:	a8 2f       	mov	r26, r24
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <dxl_rx_packet+0x154>
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <dxl_rx_packet+0x186>
     2c4:	e8 57       	subi	r30, 0x78	; 120
     2c6:	f6 4f       	sbci	r31, 0xF6	; 246
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	98 0f       	add	r25, r24
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	e2 2f       	mov	r30, r18
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ae 17       	cp	r26, r30
     2d4:	bf 07       	cpc	r27, r31
     2d6:	b4 f7       	brge	.-20     	; 0x2c4 <dxl_rx_packet+0x14a>
     2d8:	a8 57       	subi	r26, 0x78	; 120
     2da:	b6 4f       	sbci	r27, 0xF6	; 246
     2dc:	90 95       	com	r25
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	8c 91       	ld	r24, X
     2e2:	89 17       	cp	r24, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <dxl_rx_packet+0x172>
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <dxl_rx_packet+0x176>
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     2f4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     2f8:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <giBusUsing+0x1>
     2fc:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <giBusUsing>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <dxl_tx_packet>:
     30a:	1f 93       	push	r17
     30c:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     310:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	09 f4       	brne	.+2      	; 0x31a <dxl_tx_packet+0x10>
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <dxl_tx_packet+0xca>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <giBusUsing+0x1>
     322:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <giBusUsing>
     326:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__data_end+0x3>
     32a:	89 39       	cpi	r24, 0x99	; 153
     32c:	40 f4       	brcc	.+16     	; 0x33e <dxl_tx_packet+0x34>
     32e:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <__data_end+0x4>
     332:	89 2f       	mov	r24, r25
     334:	81 50       	subi	r24, 0x01	; 1
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	28 f0       	brcs	.+10     	; 0x344 <dxl_tx_packet+0x3a>
     33a:	93 38       	cpi	r25, 0x83	; 131
     33c:	19 f0       	breq	.+6      	; 0x344 <dxl_tx_packet+0x3a>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <dxl_tx_packet+0x98>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <__data_end>
     34a:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <__data_end+0x1>
     34e:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <__data_end+0x3>
     352:	a8 2f       	mov	r26, r24
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <dxl_tx_packet+0x5c>
     35c:	e8 51       	subi	r30, 0x18	; 24
     35e:	f7 4f       	sbci	r31, 0xF7	; 247
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	98 0f       	add	r25, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	e2 2f       	mov	r30, r18
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ae 17       	cp	r26, r30
     36c:	bf 07       	cpc	r27, r31
     36e:	b4 f7       	brge	.-20     	; 0x35c <dxl_tx_packet+0x52>
     370:	a8 51       	subi	r26, 0x18	; 24
     372:	b7 4f       	sbci	r27, 0xF7	; 247
     374:	90 95       	com	r25
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	9c 93       	st	X, r25
     37a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     37e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     382:	06 97       	sbiw	r24, 0x06	; 6
     384:	02 97       	sbiw	r24, 0x02	; 2
     386:	08 f4       	brcc	.+2      	; 0x38a <dxl_tx_packet+0x80>
     388:	38 d1       	rcall	.+624    	; 0x5fa <dxl_hal_clear>
     38a:	10 91 eb 08 	lds	r17, 0x08EB	; 0x8008eb <__data_end+0x3>
     38e:	1c 5f       	subi	r17, 0xFC	; 252
     390:	88 ee       	ldi	r24, 0xE8	; 232
     392:	98 e0       	ldi	r25, 0x08	; 8
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	35 d1       	rcall	.+618    	; 0x604 <dxl_hal_tx>
     39a:	18 17       	cp	r17, r24
     39c:	59 f0       	breq	.+22     	; 0x3b4 <dxl_tx_packet+0xaa>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     3a6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     3aa:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <giBusUsing+0x1>
     3ae:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <giBusUsing>
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <dxl_tx_packet+0xca>
     3b4:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <__data_end+0x4>
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	29 f4       	brne	.+10     	; 0x3c6 <dxl_tx_packet+0xbc>
     3bc:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <__data_end+0x6>
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 96       	adiw	r24, 0x06	; 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dxl_tx_packet+0xc0>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	40 d1       	rcall	.+640    	; 0x64c <dxl_hal_set_timeout>
     3cc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
     3d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <dxl_txrx_packet>:
     3d8:	98 df       	rcall	.-208    	; 0x30a <dxl_tx_packet>
     3da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3de:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3e2:	89 2b       	or	r24, r25
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <dxl_txrx_packet+0x1c>
     3e6:	c9 de       	rcall	.-622    	; 0x17a <dxl_rx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     3ec:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     3f0:	05 97       	sbiw	r24, 0x05	; 5
     3f2:	c9 f3       	breq	.-14     	; 0x3e6 <dxl_txrx_packet+0xe>
     3f4:	08 95       	ret

000003f6 <dxl_write_word>:
     3f6:	28 2f       	mov	r18, r24
     3f8:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     3fc:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     404:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <__data_end+0x2>
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     40e:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <__data_end+0x5>
     412:	ca 01       	movw	r24, r20
     414:	40 93 ee 08 	sts	0x08EE, r20	; 0x8008ee <__data_end+0x6>
     418:	80 70       	andi	r24, 0x00	; 0
     41a:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <__data_end+0x7>
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     424:	d9 cf       	rjmp	.-78     	; 0x3d8 <dxl_txrx_packet>
     426:	08 95       	ret
     428:	ff cf       	rjmp	.-2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>

0000042a <dxl_read_word>:
     42a:	28 2f       	mov	r18, r24
     42c:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     430:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     434:	89 2b       	or	r24, r25
     436:	b1 f4       	brne	.+44     	; 0x464 <dxl_read_word+0x3a>
     438:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <__data_end+0x2>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     442:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <__data_end+0x5>
     446:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <__data_end+0x6>
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     450:	c3 df       	rcall	.-122    	; 0x3d8 <dxl_txrx_packet>
     452:	30 91 8e 09 	lds	r19, 0x098E	; 0x80098e <gbStatusPacket+0x6>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <gbStatusPacket+0x5>
     45c:	28 0f       	add	r18, r24
     45e:	31 1d       	adc	r19, r1
     460:	c9 01       	movw	r24, r18
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_read_word+0x3a>

00000466 <dxl_write_byte>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     46c:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     470:	89 2b       	or	r24, r25
     472:	71 f4       	brne	.+28     	; 0x490 <dxl_write_byte+0x2a>
     474:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <__data_end+0x2>
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     47e:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <__data_end+0x5>
     482:	40 93 ee 08 	sts	0x08EE, r20	; 0x8008ee <__data_end+0x6>
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     48c:	a5 cf       	rjmp	.-182    	; 0x3d8 <dxl_txrx_packet>
     48e:	08 95       	ret
     490:	ff cf       	rjmp	.-2      	; 0x490 <dxl_write_byte+0x2a>

00000492 <dxl_read_byte>:
     492:	28 2f       	mov	r18, r24
     494:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     498:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     49c:	89 2b       	or	r24, r25
     49e:	91 f4       	brne	.+36     	; 0x4c4 <dxl_read_byte+0x32>
     4a0:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <__data_end+0x2>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     4aa:	60 93 ed 08 	sts	0x08ED, r22	; 0x8008ed <__data_end+0x5>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <__data_end+0x6>
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     4ba:	8e df       	rcall	.-228    	; 0x3d8 <dxl_txrx_packet>
     4bc:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <gbStatusPacket+0x5>
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <dxl_read_byte+0x32>

000004c6 <dxl_ping>:
     4c6:	28 2f       	mov	r18, r24
     4c8:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <giBusUsing>
     4cc:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <giBusUsing+0x1>
     4d0:	89 2b       	or	r24, r25
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <dxl_ping+0x22>
     4d4:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <__data_end+0x2>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <__data_end+0x4>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <__data_end+0x3>
     4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <dxl_txrx_packet>
     4e6:	08 95       	ret
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <dxl_ping+0x22>

000004ea <dxl_terminate>:
     4ea:	86 c0       	rjmp	.+268    	; 0x5f8 <dxl_hal_close>
     4ec:	08 95       	ret

000004ee <dxl_initialize>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	8c 01       	movw	r16, r24
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	74 e2       	ldi	r23, 0x24	; 36
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	99 e4       	ldi	r25, 0x49	; 73
     510:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     514:	ab 01       	movw	r20, r22
     516:	bc 01       	movw	r22, r24
     518:	c8 01       	movw	r24, r16
     51a:	15 d0       	rcall	.+42     	; 0x546 <dxl_hal_open>
     51c:	89 2b       	or	r24, r25
     51e:	19 f4       	brne	.+6      	; 0x526 <dxl_initialize+0x38>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	0c c0       	rjmp	.+24     	; 0x53e <dxl_initialize+0x50>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     52e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     532:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <giBusUsing+0x1>
     536:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <giBusUsing>
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	c9 01       	movw	r24, r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <dxl_hal_open>:
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	7a 01       	movw	r14, r20
     550:	8b 01       	movw	r16, r22
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	99 e4       	ldi	r25, 0x49	; 73
     56c:	a8 01       	movw	r20, r16
     56e:	97 01       	movw	r18, r14
     570:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     574:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     580:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 e7       	ldi	r24, 0x74	; 116
     58a:	99 e4       	ldi	r25, 0x49	; 73
     58c:	a8 01       	movw	r20, r16
     58e:	97 01       	movw	r18, r14
     590:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e4       	ldi	r20, 0x40	; 64
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 a5 12 	call	0x254a	; 0x254a <__mulsf3>
     5a0:	60 93 84 0c 	sts	0x0C84, r22	; 0x800c84 <gfByteTransTime_us>
     5a4:	70 93 85 0c 	sts	0x0C85, r23	; 0x800c85 <gfByteTransTime_us+0x1>
     5a8:	80 93 86 0c 	sts	0x0C86, r24	; 0x800c86 <gfByteTransTime_us+0x2>
     5ac:	90 93 87 0c 	sts	0x0C87, r25	; 0x800c87 <gfByteTransTime_us+0x3>
     5b0:	20 91 84 0c 	lds	r18, 0x0C84	; 0x800c84 <gfByteTransTime_us>
     5b4:	30 91 85 0c 	lds	r19, 0x0C85	; 0x800c85 <gfByteTransTime_us+0x1>
     5b8:	40 91 86 0c 	lds	r20, 0x0C86	; 0x800c86 <gfByteTransTime_us+0x2>
     5bc:	50 91 87 0c 	lds	r21, 0x0C87	; 0x800c87 <gfByteTransTime_us+0x3>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8a e7       	ldi	r24, 0x7A	; 122
     5c6:	93 e4       	ldi	r25, 0x43	; 67
     5c8:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     5cc:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
     5d0:	70 93 83 0c 	sts	0x0C83, r23	; 0x800c83 <gwReturnDelayCountNum+0x1>
     5d4:	60 93 82 0c 	sts	0x0C82, r22	; 0x800c82 <gwReturnDelayCountNum>
     5d8:	72 98       	cbi	0x0e, 2	; 14
     5da:	73 9a       	sbi	0x0e, 3	; 14
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     5e2:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <gbDxlBufferHead>
     5e6:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <gbDxlBufferTail>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <dxl_hal_close>:
     5f8:	08 95       	ret

000005fa <dxl_hal_clear>:
     5fa:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     5fe:	80 93 d2 0a 	sts	0x0AD2, r24	; 0x800ad2 <gbDxlBufferHead>
     602:	08 95       	ret

00000604 <dxl_hal_tx>:
     604:	ac 01       	movw	r20, r24
     606:	f8 94       	cli
     608:	73 98       	cbi	0x0e, 3	; 14
     60a:	72 9a       	sbi	0x0e, 2	; 14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 c0       	rjmp	.+34     	; 0x634 <dxl_hal_tx+0x30>
     612:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <dxl_hal_tx+0xe>
     61a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     624:	fa 01       	movw	r30, r20
     626:	e2 0f       	add	r30, r18
     628:	f3 1f       	adc	r31, r19
     62a:	80 81       	ld	r24, Z
     62c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	64 f3       	brlt	.-40     	; 0x612 <dxl_hal_tx+0xe>
     63a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     63e:	86 ff       	sbrs	r24, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <dxl_hal_tx+0x36>
     642:	72 98       	cbi	0x0e, 2	; 14
     644:	73 9a       	sbi	0x0e, 3	; 14
     646:	78 94       	sei
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <dxl_hal_set_timeout>:
     64c:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <gwCountNum+0x1>
     650:	10 92 8a 0c 	sts	0x0C8A, r1	; 0x800c8a <gwCountNum>
     654:	20 91 82 0c 	lds	r18, 0x0C82	; 0x800c82 <gwReturnDelayCountNum>
     658:	30 91 83 0c 	lds	r19, 0x0C83	; 0x800c83 <gwReturnDelayCountNum+0x1>
     65c:	26 5f       	subi	r18, 0xF6	; 246
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
     664:	30 93 89 0c 	sts	0x0C89, r19	; 0x800c89 <gwTimeoutCountNum+0x1>
     668:	20 93 88 0c 	sts	0x0C88, r18	; 0x800c88 <gwTimeoutCountNum>
     66c:	08 95       	ret

0000066e <dxl_hal_timeout>:
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <gwCountNum>
     682:	90 91 8b 0c 	lds	r25, 0x0C8B	; 0x800c8b <gwCountNum+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 8b 0c 	sts	0x0C8B, r25	; 0x800c8b <gwCountNum+0x1>
     68c:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <gwCountNum>
     690:	20 91 8a 0c 	lds	r18, 0x0C8A	; 0x800c8a <gwCountNum>
     694:	30 91 8b 0c 	lds	r19, 0x0C8B	; 0x800c8b <gwCountNum+0x1>
     698:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <gwTimeoutCountNum>
     69c:	90 91 89 0c 	lds	r25, 0x0C89	; 0x800c89 <gwTimeoutCountNum+0x1>
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <dxl_hal_timeout+0x3e>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	74 c0       	rjmp	.+232    	; 0x794 <dxl_hal_timeout+0x126>
     6ac:	a0 90 84 0c 	lds	r10, 0x0C84	; 0x800c84 <gfByteTransTime_us>
     6b0:	b0 90 85 0c 	lds	r11, 0x0C85	; 0x800c85 <gfByteTransTime_us+0x1>
     6b4:	c0 90 86 0c 	lds	r12, 0x0C86	; 0x800c86 <gfByteTransTime_us+0x2>
     6b8:	d0 90 87 0c 	lds	r13, 0x0C87	; 0x800c87 <gfByteTransTime_us+0x3>
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6bc:	c6 01       	movw	r24, r12
     6be:	b5 01       	movw	r22, r10
     6c0:	2b ea       	ldi	r18, 0xAB	; 171
     6c2:	3a ea       	ldi	r19, 0xAA	; 170
     6c4:	4a ea       	ldi	r20, 0xAA	; 170
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	0e 94 a5 12 	call	0x254a	; 0x254a <__mulsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <dxl_hal_timeout+0x76>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 a1 12 	call	0x2542	; 0x2542 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <dxl_hal_timeout+0x8c>
     6f8:	45 c0       	rjmp	.+138    	; 0x784 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     70a:	5b 01       	movw	r10, r22
     70c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 a5 12 	call	0x254a	; 0x254a <__mulsf3>
     71a:	7b 01       	movw	r14, r22
     71c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	1c f4       	brge	.+6      	; 0x734 <dxl_hal_timeout+0xc6>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	24 c0       	rjmp	.+72     	; 0x77c <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	3f ef       	ldi	r19, 0xFF	; 255
     73c:	4f e7       	ldi	r20, 0x7F	; 127
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 a1 12 	call	0x2542	; 0x2542 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	b4 f4       	brge	.+44     	; 0x774 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	c6 01       	movw	r24, r12
     74a:	b5 01       	movw	r22, r10
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 a5 12 	call	0x254a	; 0x254a <__mulsf3>
     758:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <dxl_hal_timeout+0xfe>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <dxl_hal_timeout+0xf4>
     772:	0e c0       	rjmp	.+28     	; 0x790 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
     77c:	cb 01       	movw	r24, r22
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <dxl_hal_timeout+0x110>
     782:	06 c0       	rjmp	.+12     	; 0x790 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78c:	6a 95       	dec	r22
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x11e>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <dxl_hal_get_qstate>:
     7a8:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     7ac:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     7b0:	98 17       	cp	r25, r24
     7b2:	19 f4       	brne	.+6      	; 0x7ba <dxl_hal_get_qstate+0x12>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <dxl_hal_get_qstate+0x40>
     7ba:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     7be:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     7c2:	98 17       	cp	r25, r24
     7c4:	38 f4       	brcc	.+14     	; 0x7d4 <dxl_hal_get_qstate+0x2c>
     7c6:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     7ca:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <dxl_hal_get_qstate+0x3c>
     7d4:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     7d8:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 50       	subi	r18, 0x00	; 0
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	29 1b       	sub	r18, r25
     7e6:	31 09       	sbc	r19, r1
     7e8:	c9 01       	movw	r24, r18
     7ea:	08 95       	ret

000007ec <dxl_hal_put_queue>:
     7ec:	1f 93       	push	r17
     7ee:	18 2f       	mov	r17, r24
     7f0:	db df       	rcall	.-74     	; 0x7a8 <dxl_hal_get_qstate>
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	91 05       	cpc	r25, r1
     7f6:	91 f0       	breq	.+36     	; 0x81c <dxl_hal_put_queue+0x30>
     7f8:	e0 91 d3 0a 	lds	r30, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ee 52       	subi	r30, 0x2E	; 46
     800:	f6 4f       	sbci	r31, 0xF6	; 246
     802:	10 83       	st	Z, r17
     804:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <dxl_hal_put_queue+0x26>
     80c:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <gbDxlBufferTail>
     810:	05 c0       	rjmp	.+10     	; 0x81c <dxl_hal_put_queue+0x30>
     812:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <gbDxlBufferTail>
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <dxl_hal_get_queue>:
     820:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     824:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     828:	98 17       	cp	r25, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <dxl_hal_get_queue+0x10>
     82c:	ef ef       	ldi	r30, 0xFF	; 255
     82e:	12 c0       	rjmp	.+36     	; 0x854 <dxl_hal_get_queue+0x34>
     830:	e0 91 d2 0a 	lds	r30, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ee 52       	subi	r30, 0x2E	; 46
     838:	f6 4f       	sbci	r31, 0xF6	; 246
     83a:	e0 81       	ld	r30, Z
     83c:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	19 f4       	brne	.+6      	; 0x84a <dxl_hal_get_queue+0x2a>
     844:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <gbDxlBufferHead>
     848:	05 c0       	rjmp	.+10     	; 0x854 <dxl_hal_get_queue+0x34>
     84a:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 d2 0a 	sts	0x0AD2, r24	; 0x800ad2 <gbDxlBufferHead>
     854:	8e 2f       	mov	r24, r30
     856:	08 95       	ret

00000858 <dxl_hal_rx>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	eb 01       	movw	r28, r22
     868:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <gbDxlBufferHead>
     86c:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <gbDxlBufferTail>
     870:	98 17       	cp	r25, r24
     872:	19 f4       	brne	.+6      	; 0x87a <dxl_hal_rx+0x22>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	12 c0       	rjmp	.+36     	; 0x89e <dxl_hal_rx+0x46>
     87a:	96 df       	rcall	.-212    	; 0x7a8 <dxl_hal_get_qstate>
     87c:	8c 01       	movw	r16, r24
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	0c f4       	brge	.+2      	; 0x886 <dxl_hal_rx+0x2e>
     884:	8e 01       	movw	r16, r28
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	06 c0       	rjmp	.+12     	; 0x898 <dxl_hal_rx+0x40>
     88c:	c9 df       	rcall	.-110    	; 0x820 <dxl_hal_get_queue>
     88e:	f7 01       	movw	r30, r14
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	80 83       	st	Z, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	c0 17       	cp	r28, r16
     89a:	d1 07       	cpc	r29, r17
     89c:	bc f3       	brlt	.-18     	; 0x88c <dxl_hal_rx+0x34>
     89e:	c8 01       	movw	r24, r16
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <__vector_25>:
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     8d8:	89 df       	rcall	.-238    	; 0x7ec <dxl_hal_put_queue>
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <serial_write>:
     900:	ac 01       	movw	r20, r24
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0c c0       	rjmp	.+24     	; 0x920 <serial_write+0x20>
     908:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     90c:	85 ff       	sbrs	r24, 5
     90e:	fc cf       	rjmp	.-8      	; 0x908 <serial_write+0x8>
     910:	fa 01       	movw	r30, r20
     912:	e2 0f       	add	r30, r18
     914:	f3 1f       	adc	r31, r19
     916:	80 81       	ld	r24, Z
     918:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	8c f3       	brlt	.-30     	; 0x908 <serial_write+0x8>
     926:	08 95       	ret

00000928 <serial_read>:
     928:	dc 01       	movw	r26, r24
     92a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     92e:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     932:	98 17       	cp	r25, r24
     934:	11 f4       	brne	.+4      	; 0x93a <serial_read+0x12>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     93e:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     942:	98 17       	cp	r25, r24
     944:	19 f4       	brne	.+6      	; 0x94c <serial_read+0x24>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <serial_read+0x52>
     94c:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     950:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     954:	98 17       	cp	r25, r24
     956:	38 f4       	brcc	.+14     	; 0x966 <serial_read+0x3e>
     958:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     95c:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <serial_read+0x4e>
     966:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     96a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	20 58       	subi	r18, 0x80	; 128
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	29 1b       	sub	r18, r25
     978:	31 09       	sbc	r19, r1
     97a:	a9 01       	movw	r20, r18
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	0c f4       	brge	.+2      	; 0x984 <serial_read+0x5c>
     982:	ab 01       	movw	r20, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	20 c0       	rjmp	.+64     	; 0x9ca <serial_read+0xa2>
     98a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     98e:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     992:	98 17       	cp	r25, r24
     994:	11 f4       	brne	.+4      	; 0x99a <serial_read+0x72>
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	12 c0       	rjmp	.+36     	; 0x9be <serial_read+0x96>
     99a:	e0 91 54 0b 	lds	r30, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ec 52       	subi	r30, 0x2C	; 44
     9a2:	f5 4f       	sbci	r31, 0xF5	; 245
     9a4:	90 81       	ld	r25, Z
     9a6:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     9aa:	8f 37       	cpi	r24, 0x7F	; 127
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <serial_read+0x8c>
     9ae:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <gbSerialBufferHead>
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <serial_read+0x96>
     9b4:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <gbSerialBufferHead>
     9be:	fd 01       	movw	r30, r26
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	90 83       	st	Z, r25
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	24 17       	cp	r18, r20
     9cc:	35 07       	cpc	r19, r21
     9ce:	ec f2       	brlt	.-70     	; 0x98a <serial_read+0x62>
     9d0:	84 2f       	mov	r24, r20
     9d2:	08 95       	ret

000009d4 <serial_get_qstate>:
     9d4:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     9d8:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     9dc:	98 17       	cp	r25, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <serial_get_qstate+0x12>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <serial_get_qstate+0x40>
     9e6:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     9ea:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     9ee:	98 17       	cp	r25, r24
     9f0:	38 f4       	brcc	.+14     	; 0xa00 <serial_get_qstate+0x2c>
     9f2:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     9f6:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <serial_get_qstate+0x3c>
     a00:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a04:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	20 58       	subi	r18, 0x80	; 128
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	29 1b       	sub	r18, r25
     a12:	31 09       	sbc	r19, r1
     a14:	c9 01       	movw	r24, r18
     a16:	08 95       	ret

00000a18 <serial_put_queue>:
     a18:	48 2f       	mov	r20, r24
     a1a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a1e:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a22:	98 17       	cp	r25, r24
     a24:	d1 f0       	breq	.+52     	; 0xa5a <serial_put_queue+0x42>
     a26:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a2a:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a2e:	98 17       	cp	r25, r24
     a30:	38 f4       	brcc	.+14     	; 0xa40 <serial_put_queue+0x28>
     a32:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a36:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <serial_put_queue+0x38>
     a40:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a44:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 58       	subi	r18, 0x80	; 128
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	29 1b       	sub	r18, r25
     a52:	31 09       	sbc	r19, r1
     a54:	2f 37       	cpi	r18, 0x7F	; 127
     a56:	31 05       	cpc	r19, r1
     a58:	91 f0       	breq	.+36     	; 0xa7e <serial_put_queue+0x66>
     a5a:	e0 91 55 0b 	lds	r30, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ec 52       	subi	r30, 0x2C	; 44
     a62:	f5 4f       	sbci	r31, 0xF5	; 245
     a64:	40 83       	st	Z, r20
     a66:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a6a:	8f 37       	cpi	r24, 0x7F	; 127
     a6c:	19 f4       	brne	.+6      	; 0xa74 <serial_put_queue+0x5c>
     a6e:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <gbSerialBufferTail>
     a72:	08 95       	ret
     a74:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 55 0b 	sts	0x0B55, r24	; 0x800b55 <gbSerialBufferTail>
     a7e:	08 95       	ret

00000a80 <serial_get_queue>:
     a80:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a84:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     a88:	98 17       	cp	r25, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <serial_get_queue+0x10>
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <serial_get_queue+0x34>
     a90:	e0 91 54 0b 	lds	r30, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ec 52       	subi	r30, 0x2C	; 44
     a98:	f5 4f       	sbci	r31, 0xF5	; 245
     a9a:	e0 81       	ld	r30, Z
     a9c:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     aa0:	8f 37       	cpi	r24, 0x7F	; 127
     aa2:	19 f4       	brne	.+6      	; 0xaaa <serial_get_queue+0x2a>
     aa4:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <gbSerialBufferHead>
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <serial_get_queue+0x34>
     aaa:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <gbSerialBufferHead>
     ab4:	8e 2f       	mov	r24, r30
     ab6:	08 95       	ret

00000ab8 <__vector_36>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     ae2:	9a df       	rcall	.-204    	; 0xa18 <serial_put_queue>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <std_putchar>:
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	98 2f       	mov	r25, r24
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	99 f4       	brne	.+38     	; 0xb42 <std_putchar+0x38>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	fe 01       	movw	r30, r28
     b24:	31 96       	adiw	r30, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	2d 5f       	subi	r18, 0xFD	; 253
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b30:	85 ff       	sbrs	r24, 5
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <std_putchar+0x22>
     b34:	81 91       	ld	r24, Z+
     b36:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	b1 f7       	brne	.-20     	; 0xb2c <std_putchar+0x22>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <std_putchar+0x44>
     b42:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <std_putchar+0x38>
     b4a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <std_getchar>:
     b5c:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     b60:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     b64:	98 17       	cp	r25, r24
     b66:	d1 f3       	breq	.-12     	; 0xb5c <std_getchar>
     b68:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     b6c:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     b70:	98 17       	cp	r25, r24
     b72:	38 f4       	brcc	.+14     	; 0xb82 <std_getchar+0x26>
     b74:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     b78:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <std_getchar+0x36>
     b82:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     b86:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 58       	subi	r18, 0x80	; 128
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	29 1b       	sub	r18, r25
     b94:	31 09       	sbc	r19, r1
     b96:	23 2b       	or	r18, r19
     b98:	09 f3       	breq	.-62     	; 0xb5c <std_getchar>
     b9a:	90 91 54 0b 	lds	r25, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     b9e:	80 91 55 0b 	lds	r24, 0x0B55	; 0x800b55 <gbSerialBufferTail>
     ba2:	98 17       	cp	r25, r24
     ba4:	11 f4       	brne	.+4      	; 0xbaa <std_getchar+0x4e>
     ba6:	ef ef       	ldi	r30, 0xFF	; 255
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <std_getchar+0x78>
     baa:	e0 91 54 0b 	lds	r30, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 52       	subi	r30, 0x2C	; 44
     bb2:	f5 4f       	sbci	r31, 0xF5	; 245
     bb4:	e0 81       	ld	r30, Z
     bb6:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     bba:	8f 37       	cpi	r24, 0x7F	; 127
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <std_getchar+0x68>
     bbe:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <gbSerialBufferHead>
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <std_getchar+0x72>
     bc4:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <gbSerialBufferHead>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <gbSerialBufferHead>
     bce:	ed 30       	cpi	r30, 0x0D	; 13
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <std_getchar+0x78>
     bd2:	ea e0       	ldi	r30, 0x0A	; 10
     bd4:	8e 2f       	mov	r24, r30
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <serial_initialize>:
     bda:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	74 e2       	ldi	r23, 0x24	; 36
     be6:	84 ef       	ldi	r24, 0xF4	; 244
     be8:	99 e4       	ldi	r25, 0x49	; 73
     bea:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divsf3>
     bee:	0e 94 c3 11 	call	0x2386	; 0x2386 <__fixunssfsi>
     bf2:	61 50       	subi	r22, 0x01	; 1
     bf4:	70 40       	sbci	r23, 0x00	; 0
     bf6:	22 e4       	ldi	r18, 0x42	; 66
     bf8:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     bfc:	28 e9       	ldi	r18, 0x98	; 152
     bfe:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     c02:	26 e0       	ldi	r18, 0x06	; 6
     c04:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     c0e:	10 92 54 0b 	sts	0x0B54, r1	; 0x800b54 <gbSerialBufferHead>
     c12:	10 92 55 0b 	sts	0x0B55, r1	; 0x800b55 <gbSerialBufferTail>
     c16:	27 2f       	mov	r18, r23
     c18:	33 27       	eor	r19, r19
     c1a:	27 fd       	sbrc	r18, 7
     c1c:	3a 95       	dec	r19
     c1e:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     c22:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     c26:	72 98       	cbi	0x0e, 2	; 14
     c28:	73 9a       	sbi	0x0e, 3	; 14
     c2a:	85 e8       	ldi	r24, 0x85	; 133
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	6e ea       	ldi	r22, 0xAE	; 174
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	0e 94 57 13 	call	0x26ae	; 0x26ae <fdevopen>
     c36:	90 93 57 0b 	sts	0x0B57, r25	; 0x800b57 <device+0x1>
     c3a:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <device>
     c3e:	08 95       	ret

00000c40 <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     c40:	88 eb       	ldi	r24, 0xB8	; 184
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	71 ee       	ldi	r23, 0xE1	; 225
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	c4 df       	rcall	.-120    	; 0xbda <serial_initialize>
     c52:	78 94       	sei
     c54:	86 e8       	ldi	r24, 0x86	; 134
     c56:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c60:	08 95       	ret

00000c62 <sensorTest>:
     c62:	9c 01       	movw	r18, r24
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	91 05       	cpc	r25, r1
     c68:	51 f0       	breq	.+20     	; 0xc7e <sensorTest+0x1c>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	91 05       	cpc	r25, r1
     c6e:	61 f0       	breq	.+24     	; 0xc88 <sensorTest+0x26>
     c70:	89 2b       	or	r24, r25
     c72:	71 f4       	brne	.+28     	; 0xc90 <sensorTest+0x2e>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c7a:	17 98       	cbi	0x02, 7	; 2
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <sensorTest+0x2e>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c84:	16 98       	cbi	0x02, 6	; 2
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <sensorTest+0x2e>
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     c8e:	15 98       	cbi	0x02, 5	; 2
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	8a 95       	dec	r24
     c94:	f1 f7       	brne	.-4      	; 0xc92 <sensorTest+0x30>
     c96:	ea e7       	ldi	r30, 0x7A	; 122
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	80 83       	st	Z, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	80 64       	ori	r24, 0x40	; 64
     ca4:	80 83       	st	Z, r24
     ca6:	90 81       	ld	r25, Z
     ca8:	94 ff       	sbrs	r25, 4
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <sensorTest+0x44>
     cac:	8e ef       	ldi	r24, 0xFE	; 254
     cae:	82 b9       	out	0x02, r24	; 2
     cb0:	21 30       	cpi	r18, 0x01	; 1
     cb2:	31 05       	cpc	r19, r1
     cb4:	59 f0       	breq	.+22     	; 0xccc <sensorTest+0x6a>
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	79 f0       	breq	.+30     	; 0xcda <sensorTest+0x78>
     cbc:	23 2b       	or	r18, r19
     cbe:	99 f4       	brne	.+38     	; 0xce6 <sensorTest+0x84>
     cc0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     cc4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     cc8:	37 d7       	rcall	.+3694   	; 0x1b38 <setGyroX>
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <sensorTest+0x84>
     ccc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     cd0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     cd4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <setGyroY>
     cd8:	06 c0       	rjmp	.+12     	; 0xce6 <sensorTest+0x84>
     cda:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     cde:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     ce2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <setGyroZ>
     ce6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     cea:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     cee:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <gyroTemp>
     cf2:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <gyroTemp+0x1>
     cf6:	28 0f       	add	r18, r24
     cf8:	39 1f       	adc	r19, r25
     cfa:	30 93 5f 0b 	sts	0x0B5F, r19	; 0x800b5f <gyroTemp+0x1>
     cfe:	20 93 5e 0b 	sts	0x0B5E, r18	; 0x800b5e <gyroTemp>
     d02:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <gyroCount>
     d06:	90 91 5d 0b 	lds	r25, 0x0B5D	; 0x800b5d <gyroCount+0x1>
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	90 93 5d 0b 	sts	0x0B5D, r25	; 0x800b5d <gyroCount+0x1>
     d10:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <gyroCount>
     d14:	05 97       	sbiw	r24, 0x05	; 5
     d16:	a4 f0       	brlt	.+40     	; 0xd40 <sensorTest+0xde>
     d18:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <gyroValue>
     d1c:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <gyroValue+0x1>
     d20:	90 93 63 0b 	sts	0x0B63, r25	; 0x800b63 <preGyroValue+0x1>
     d24:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <preGyroValue>
     d28:	30 93 61 0b 	sts	0x0B61, r19	; 0x800b61 <gyroValue+0x1>
     d2c:	20 93 60 0b 	sts	0x0B60, r18	; 0x800b60 <gyroValue>
     d30:	10 92 5d 0b 	sts	0x0B5D, r1	; 0x800b5d <gyroCount+0x1>
     d34:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <gyroCount>
     d38:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <gyroTemp+0x1>
     d3c:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <gyroTemp>
     d40:	08 95       	ret

00000d42 <sendAck>:
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	87 ec       	ldi	r24, 0xC7	; 199
     d48:	95 e0       	ldi	r25, 0x05	; 5
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	08 95       	ret

00000d5c <MotorInit>:
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	c4 db       	rcall	.-2168   	; 0x4ee <dxl_initialize>
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	6f e2       	ldi	r22, 0x2F	; 47
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	8f e1       	ldi	r24, 0x1F	; 31
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	41 db       	rcall	.-2430   	; 0x3f6 <dxl_write_word>
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	60 e2       	ldi	r22, 0x20	; 32
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	8e ef       	ldi	r24, 0xFE	; 254
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	3a db       	rcall	.-2444   	; 0x3f6 <dxl_write_word>
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	68 e1       	ldi	r22, 0x18	; 24
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	8e ef       	ldi	r24, 0xFE	; 254
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	6b db       	rcall	.-2346   	; 0x466 <dxl_write_byte>
     d90:	2f e3       	ldi	r18, 0x3F	; 63
     d92:	8d e0       	ldi	r24, 0x0D	; 13
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	80 40       	sbci	r24, 0x00	; 0
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <MotorInit+0x3a>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <MotorInit+0x44>
     da0:	00 00       	nop
     da2:	08 95       	ret

00000da4 <split>:
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	00 d0       	rcall	.+0      	; 0xdae <split+0xa>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	20 e2       	ldi	r18, 0x20	; 32
     db4:	3c e2       	ldi	r19, 0x2C	; 44
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	29 83       	std	Y+1, r18	; 0x01
     dba:	3a 83       	std	Y+2, r19	; 0x02
     dbc:	4b 83       	std	Y+3, r20	; 0x03
     dbe:	be 01       	movw	r22, r28
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	0e 94 25 13 	call	0x264a	; 0x264a <strtok>
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	89 f0       	breq	.+34     	; 0xdee <split+0x4a>
     dcc:	06 e7       	ldi	r16, 0x76	; 118
     dce:	1b e0       	ldi	r17, 0x0B	; 11
     dd0:	0e 94 08 13 	call	0x2610	; 0x2610 <atoi>
     dd4:	f8 01       	movw	r30, r16
     dd6:	81 93       	st	Z+, r24
     dd8:	91 93       	st	Z+, r25
     dda:	8f 01       	movw	r16, r30
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 25 13 	call	0x264a	; 0x264a <strtok>
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	89 f7       	brne	.-30     	; 0xdd0 <split+0x2c>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <setAngle>:
     dfe:	20 91 78 0b 	lds	r18, 0x0B78	; 0x800b78 <serCmd+0x2>
     e02:	30 91 79 0b 	lds	r19, 0x0B79	; 0x800b79 <serCmd+0x3>
     e06:	22 33       	cpi	r18, 0x32	; 50
     e08:	31 05       	cpc	r19, r1
     e0a:	cc f4       	brge	.+50     	; 0xe3e <setAngle+0x40>
     e0c:	aa e7       	ldi	r26, 0x7A	; 122
     e0e:	bb e0       	ldi	r27, 0x0B	; 11
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	c9 01       	movw	r24, r18
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	28 0f       	add	r18, r24
     e24:	39 1f       	adc	r19, r25
     e26:	f9 01       	movw	r30, r18
     e28:	e4 5f       	subi	r30, 0xF4	; 244
     e2a:	fd 4f       	sbci	r31, 0xFD	; 253
     e2c:	22 5e       	subi	r18, 0xE2	; 226
     e2e:	3d 4f       	sbci	r19, 0xFD	; 253
     e30:	8d 91       	ld	r24, X+
     e32:	9d 91       	ld	r25, X+
     e34:	81 93       	st	Z+, r24
     e36:	91 93       	st	Z+, r25
     e38:	e2 17       	cp	r30, r18
     e3a:	f3 07       	cpc	r31, r19
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <setAngle+0x32>
     e3e:	08 95       	ret

00000e40 <getAngle>:
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	60 97       	sbiw	r28, 0x10	; 16
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	fe 01       	movw	r30, r28
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	80 e1       	ldi	r24, 0x10	; 16
     e66:	df 01       	movw	r26, r30
     e68:	1d 92       	st	X+, r1
     e6a:	8a 95       	dec	r24
     e6c:	e9 f7       	brne	.-6      	; 0xe68 <getAngle+0x28>
     e6e:	00 e9       	ldi	r16, 0x90	; 144
     e70:	15 e0       	ldi	r17, 0x05	; 5
     e72:	7f 01       	movw	r14, r30
     e74:	0f 2e       	mov	r0, r31
     e76:	f0 ea       	ldi	r31, 0xA0	; 160
     e78:	cf 2e       	mov	r12, r31
     e7a:	f5 e0       	ldi	r31, 0x05	; 5
     e7c:	df 2e       	mov	r13, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	64 e2       	ldi	r22, 0x24	; 36
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	f8 01       	movw	r30, r16
     e86:	81 91       	ld	r24, Z+
     e88:	91 91       	ld	r25, Z+
     e8a:	8f 01       	movw	r16, r30
     e8c:	ce da       	rcall	.-2660   	; 0x42a <dxl_read_word>
     e8e:	d7 01       	movw	r26, r14
     e90:	8d 93       	st	X+, r24
     e92:	9d 93       	st	X+, r25
     e94:	7d 01       	movw	r14, r26
     e96:	0c 15       	cp	r16, r12
     e98:	1d 05       	cpc	r17, r13
     e9a:	91 f7       	brne	.-28     	; 0xe80 <getAngle+0x40>
     e9c:	88 89       	ldd	r24, Y+16	; 0x10
     e9e:	8f 93       	push	r24
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	8f 93       	push	r24
     ea4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea6:	8f 93       	push	r24
     ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eaa:	8f 93       	push	r24
     eac:	8c 85       	ldd	r24, Y+12	; 0x0c
     eae:	8f 93       	push	r24
     eb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb2:	8f 93       	push	r24
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	8f 93       	push	r24
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	8f 93       	push	r24
     ebc:	88 85       	ldd	r24, Y+8	; 0x08
     ebe:	8f 93       	push	r24
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	8f 93       	push	r24
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	8f 93       	push	r24
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	8f 93       	push	r24
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	8f 93       	push	r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	8f 93       	push	r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	8f 93       	push	r24
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	8f 93       	push	r24
     edc:	1f 92       	push	r1
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	8f 93       	push	r24
     ee2:	8c ec       	ldi	r24, 0xCC	; 204
     ee4:	95 e0       	ldi	r25, 0x05	; 5
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	60 96       	adiw	r28, 0x10	; 16
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	08 95       	ret

00000f16 <sendActAngle>:
     f16:	fc 01       	movw	r30, r24
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	9f 01       	movw	r18, r30
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	e4 5f       	subi	r30, 0xF4	; 244
     f30:	fd 4f       	sbci	r31, 0xFD	; 253
     f32:	21 8d       	ldd	r18, Z+25	; 0x19
     f34:	2f 93       	push	r18
     f36:	20 8d       	ldd	r18, Z+24	; 0x18
     f38:	2f 93       	push	r18
     f3a:	27 89       	ldd	r18, Z+23	; 0x17
     f3c:	2f 93       	push	r18
     f3e:	26 89       	ldd	r18, Z+22	; 0x16
     f40:	2f 93       	push	r18
     f42:	25 89       	ldd	r18, Z+21	; 0x15
     f44:	2f 93       	push	r18
     f46:	24 89       	ldd	r18, Z+20	; 0x14
     f48:	2f 93       	push	r18
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	dc 01       	movw	r26, r24
     f52:	aa 0f       	add	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	aa 0f       	add	r26, r26
     f58:	bb 1f       	adc	r27, r27
     f5a:	aa 0f       	add	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	8a 0f       	add	r24, r26
     f60:	9b 1f       	adc	r25, r27
     f62:	dc 01       	movw	r26, r24
     f64:	a4 5f       	subi	r26, 0xF4	; 244
     f66:	bd 4f       	sbci	r27, 0xFD	; 253
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	8c 91       	ld	r24, X
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	8f 93       	push	r24
     f70:	8c 91       	ld	r24, X
     f72:	8f 93       	push	r24
     f74:	81 89       	ldd	r24, Z+17	; 0x11
     f76:	8f 93       	push	r24
     f78:	80 89       	ldd	r24, Z+16	; 0x10
     f7a:	8f 93       	push	r24
     f7c:	87 85       	ldd	r24, Z+15	; 0x0f
     f7e:	8f 93       	push	r24
     f80:	86 85       	ldd	r24, Z+14	; 0x0e
     f82:	8f 93       	push	r24
     f84:	85 85       	ldd	r24, Z+13	; 0x0d
     f86:	8f 93       	push	r24
     f88:	84 85       	ldd	r24, Z+12	; 0x0c
     f8a:	8f 93       	push	r24
     f8c:	83 85       	ldd	r24, Z+11	; 0x0b
     f8e:	8f 93       	push	r24
     f90:	82 85       	ldd	r24, Z+10	; 0x0a
     f92:	8f 93       	push	r24
     f94:	81 85       	ldd	r24, Z+9	; 0x09
     f96:	8f 93       	push	r24
     f98:	80 85       	ldd	r24, Z+8	; 0x08
     f9a:	8f 93       	push	r24
     f9c:	87 81       	ldd	r24, Z+7	; 0x07
     f9e:	8f 93       	push	r24
     fa0:	86 81       	ldd	r24, Z+6	; 0x06
     fa2:	8f 93       	push	r24
     fa4:	85 81       	ldd	r24, Z+5	; 0x05
     fa6:	8f 93       	push	r24
     fa8:	84 81       	ldd	r24, Z+4	; 0x04
     faa:	8f 93       	push	r24
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	8f 93       	push	r24
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	8f 93       	push	r24
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	8f 93       	push	r24
     fb8:	80 81       	ld	r24, Z
     fba:	8f 93       	push	r24
     fbc:	1f 92       	push	r1
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	8f 93       	push	r24
     fc2:	81 ef       	ldi	r24, 0xF1	; 241
     fc4:	95 e0       	ldi	r25, 0x05	; 5
     fc6:	9f 93       	push	r25
     fc8:	8f 93       	push	r24
     fca:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
     fce:	8d b7       	in	r24, 0x3d	; 61
     fd0:	9e b7       	in	r25, 0x3e	; 62
     fd2:	4e 96       	adiw	r24, 0x1e	; 30
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	9e bf       	out	0x3e, r25	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	8d bf       	out	0x3d, r24	; 61
     fde:	08 95       	ret

00000fe0 <getLoad>:
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	60 97       	sbiw	r28, 0x10	; 16
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	fe 01       	movw	r30, r28
    1002:	31 96       	adiw	r30, 0x01	; 1
    1004:	80 e1       	ldi	r24, 0x10	; 16
    1006:	df 01       	movw	r26, r30
    1008:	1d 92       	st	X+, r1
    100a:	8a 95       	dec	r24
    100c:	e9 f7       	brne	.-6      	; 0x1008 <getLoad+0x28>
    100e:	00 e9       	ldi	r16, 0x90	; 144
    1010:	15 e0       	ldi	r17, 0x05	; 5
    1012:	7f 01       	movw	r14, r30
    1014:	0f 2e       	mov	r0, r31
    1016:	f0 ea       	ldi	r31, 0xA0	; 160
    1018:	cf 2e       	mov	r12, r31
    101a:	f5 e0       	ldi	r31, 0x05	; 5
    101c:	df 2e       	mov	r13, r31
    101e:	f0 2d       	mov	r31, r0
    1020:	68 e2       	ldi	r22, 0x28	; 40
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	f8 01       	movw	r30, r16
    1026:	81 91       	ld	r24, Z+
    1028:	91 91       	ld	r25, Z+
    102a:	8f 01       	movw	r16, r30
    102c:	fe d9       	rcall	.-3076   	; 0x42a <dxl_read_word>
    102e:	d7 01       	movw	r26, r14
    1030:	8d 93       	st	X+, r24
    1032:	9d 93       	st	X+, r25
    1034:	7d 01       	movw	r14, r26
    1036:	0c 15       	cp	r16, r12
    1038:	1d 05       	cpc	r17, r13
    103a:	91 f7       	brne	.-28     	; 0x1020 <getLoad+0x40>
    103c:	88 8d       	ldd	r24, Y+24	; 0x18
    103e:	8f 93       	push	r24
    1040:	8f 89       	ldd	r24, Y+23	; 0x17
    1042:	8f 93       	push	r24
    1044:	8e 89       	ldd	r24, Y+22	; 0x16
    1046:	8f 93       	push	r24
    1048:	8d 89       	ldd	r24, Y+21	; 0x15
    104a:	8f 93       	push	r24
    104c:	8c 89       	ldd	r24, Y+20	; 0x14
    104e:	8f 93       	push	r24
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	8f 93       	push	r24
    1054:	8a 89       	ldd	r24, Y+18	; 0x12
    1056:	8f 93       	push	r24
    1058:	89 89       	ldd	r24, Y+17	; 0x11
    105a:	8f 93       	push	r24
    105c:	88 89       	ldd	r24, Y+16	; 0x10
    105e:	8f 93       	push	r24
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	8f 93       	push	r24
    1064:	8e 85       	ldd	r24, Y+14	; 0x0e
    1066:	8f 93       	push	r24
    1068:	8d 85       	ldd	r24, Y+13	; 0x0d
    106a:	8f 93       	push	r24
    106c:	8c 85       	ldd	r24, Y+12	; 0x0c
    106e:	8f 93       	push	r24
    1070:	8b 85       	ldd	r24, Y+11	; 0x0b
    1072:	8f 93       	push	r24
    1074:	8a 85       	ldd	r24, Y+10	; 0x0a
    1076:	8f 93       	push	r24
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	8f 93       	push	r24
    107c:	88 85       	ldd	r24, Y+8	; 0x08
    107e:	8f 93       	push	r24
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	8f 93       	push	r24
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	8f 93       	push	r24
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	8f 93       	push	r24
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	8f 93       	push	r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	8f 93       	push	r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	8f 93       	push	r24
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	8f 93       	push	r24
    109c:	1f 92       	push	r1
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	8f 93       	push	r24
    10a2:	8c e1       	ldi	r24, 0x1C	; 28
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	9f 93       	push	r25
    10a8:	8f 93       	push	r24
    10aa:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	60 96       	adiw	r28, 0x10	; 16
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	08 95       	ret

000010d6 <getVoltage>:
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	60 97       	sbiw	r28, 0x10	; 16
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	fe 01       	movw	r30, r28
    10f8:	31 96       	adiw	r30, 0x01	; 1
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	df 01       	movw	r26, r30
    10fe:	1d 92       	st	X+, r1
    1100:	8a 95       	dec	r24
    1102:	e9 f7       	brne	.-6      	; 0x10fe <getVoltage+0x28>
    1104:	00 e9       	ldi	r16, 0x90	; 144
    1106:	15 e0       	ldi	r17, 0x05	; 5
    1108:	7f 01       	movw	r14, r30
    110a:	0f 2e       	mov	r0, r31
    110c:	f0 ea       	ldi	r31, 0xA0	; 160
    110e:	cf 2e       	mov	r12, r31
    1110:	f5 e0       	ldi	r31, 0x05	; 5
    1112:	df 2e       	mov	r13, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	6a e2       	ldi	r22, 0x2A	; 42
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	f8 01       	movw	r30, r16
    111c:	81 91       	ld	r24, Z+
    111e:	91 91       	ld	r25, Z+
    1120:	8f 01       	movw	r16, r30
    1122:	83 d9       	rcall	.-3322   	; 0x42a <dxl_read_word>
    1124:	22 d8       	rcall	.-4028   	; 0x16a <dxl_get_lowbyte>
    1126:	d7 01       	movw	r26, r14
    1128:	8d 93       	st	X+, r24
    112a:	9d 93       	st	X+, r25
    112c:	7d 01       	movw	r14, r26
    112e:	0c 15       	cp	r16, r12
    1130:	1d 05       	cpc	r17, r13
    1132:	89 f7       	brne	.-30     	; 0x1116 <getVoltage+0x40>
    1134:	88 8d       	ldd	r24, Y+24	; 0x18
    1136:	8f 93       	push	r24
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	8f 93       	push	r24
    113c:	8e 89       	ldd	r24, Y+22	; 0x16
    113e:	8f 93       	push	r24
    1140:	8d 89       	ldd	r24, Y+21	; 0x15
    1142:	8f 93       	push	r24
    1144:	8c 89       	ldd	r24, Y+20	; 0x14
    1146:	8f 93       	push	r24
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	8f 93       	push	r24
    114c:	8a 89       	ldd	r24, Y+18	; 0x12
    114e:	8f 93       	push	r24
    1150:	89 89       	ldd	r24, Y+17	; 0x11
    1152:	8f 93       	push	r24
    1154:	88 89       	ldd	r24, Y+16	; 0x10
    1156:	8f 93       	push	r24
    1158:	8f 85       	ldd	r24, Y+15	; 0x0f
    115a:	8f 93       	push	r24
    115c:	8e 85       	ldd	r24, Y+14	; 0x0e
    115e:	8f 93       	push	r24
    1160:	8d 85       	ldd	r24, Y+13	; 0x0d
    1162:	8f 93       	push	r24
    1164:	8c 85       	ldd	r24, Y+12	; 0x0c
    1166:	8f 93       	push	r24
    1168:	8b 85       	ldd	r24, Y+11	; 0x0b
    116a:	8f 93       	push	r24
    116c:	8a 85       	ldd	r24, Y+10	; 0x0a
    116e:	8f 93       	push	r24
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	8f 93       	push	r24
    1174:	88 85       	ldd	r24, Y+8	; 0x08
    1176:	8f 93       	push	r24
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	8f 93       	push	r24
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	8f 93       	push	r24
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	8f 93       	push	r24
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	8f 93       	push	r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	8f 93       	push	r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	8f 93       	push	r24
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	8f 93       	push	r24
    1194:	1f 92       	push	r1
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	8f 93       	push	r24
    119a:	8c e1       	ldi	r24, 0x1C	; 28
    119c:	96 e0       	ldi	r25, 0x06	; 6
    119e:	9f 93       	push	r25
    11a0:	8f 93       	push	r24
    11a2:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	60 96       	adiw	r28, 0x10	; 16
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	08 95       	ret

000011ce <startMotion>:
    11ce:	90 93 6d 0b 	sts	0x0B6D, r25	; 0x800b6d <nextMotionNumber+0x1>
    11d2:	80 93 6c 0b 	sts	0x0B6C, r24	; 0x800b6c <nextMotionNumber>
    11d6:	70 93 6b 0b 	sts	0x0B6B, r23	; 0x800b6b <nextMotionTimes+0x1>
    11da:	60 93 6a 0b 	sts	0x0B6A, r22	; 0x800b6a <nextMotionTimes>
    11de:	20 91 72 0b 	lds	r18, 0x0B72	; 0x800b72 <motionTimes>
    11e2:	30 91 73 0b 	lds	r19, 0x0B73	; 0x800b73 <motionTimes+0x1>
    11e6:	23 2b       	or	r18, r19
    11e8:	61 f4       	brne	.+24     	; 0x1202 <startMotion+0x34>
    11ea:	90 93 75 0b 	sts	0x0B75, r25	; 0x800b75 <motionNumber+0x1>
    11ee:	80 93 74 0b 	sts	0x0B74, r24	; 0x800b74 <motionNumber>
    11f2:	70 93 73 0b 	sts	0x0B73, r23	; 0x800b73 <motionTimes+0x1>
    11f6:	60 93 72 0b 	sts	0x0B72, r22	; 0x800b72 <motionTimes>
    11fa:	10 92 6b 0b 	sts	0x0B6B, r1	; 0x800b6b <nextMotionTimes+0x1>
    11fe:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <nextMotionTimes>
    1202:	08 95       	ret

00001204 <forceMotion>:
    1204:	90 93 75 0b 	sts	0x0B75, r25	; 0x800b75 <motionNumber+0x1>
    1208:	80 93 74 0b 	sts	0x0B74, r24	; 0x800b74 <motionNumber>
    120c:	70 93 73 0b 	sts	0x0B73, r23	; 0x800b73 <motionTimes+0x1>
    1210:	60 93 72 0b 	sts	0x0B72, r22	; 0x800b72 <motionTimes>
    1214:	10 92 6b 0b 	sts	0x0B6B, r1	; 0x800b6b <nextMotionTimes+0x1>
    1218:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <nextMotionTimes>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    1224:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    1228:	10 92 71 0b 	sts	0x0B71, r1	; 0x800b71 <motionTime+0x1>
    122c:	10 92 70 0b 	sts	0x0B70, r1	; 0x800b70 <motionTime>
    1230:	08 95       	ret

00001232 <stopMotion>:
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <motionCount+0x1>
    123a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <motionCount>
    123e:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <motionTimes+0x1>
    1242:	10 92 72 0b 	sts	0x0B72, r1	; 0x800b72 <motionTimes>
    1246:	10 92 71 0b 	sts	0x0B71, r1	; 0x800b71 <motionTime+0x1>
    124a:	10 92 70 0b 	sts	0x0B70, r1	; 0x800b70 <motionTime>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <motionFirst+0x1>
    1256:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <motionFirst>
    125a:	08 95       	ret

0000125c <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	21 f4       	brne	.+8      	; 0x1270 <PrintErrorCode+0x14>
	printf("Input voltage error!\n");
    1268:	89 e4       	ldi	r24, 0x49	; 73
    126a:	96 e0       	ldi	r25, 0x06	; 6
    126c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	21 f4       	brne	.+8      	; 0x1284 <PrintErrorCode+0x28>
	printf("Angle limit error!\n");
    127c:	8e e5       	ldi	r24, 0x5E	; 94
    127e:	96 e0       	ldi	r25, 0x06	; 6
    1280:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	21 f4       	brne	.+8      	; 0x1298 <PrintErrorCode+0x3c>
	printf("Overheat error!\n");
    1290:	81 e7       	ldi	r24, 0x71	; 113
    1292:	96 e0       	ldi	r25, 0x06	; 6
    1294:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	21 f4       	brne	.+8      	; 0x12ac <PrintErrorCode+0x50>
	printf("Out of range error!\n");
    12a4:	81 e8       	ldi	r24, 0x81	; 129
    12a6:	96 e0       	ldi	r25, 0x06	; 6
    12a8:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    12ac:	80 e1       	ldi	r24, 0x10	; 16
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <PrintErrorCode+0x64>
	printf("Checksum error!\n");
    12b8:	85 e9       	ldi	r24, 0x95	; 149
    12ba:	96 e0       	ldi	r25, 0x06	; 6
    12bc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <PrintErrorCode+0x78>
	printf("Overload error!\n");
    12cc:	85 ea       	ldi	r24, 0xA5	; 165
    12ce:	96 e0       	ldi	r25, 0x06	; 6
    12d0:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    12d4:	80 e4       	ldi	r24, 0x40	; 64
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	21 f4       	brne	.+8      	; 0x12e8 <PrintErrorCode+0x8c>
	printf("Instruction code error!\n");
    12e0:	85 eb       	ldi	r24, 0xB5	; 181
    12e2:	96 e0       	ldi	r25, 0x06	; 6
    12e4:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
    12e8:	08 95       	ret

000012ea <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	91 05       	cpc	r25, r1
    12ee:	99 f0       	breq	.+38     	; 0x1316 <PrintCommStatus+0x2c>
    12f0:	34 f4       	brge	.+12     	; 0x12fe <PrintCommStatus+0x14>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	91 05       	cpc	r25, r1
    12f6:	51 f0       	breq	.+20     	; 0x130c <PrintCommStatus+0x22>
    12f8:	03 97       	sbiw	r24, 0x03	; 3
    12fa:	91 f0       	breq	.+36     	; 0x1320 <PrintCommStatus+0x36>
    12fc:	25 c0       	rjmp	.+74     	; 0x1348 <PrintCommStatus+0x5e>
    12fe:	86 30       	cpi	r24, 0x06	; 6
    1300:	91 05       	cpc	r25, r1
    1302:	c1 f0       	breq	.+48     	; 0x1334 <PrintCommStatus+0x4a>
    1304:	94 f0       	brlt	.+36     	; 0x132a <PrintCommStatus+0x40>
    1306:	07 97       	sbiw	r24, 0x07	; 7
    1308:	d1 f0       	breq	.+52     	; 0x133e <PrintCommStatus+0x54>
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <PrintCommStatus+0x5e>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    130c:	8d ec       	ldi	r24, 0xCD	; 205
    130e:	96 e0       	ldi	r25, 0x06	; 6
    1310:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    1314:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    1316:	8e ef       	ldi	r24, 0xFE	; 254
    1318:	96 e0       	ldi	r25, 0x06	; 6
    131a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    131e:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    1320:	8a e2       	ldi	r24, 0x2A	; 42
    1322:	97 e0       	ldi	r25, 0x07	; 7
    1324:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    1328:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    132a:	8d e5       	ldi	r24, 0x5D	; 93
    132c:	97 e0       	ldi	r25, 0x07	; 7
    132e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    1332:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    1334:	8a e8       	ldi	r24, 0x8A	; 138
    1336:	97 e0       	ldi	r25, 0x07	; 7
    1338:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    133c:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    133e:	85 eb       	ldi	r24, 0xB5	; 181
    1340:	97 e0       	ldi	r25, 0x07	; 7
    1342:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
		break;
    1346:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    1348:	8e ed       	ldi	r24, 0xDE	; 222
    134a:	97 e0       	ldi	r25, 0x07	; 7
    134c:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <puts>
    1350:	08 95       	ret

00001352 <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	08 2f       	mov	r16, r24
    135c:	19 2f       	mov	r17, r25
    135e:	d6 2f       	mov	r29, r22
    1360:	c7 2f       	mov	r28, r23
	int CommStatus;
	printf( "%d %d\n", id, power );
    1362:	7f 93       	push	r23
    1364:	6f 93       	push	r22
    1366:	9f 93       	push	r25
    1368:	8f 93       	push	r24
    136a:	8a ef       	ldi	r24, 0xFA	; 250
    136c:	97 e0       	ldi	r25, 0x07	; 7
    136e:	9f 93       	push	r25
    1370:	8f 93       	push	r24
    1372:	0e 94 df 13 	call	0x27be	; 0x27be <printf>
		if( CommStatus == COMM_RXSUCCESS )
			PrintErrorCode();
		else
			PrintCommStatus(CommStatus);
	}else{
		dxl_set_txpacket_id(BROADCAST_ID);
    1376:	8e ef       	ldi	r24, 0xFE	; 254
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    137e:	83 e8       	ldi	r24, 0x83	; 131
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1386:	60 e2       	ldi	r22, 0x20	; 32
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    139e:	60 2f       	mov	r22, r16
    13a0:	71 2f       	mov	r23, r17
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    13aa:	8d 2f       	mov	r24, r29
    13ac:	9c 2f       	mov	r25, r28
    13ae:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    13b2:	bc 01       	movw	r22, r24
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    13bc:	8d 2f       	mov	r24, r29
    13be:	9c 2f       	mov	r25, r28
    13c0:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    13c4:	bc 01       	movw	r22, r24
    13c6:	84 e0       	ldi	r24, 0x04	; 4
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    13ce:	87 e0       	ldi	r24, 0x07	; 7
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    13d6:	00 d8       	rcall	.-4096   	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    13d8:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <MotorControl+0xa0>
			PrintErrorCode();
    13ee:	36 df       	rcall	.-404    	; 0x125c <PrintErrorCode>
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <MotorControl+0xa2>
		else
			PrintCommStatus(CommStatus);
    13f2:	7b df       	rcall	.-266    	; 0x12ea <PrintCommStatus>
	}
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    13fe:	2f 92       	push	r2
    1400:	3f 92       	push	r3
    1402:	4f 92       	push	r4
    1404:	5f 92       	push	r5
    1406:	6f 92       	push	r6
    1408:	7f 92       	push	r7
    140a:	8f 92       	push	r8
    140c:	9f 92       	push	r9
    140e:	af 92       	push	r10
    1410:	bf 92       	push	r11
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	ae 97       	sbiw	r28, 0x2e	; 46
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    1432:	82 33       	cpi	r24, 0x32	; 50
    1434:	91 05       	cpc	r25, r1
    1436:	0c f0       	brlt	.+2      	; 0x143a <ServoControl+0x3c>
    1438:	77 c1       	rjmp	.+750    	; 0x1728 <ServoControl+0x32a>
    143a:	9a a7       	std	Y+42, r25	; 0x2a
    143c:	89 a7       	std	Y+41, r24	; 0x29
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    143e:	fe 01       	movw	r30, r28
    1440:	31 96       	adiw	r30, 0x01	; 1
    1442:	80 e1       	ldi	r24, 0x10	; 16
    1444:	df 01       	movw	r26, r30
    1446:	1d 92       	st	X+, r1
    1448:	8a 95       	dec	r24
    144a:	e9 f7       	brne	.-6      	; 0x1446 <ServoControl+0x48>
    144c:	20 e9       	ldi	r18, 0x90	; 144
    144e:	35 e0       	ldi	r19, 0x05	; 5
    1450:	3e a7       	std	Y+46, r19	; 0x2e
    1452:	2d a7       	std	Y+45, r18	; 0x2d
    1454:	29 a5       	ldd	r18, Y+41	; 0x29
    1456:	3a a5       	ldd	r19, Y+42	; 0x2a
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	c9 01       	movw	r24, r18
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	82 0f       	add	r24, r18
    146c:	93 1f       	adc	r25, r19
    146e:	ac 01       	movw	r20, r24
    1470:	44 5f       	subi	r20, 0xF4	; 244
    1472:	5d 4f       	sbci	r21, 0xFD	; 253
    1474:	5c a7       	std	Y+44, r21	; 0x2c
    1476:	4b a7       	std	Y+43, r20	; 0x2b
    1478:	1f 01       	movw	r2, r30
    147a:	5e 01       	movw	r10, r28
    147c:	51 e1       	ldi	r21, 0x11	; 17
    147e:	a5 0e       	add	r10, r21
    1480:	b1 1c       	adc	r11, r1
    1482:	8f 01       	movw	r16, r30
    1484:	cb a4       	ldd	r12, Y+43	; 0x2b
    1486:	dc a4       	ldd	r13, Y+44	; 0x2c
    1488:	0f 2e       	mov	r0, r31
    148a:	f0 e9       	ldi	r31, 0x90	; 144
    148c:	ef 2e       	mov	r14, r31
    148e:	f5 e0       	ldi	r31, 0x05	; 5
    1490:	ff 2e       	mov	r15, r31
    1492:	f0 2d       	mov	r31, r0
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    1494:	81 2c       	mov	r8, r1
    1496:	91 2c       	mov	r9, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    1498:	64 e2       	ldi	r22, 0x24	; 36
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	d7 01       	movw	r26, r14
    149e:	8d 91       	ld	r24, X+
    14a0:	9d 91       	ld	r25, X+
    14a2:	7d 01       	movw	r14, r26
    14a4:	0e 94 15 02 	call	0x42a	; 0x42a <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    14a8:	f6 01       	movw	r30, r12
    14aa:	21 91       	ld	r18, Z+
    14ac:	31 91       	ld	r19, Z+
    14ae:	6f 01       	movw	r12, r30
    14b0:	a9 01       	movw	r20, r18
    14b2:	48 1b       	sub	r20, r24
    14b4:	59 0b       	sbc	r21, r25
    14b6:	ca 01       	movw	r24, r20
		if( angleDiff[i] < 0 ){
    14b8:	99 23       	and	r25, r25
    14ba:	24 f0       	brlt	.+8      	; 0x14c4 <ServoControl+0xc6>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    14bc:	d8 01       	movw	r26, r16
    14be:	4d 93       	st	X+, r20
    14c0:	5c 93       	st	X, r21
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <ServoControl+0xd2>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    14c4:	91 95       	neg	r25
    14c6:	81 95       	neg	r24
    14c8:	91 09       	sbc	r25, r1
    14ca:	f8 01       	movw	r30, r16
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    14d0:	d8 01       	movw	r26, r16
    14d2:	8d 91       	ld	r24, X+
    14d4:	9d 91       	ld	r25, X+
    14d6:	8d 01       	movw	r16, r26
    14d8:	88 16       	cp	r8, r24
    14da:	99 06       	cpc	r9, r25
    14dc:	0c f4       	brge	.+2      	; 0x14e0 <ServoControl+0xe2>
    14de:	4c 01       	movw	r8, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    14e0:	0a 15       	cp	r16, r10
    14e2:	1b 05       	cpc	r17, r11
    14e4:	c9 f6       	brne	.-78     	; 0x1498 <ServoControl+0x9a>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    14e6:	8e 01       	movw	r16, r28
    14e8:	0f 5e       	subi	r16, 0xEF	; 239
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	80 e1       	ldi	r24, 0x10	; 16
    14ee:	f8 01       	movw	r30, r16
    14f0:	11 92       	st	Z+, r1
    14f2:	8a 95       	dec	r24
    14f4:	e9 f7       	brne	.-6      	; 0x14f0 <ServoControl+0xf2>
    14f6:	84 e6       	ldi	r24, 0x64	; 100
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9a 8b       	std	Y+18, r25	; 0x12
    14fc:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    14fe:	e9 a5       	ldd	r30, Y+41	; 0x29
    1500:	fa a5       	ldd	r31, Y+42	; 0x2a
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	cf 01       	movw	r24, r30
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	e4 5f       	subi	r30, 0xF4	; 244
    151a:	fd 4f       	sbci	r31, 0xFD	; 253
    151c:	60 89       	ldd	r22, Z+16	; 0x10
    151e:	71 89       	ldd	r23, Z+17	; 0x11
    1520:	07 2e       	mov	r0, r23
    1522:	00 0c       	add	r0, r0
    1524:	88 0b       	sbc	r24, r24
    1526:	99 0b       	sbc	r25, r25
    1528:	5c d7       	rcall	.+3768   	; 0x23e2 <__floatsisf>
    152a:	69 a3       	std	Y+33, r22	; 0x21
    152c:	7a a3       	std	Y+34, r23	; 0x22
    152e:	8b a3       	std	Y+35, r24	; 0x23
    1530:	9c a3       	std	Y+36, r25	; 0x24
    1532:	58 01       	movw	r10, r16
    1534:	6e 01       	movw	r12, r28
    1536:	f1 e2       	ldi	r31, 0x21	; 33
    1538:	cf 0e       	add	r12, r31
    153a:	d1 1c       	adc	r13, r1
    153c:	94 01       	movw	r18, r8
    153e:	99 0c       	add	r9, r9
    1540:	44 0b       	sbc	r20, r20
    1542:	55 0b       	sbc	r21, r21
    1544:	2d a3       	std	Y+37, r18	; 0x25
    1546:	3e a3       	std	Y+38, r19	; 0x26
    1548:	4f a3       	std	Y+39, r20	; 0x27
    154a:	58 a7       	std	Y+40, r21	; 0x28
		if( speed[i] == 0 ){
			speed[i] = 1;
    154c:	88 24       	eor	r8, r8
    154e:	83 94       	inc	r8
    1550:	91 2c       	mov	r9, r1
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1552:	d1 01       	movw	r26, r2
    1554:	ed 90       	ld	r14, X+
    1556:	fd 90       	ld	r15, X+
    1558:	1d 01       	movw	r2, r26
    155a:	6d a1       	ldd	r22, Y+37	; 0x25
    155c:	7e a1       	ldd	r23, Y+38	; 0x26
    155e:	8f a1       	ldd	r24, Y+39	; 0x27
    1560:	98 a5       	ldd	r25, Y+40	; 0x28
    1562:	3f d7       	rcall	.+3710   	; 0x23e2 <__floatsisf>
    1564:	2b 01       	movw	r4, r22
    1566:	3c 01       	movw	r6, r24
    1568:	b7 01       	movw	r22, r14
    156a:	ff 0c       	add	r15, r15
    156c:	88 0b       	sbc	r24, r24
    156e:	99 0b       	sbc	r25, r25
    1570:	38 d7       	rcall	.+3696   	; 0x23e2 <__floatsisf>
    1572:	a3 01       	movw	r20, r6
    1574:	92 01       	movw	r18, r4
    1576:	9a d6       	rcall	.+3380   	; 0x22ac <__divsf3>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	69 a1       	ldd	r22, Y+33	; 0x21
    157e:	7a a1       	ldd	r23, Y+34	; 0x22
    1580:	8b a1       	ldd	r24, Y+35	; 0x23
    1582:	9c a1       	ldd	r25, Y+36	; 0x24
    1584:	e2 d7       	rcall	.+4036   	; 0x254a <__mulsf3>
    1586:	fa d6       	rcall	.+3572   	; 0x237c <__fixsfsi>
		if( speed[i] == 0 ){
    1588:	61 15       	cp	r22, r1
    158a:	71 05       	cpc	r23, r1
    158c:	21 f0       	breq	.+8      	; 0x1596 <ServoControl+0x198>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    158e:	f8 01       	movw	r30, r16
    1590:	71 83       	std	Z+1, r23	; 0x01
    1592:	60 83       	st	Z, r22
    1594:	03 c0       	rjmp	.+6      	; 0x159c <ServoControl+0x19e>
		if( speed[i] == 0 ){
			speed[i] = 1;
    1596:	d8 01       	movw	r26, r16
    1598:	8d 92       	st	X+, r8
    159a:	9c 92       	st	X, r9
    159c:	0e 5f       	subi	r16, 0xFE	; 254
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    15a0:	0c 15       	cp	r16, r12
    15a2:	1d 05       	cpc	r17, r13
    15a4:	b1 f6       	brne	.-84     	; 0x1552 <ServoControl+0x154>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    15a6:	89 a5       	ldd	r24, Y+41	; 0x29
    15a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	fc 01       	movw	r30, r24
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	8e 0f       	add	r24, r30
    15be:	9f 1f       	adc	r25, r31
    15c0:	fc 01       	movw	r30, r24
    15c2:	e4 5f       	subi	r30, 0xF4	; 244
    15c4:	fd 4f       	sbci	r31, 0xFD	; 253
    15c6:	60 89       	ldd	r22, Z+16	; 0x10
    15c8:	71 89       	ldd	r23, Z+17	; 0x11
    15ca:	8b ef       	ldi	r24, 0xFB	; 251
    15cc:	93 e1       	ldi	r25, 0x13	; 19
    15ce:	a0 d5       	rcall	.+2880   	; 0x2110 <__divmodhi4>
    15d0:	07 2e       	mov	r0, r23
    15d2:	00 0c       	add	r0, r0
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	04 d7       	rcall	.+3592   	; 0x23e2 <__floatsisf>
    15da:	a3 01       	movw	r20, r6
    15dc:	92 01       	movw	r18, r4
    15de:	b5 d7       	rcall	.+3946   	; 0x254a <__mulsf3>
    15e0:	cd d6       	rcall	.+3482   	; 0x237c <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    15e2:	16 16       	cp	r1, r22
    15e4:	17 06       	cpc	r1, r23
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <ServoControl+0x1f4>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    15e8:	70 93 6f 0b 	sts	0x0B6F, r23	; 0x800b6f <movingTime+0x1>
    15ec:	60 93 6e 0b 	sts	0x0B6E, r22	; 0x800b6e <movingTime>
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <ServoControl+0x200>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	90 93 6f 0b 	sts	0x0B6F, r25	; 0x800b6f <movingTime+0x1>
    15fa:	80 93 6e 0b 	sts	0x0B6E, r24	; 0x800b6e <movingTime>
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    15fe:	8e ef       	ldi	r24, 0xFE	; 254
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1606:	83 e8       	ldi	r24, 0x83	; 131
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    160e:	60 e2       	ldi	r22, 0x20	; 32
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    161a:	62 e0       	ldi	r22, 0x02	; 2
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1626:	0f 2e       	mov	r0, r31
    1628:	f0 e9       	ldi	r31, 0x90	; 144
    162a:	cf 2e       	mov	r12, r31
    162c:	f5 e0       	ldi	r31, 0x05	; 5
    162e:	df 2e       	mov	r13, r31
    1630:	f0 2d       	mov	r31, r0
    1632:	02 e0       	ldi	r16, 0x02	; 2
    1634:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1636:	f6 01       	movw	r30, r12
    1638:	61 91       	ld	r22, Z+
    163a:	71 91       	ld	r23, Z+
    163c:	6f 01       	movw	r12, r30
    163e:	c8 01       	movw	r24, r16
    1640:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    1644:	d5 01       	movw	r26, r10
    1646:	ed 90       	ld	r14, X+
    1648:	fd 90       	ld	r15, X+
    164a:	5d 01       	movw	r10, r26
    164c:	c7 01       	movw	r24, r14
    164e:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1652:	bc 01       	movw	r22, r24
    1654:	c8 01       	movw	r24, r16
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    165c:	c7 01       	movw	r24, r14
    165e:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1662:	bc 01       	movw	r22, r24
    1664:	c8 01       	movw	r24, r16
    1666:	02 96       	adiw	r24, 0x02	; 2
    1668:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    166c:	0d 5f       	subi	r16, 0xFD	; 253
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    1670:	0a 31       	cpi	r16, 0x1A	; 26
    1672:	11 05       	cpc	r17, r1
    1674:	01 f7       	brne	.-64     	; 0x1636 <ServoControl+0x238>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    1676:	8c e1       	ldi	r24, 0x1C	; 28
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
	dxl_txrx_packet();
    167e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    1682:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	09 f0       	breq	.+2      	; 0x168e <ServoControl+0x290>
    168c:	4c c0       	rjmp	.+152    	; 0x1726 <ServoControl+0x328>
		PrintErrorCode();
    168e:	e6 dd       	rcall	.-1076   	; 0x125c <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    1690:	8e ef       	ldi	r24, 0xFE	; 254
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1698:	83 e8       	ldi	r24, 0x83	; 131
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    16a0:	6e e1       	ldi	r22, 0x1E	; 30
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    16b8:	02 e0       	ldi	r16, 0x02	; 2
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	cd a4       	ldd	r12, Y+45	; 0x2d
    16be:	de a4       	ldd	r13, Y+46	; 0x2e
    16c0:	eb a4       	ldd	r14, Y+43	; 0x2b
    16c2:	fc a4       	ldd	r15, Y+44	; 0x2c
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    16c4:	f6 01       	movw	r30, r12
    16c6:	61 91       	ld	r22, Z+
    16c8:	71 91       	ld	r23, Z+
    16ca:	6f 01       	movw	r12, r30
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    16d2:	57 01       	movw	r10, r14
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    16d4:	d7 01       	movw	r26, r14
    16d6:	8d 91       	ld	r24, X+
    16d8:	9d 91       	ld	r25, X+
    16da:	7d 01       	movw	r14, r26
    16dc:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    16e0:	bc 01       	movw	r22, r24
    16e2:	c8 01       	movw	r24, r16
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    16ea:	f5 01       	movw	r30, r10
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    16f4:	bc 01       	movw	r22, r24
    16f6:	c8 01       	movw	r24, r16
    16f8:	02 96       	adiw	r24, 0x02	; 2
    16fa:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    16fe:	0d 5f       	subi	r16, 0xFD	; 253
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    1702:	0a 31       	cpi	r16, 0x1A	; 26
    1704:	11 05       	cpc	r17, r1
    1706:	f1 f6       	brne	.-68     	; 0x16c4 <ServoControl+0x2c6>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    1708:	8c e1       	ldi	r24, 0x1C	; 28
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1710:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1714:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	11 f4       	brne	.+4      	; 0x1722 <ServoControl+0x324>
			PrintErrorCode();
    171e:	9e dd       	rcall	.-1220   	; 0x125c <PrintErrorCode>
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <ServoControl+0x32a>
		}else{
			PrintCommStatus(CommStatus);
    1722:	e3 dd       	rcall	.-1082   	; 0x12ea <PrintCommStatus>
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <ServoControl+0x32a>
		}
	}else{
		PrintCommStatus(CommStatus);
    1726:	e1 dd       	rcall	.-1086   	; 0x12ea <PrintCommStatus>
	}
}
    1728:	ae 96       	adiw	r28, 0x2e	; 46
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	8f 90       	pop	r8
    174c:	7f 90       	pop	r7
    174e:	6f 90       	pop	r6
    1750:	5f 90       	pop	r5
    1752:	4f 90       	pop	r4
    1754:	3f 90       	pop	r3
    1756:	2f 90       	pop	r2
    1758:	08 95       	ret

0000175a <main>:
int gyroTemp = 0;
int gyroCount = 0;
int mainCount = 0;

#if 1
int main(void){
    175a:	9f 92       	push	r9
    175c:	af 92       	push	r10
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
	
//	int (*atest)[] = test();
//	int a = atest[0][0];
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    1770:	8c ef       	ldi	r24, 0xFC	; 252
    1772:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    1774:	8e ef       	ldi	r24, 0xFE	; 254
    1776:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    1778:	8f e7       	ldi	r24, 0x7F	; 127
    177a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    177c:	8e e7       	ldi	r24, 0x7E	; 126
    177e:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1780:	80 e7       	ldi	r24, 0x70	; 112
    1782:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1784:	81 e1       	ldi	r24, 0x11	; 17
    1786:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    1788:	e9 da       	rcall	.-2606   	; 0xd5c <MotorInit>
	initSerial();
    178a:	59 d4       	rcall	.+2226   	; 0x203e <initSerial>
	int isFinish = 0;
	int gyro = 0; //45 - 455
	int direction = 0;
	int speed = 0;

    sensorInit();
    178c:	59 da       	rcall	.-2894   	; 0xc40 <sensorInit>
	printf( "### start\r\n");
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	98 e0       	ldi	r25, 0x08	; 8
    1792:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <puts>
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1796:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <isCaptureMode>
    179a:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <isCaptureMode+0x1>
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	41 f4       	brne	.+16     	; 0x17b2 <main+0x58>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	68 e1       	ldi	r22, 0x18	; 24
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	8e ef       	ldi	r24, 0xFE	; 254
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
		sensorTest(2);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    17b2:	0f 2e       	mov	r0, r31
    17b4:	fc e2       	ldi	r31, 0x2C	; 44
    17b6:	9f 2e       	mov	r9, r31
    17b8:	f0 2d       	mov	r31, r0
    17ba:	aa 24       	eor	r10, r10
    17bc:	a3 94       	inc	r10
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    17be:	0f 2e       	mov	r0, r31
    17c0:	fc eb       	ldi	r31, 0xBC	; 188
    17c2:	cf 2e       	mov	r12, r31
    17c4:	f0 2d       	mov	r31, r0
    17c6:	68 94       	set
    17c8:	dd 24       	eor	r13, r13
    17ca:	d1 f8       	bld	r13, 1
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    17cc:	06 e7       	ldi	r16, 0x76	; 118
    17ce:	1b e0       	ldi	r17, 0x0B	; 11
    17d0:	0f 2e       	mov	r0, r31
    17d2:	f0 ea       	ldi	r31, 0xA0	; 160
    17d4:	ff 2e       	mov	r15, r31
    17d6:	f0 2d       	mov	r31, r0
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    17d8:	0f 2e       	mov	r0, r31
    17da:	f0 e5       	ldi	r31, 0x50	; 80
    17dc:	ef 2e       	mov	r14, r31
    17de:	f0 2d       	mov	r31, r0
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
						break;
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
						PORTC = ~(1 << (LED_MAX - 2));
    17e0:	0f 2e       	mov	r0, r31
    17e2:	ff ed       	ldi	r31, 0xDF	; 223
    17e4:	bf 2e       	mov	r11, r31
    17e6:	f0 2d       	mov	r31, r0
    sensorInit();
	printf( "### start\r\n");
	
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	3a da       	rcall	.-2956   	; 0xc62 <sensorTest>
		sensorTest(1);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	37 da       	rcall	.-2962   	; 0xc62 <sensorTest>
		sensorTest(2);
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	34 da       	rcall	.-2968   	; 0xc62 <sensorTest>
		if (gyroValue > 0 && preGyroValue > 0) {
    17fa:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <gyroValue>
    17fe:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <gyroValue+0x1>
    1802:	18 16       	cp	r1, r24
    1804:	19 06       	cpc	r1, r25
    1806:	f4 f4       	brge	.+60     	; 0x1844 <main+0xea>
    1808:	40 91 62 0b 	lds	r20, 0x0B62	; 0x800b62 <preGyroValue>
    180c:	50 91 63 0b 	lds	r21, 0x0B63	; 0x800b63 <preGyroValue+0x1>
    1810:	14 16       	cp	r1, r20
    1812:	15 06       	cpc	r1, r21
    1814:	bc f4       	brge	.+46     	; 0x1844 <main+0xea>
			gyro = preGyroValue - gyroValue;
    1816:	48 1b       	sub	r20, r24
    1818:	59 0b       	sbc	r21, r25
			if(gyro != 0 && gyroValue != 0) {
    181a:	a1 f0       	breq	.+40     	; 0x1844 <main+0xea>
				if (gyro < 0) {
    181c:	1a f0       	brmi	.+6      	; 0x1824 <main+0xca>
					direction = 300;
					speed = ((float)-gyro / (float)410) * 1023;
				}else{
					direction = 700;
    181e:	dc 2d       	mov	r29, r12
    1820:	cd 2d       	mov	r28, r13
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <main+0xce>
		sensorTest(2);
		if (gyroValue > 0 && preGyroValue > 0) {
			gyro = preGyroValue - gyroValue;
			if(gyro != 0 && gyroValue != 0) {
				if (gyro < 0) {
					direction = 300;
    1824:	d9 2d       	mov	r29, r9
    1826:	ca 2d       	mov	r28, r10
				}else{
					direction = 700;
					speed = ((float)gyro / (float)410) * 1023;
				}
				// printf( "### GYRO = %d, SPEED = %d, GOAL = %d\r\n", gyro, speed, direction);
				dxl_write_word( 17, P_GOAL_SPEED_L, gyro );
    1828:	60 e2       	ldi	r22, 0x20	; 32
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	81 e1       	ldi	r24, 0x11	; 17
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dxl_write_word>
				dxl_write_word( 17, P_GOAL_POSITION_L, direction );
    1834:	4d 2f       	mov	r20, r29
    1836:	5c 2f       	mov	r21, r28
    1838:	6e e1       	ldi	r22, 0x1E	; 30
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	81 e1       	ldi	r24, 0x11	; 17
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <dxl_write_word>
		
//        sensorTest(1);
//        sensorTest(2);

//		setMode();
		if (++mainCount > 1000) {
    1844:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <mainCount>
    1848:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <mainCount+0x1>
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	89 3e       	cpi	r24, 0xE9	; 233
    1850:	23 e0       	ldi	r18, 0x03	; 3
    1852:	92 07       	cpc	r25, r18
    1854:	2c f4       	brge	.+10     	; 0x1860 <main+0x106>
    1856:	90 93 5b 0b 	sts	0x0B5B, r25	; 0x800b5b <mainCount+0x1>
    185a:	80 93 5a 0b 	sts	0x0B5A, r24	; 0x800b5a <mainCount>
    185e:	8f c0       	rjmp	.+286    	; 0x197e <main+0x224>
			mainCount = 0;
    1860:	10 92 5b 0b 	sts	0x0B5B, r1	; 0x800b5b <mainCount+0x1>
    1864:	10 92 5a 0b 	sts	0x0B5A, r1	; 0x800b5a <mainCount>
			if( checkSerialRead() > 0 ){
    1868:	f2 d3       	rcall	.+2020   	; 0x204e <checkSerialRead>
    186a:	18 16       	cp	r1, r24
    186c:	19 06       	cpc	r1, r25
    186e:	0c f0       	brlt	.+2      	; 0x1872 <main+0x118>
    1870:	81 c0       	rjmp	.+258    	; 0x1974 <main+0x21a>
				readData = getReadBuffer();
    1872:	3d d4       	rcall	.+2170   	; 0x20ee <getReadBuffer>
    1874:	ec 01       	movw	r28, r24
				if( readData != NULL ){
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	09 f4       	brne	.+2      	; 0x187c <main+0x122>
    187a:	7c c0       	rjmp	.+248    	; 0x1974 <main+0x21a>
	//				printf( "readData=%s\n", &readData[0] );
					split( &readData[0] );
    187c:	93 da       	rcall	.-2778   	; 0xda4 <split>
					switch( serCmd[0] ){
    187e:	f8 01       	movw	r30, r16
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	86 30       	cpi	r24, 0x06	; 6
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <main+0x132>
    188a:	5a c0       	rjmp	.+180    	; 0x1940 <main+0x1e6>
    188c:	94 f4       	brge	.+36     	; 0x18b2 <main+0x158>
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <main+0x13c>
    1894:	42 c0       	rjmp	.+132    	; 0x191a <main+0x1c0>
    1896:	34 f4       	brge	.+12     	; 0x18a4 <main+0x14a>
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	01 f1       	breq	.+64     	; 0x18dc <main+0x182>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <main+0x148>
    18a0:	3e c0       	rjmp	.+124    	; 0x191e <main+0x1c4>
    18a2:	60 c0       	rjmp	.+192    	; 0x1964 <main+0x20a>
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <main+0x152>
    18aa:	46 c0       	rjmp	.+140    	; 0x1938 <main+0x1de>
    18ac:	0c f4       	brge	.+2      	; 0x18b0 <main+0x156>
    18ae:	38 c0       	rjmp	.+112    	; 0x1920 <main+0x1c6>
    18b0:	45 c0       	rjmp	.+138    	; 0x193c <main+0x1e2>
    18b2:	89 30       	cpi	r24, 0x09	; 9
    18b4:	91 05       	cpc	r25, r1
    18b6:	51 f1       	breq	.+84     	; 0x190c <main+0x1b2>
    18b8:	34 f4       	brge	.+12     	; 0x18c6 <main+0x16c>
    18ba:	87 30       	cpi	r24, 0x07	; 7
    18bc:	91 05       	cpc	r25, r1
    18be:	b1 f0       	breq	.+44     	; 0x18ec <main+0x192>
    18c0:	08 97       	sbiw	r24, 0x08	; 8
    18c2:	f9 f0       	breq	.+62     	; 0x1902 <main+0x1a8>
    18c4:	4f c0       	rjmp	.+158    	; 0x1964 <main+0x20a>
    18c6:	8b 30       	cpi	r24, 0x0B	; 11
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <main+0x174>
    18cc:	4e c0       	rjmp	.+156    	; 0x196a <main+0x210>
    18ce:	0c f4       	brge	.+2      	; 0x18d2 <main+0x178>
    18d0:	40 c0       	rjmp	.+128    	; 0x1952 <main+0x1f8>
    18d2:	87 3e       	cpi	r24, 0xE7	; 231
    18d4:	93 40       	sbci	r25, 0x03	; 3
    18d6:	09 f4       	brne	.+2      	; 0x18da <main+0x180>
    18d8:	6c c0       	rjmp	.+216    	; 0x19b2 <main+0x258>
    18da:	44 c0       	rjmp	.+136    	; 0x1964 <main+0x20a>
					case EVT_ACTION:
						ServoControl( serCmd[1] );
    18dc:	f8 01       	movw	r30, r16
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	8d dd       	rcall	.-1254   	; 0x13fe <ServoControl>
	//                    setSpeedTest( serCmd[1] );
						sendAck(1);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2c da       	rcall	.-2984   	; 0xd42 <sendAck>
						break;
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <main+0x210>
					case EVT_START_MOTION:
						startMotion( serCmd[1], serCmd[2] );
    18ec:	f8 01       	movw	r30, r16
    18ee:	64 81       	ldd	r22, Z+4	; 0x04
    18f0:	75 81       	ldd	r23, Z+5	; 0x05
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	6b dc       	rcall	.-1834   	; 0x11ce <startMotion>
						PORTC = ~(1 << (LED_MAX - 2));
    18f8:	b8 b8       	out	0x08, r11	; 8
						sendAck(1);
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	21 da       	rcall	.-3006   	; 0xd42 <sendAck>
						break;
    1900:	34 c0       	rjmp	.+104    	; 0x196a <main+0x210>
					case EVT_STOP_MOTION:
						stopMotion();
    1902:	97 dc       	rcall	.-1746   	; 0x1232 <stopMotion>
						sendAck(1);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	1c da       	rcall	.-3016   	; 0xd42 <sendAck>
						break;
    190a:	2f c0       	rjmp	.+94     	; 0x196a <main+0x210>
					case EVT_FORCE_MOTION:
						forceMotion( serCmd[1], serCmd[2] );
    190c:	f8 01       	movw	r30, r16
    190e:	64 81       	ldd	r22, Z+4	; 0x04
    1910:	75 81       	ldd	r23, Z+5	; 0x05
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	76 dc       	rcall	.-1812   	; 0x1204 <forceMotion>
						break;
    1918:	28 c0       	rjmp	.+80     	; 0x196a <main+0x210>
					case EVT_GET_NOW_ANGLE:
						getAngle();
    191a:	92 da       	rcall	.-2780   	; 0xe40 <getAngle>
						break;
    191c:	26 c0       	rjmp	.+76     	; 0x196a <main+0x210>
					case EVT_SET_ANGLE:
						setAngle();
    191e:	6f da       	rcall	.-2850   	; 0xdfe <setAngle>
					case EVT_GET_ACT_ANGLE:
						if( serCmd[1] >= ACT_MAX ){
    1920:	f8 01       	movw	r30, r16
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	82 33       	cpi	r24, 0x32	; 50
    1928:	91 05       	cpc	r25, r1
    192a:	24 f0       	brlt	.+8      	; 0x1934 <main+0x1da>
							sendAck(0);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	08 da       	rcall	.-3056   	; 0xd42 <sendAck>
    1932:	1b c0       	rjmp	.+54     	; 0x196a <main+0x210>
						}else{
							sendActAngle(serCmd[1]);
    1934:	f0 da       	rcall	.-2592   	; 0xf16 <sendActAngle>
    1936:	19 c0       	rjmp	.+50     	; 0x196a <main+0x210>
						}
						break;
					case EVT_GET_LOAD:
						getLoad();
    1938:	53 db       	rcall	.-2394   	; 0xfe0 <getLoad>
	//					printf( "%d\n", movingTime );
						break;
    193a:	17 c0       	rjmp	.+46     	; 0x196a <main+0x210>
					case EVT_GET_VOLTAGE:
						getVoltage();
    193c:	cc db       	rcall	.-2152   	; 0x10d6 <getVoltage>
						break;
    193e:	15 c0       	rjmp	.+42     	; 0x196a <main+0x210>
					case EVT_TORQUE_DISABLE:
						dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	68 e1       	ldi	r22, 0x18	; 24
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	8e ef       	ldi	r24, 0xFE	; 254
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
						break;
    1950:	0c c0       	rjmp	.+24     	; 0x196a <main+0x210>
					case EVT_WATCH_DOG:
						watchDogCnt = 0;
    1952:	10 92 66 0b 	sts	0x0B66, r1	; 0x800b66 <watchDogCnt>
    1956:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <watchDogCnt+0x1>
    195a:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <watchDogCnt+0x2>
    195e:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <watchDogCnt+0x3>
						break;
    1962:	03 c0       	rjmp	.+6      	; 0x196a <main+0x210>
	//					printf( "finish\n");
						sendAck(999);
						isFinish = 1;
						break;
					default:
						sendAck(0);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	ec d9       	rcall	.-3112   	; 0xd42 <sendAck>
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
						break;
					}
					memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    196a:	fe 01       	movw	r30, r28
    196c:	2e 2d       	mov	r18, r14
    196e:	11 92       	st	Z+, r1
    1970:	2a 95       	dec	r18
    1972:	e9 f7       	brne	.-6      	; 0x196e <main+0x214>
				}
			}
			memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1974:	f8 01       	movw	r30, r16
    1976:	2f 2d       	mov	r18, r15
    1978:	11 92       	st	Z+, r1
    197a:	2a 95       	dec	r18
    197c:	e9 f7       	brne	.-6      	; 0x1978 <main+0x21e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    197e:	89 ef       	ldi	r24, 0xF9	; 249
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <main+0x228>
    1986:	00 c0       	rjmp	.+0      	; 0x1988 <main+0x22e>
    1988:	00 00       	nop
			sensorValueOld[2] = sensorValue[2];
#endif
		}
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    198a:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <watchDogCnt>
    198e:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <watchDogCnt+0x1>
    1992:	a0 91 68 0b 	lds	r26, 0x0B68	; 0x800b68 <watchDogCnt+0x2>
    1996:	b0 91 69 0b 	lds	r27, 0x0B69	; 0x800b69 <watchDogCnt+0x3>
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	a1 1d       	adc	r26, r1
    199e:	b1 1d       	adc	r27, r1
    19a0:	80 93 66 0b 	sts	0x0B66, r24	; 0x800b66 <watchDogCnt>
    19a4:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <watchDogCnt+0x1>
    19a8:	a0 93 68 0b 	sts	0x0B68, r26	; 0x800b68 <watchDogCnt+0x2>
    19ac:	b0 93 69 0b 	sts	0x0B69, r27	; 0x800b69 <watchDogCnt+0x3>
		if (caputureCount1 == 25){
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
    19b0:	1b cf       	rjmp	.-458    	; 0x17e8 <main+0x8e>
						break;
					case EVT_MOTION_EDIT:
						break;
					case 999:
	//					printf( "finish\n");
						sendAck(999);
    19b2:	87 ee       	ldi	r24, 0xE7	; 231
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	c5 d9       	rcall	.-3190   	; 0xd42 <sendAck>
						break;
					default:
						sendAck(0);
					}
					if( isFinish > 0 ){
						MotorControl( 0, 0 );
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	c8 dc       	rcall	.-1648   	; 0x1352 <MotorControl>
			getAngle();
			caputureCount1 = 0;
		}
#endif
	}
}
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	08 95       	ret

000019de <getGX>:
		mGyroCountZ = 0;
		mTempZ = 0;
	}
}

float getGX() {
    19de:	4f 92       	push	r4
    19e0:	5f 92       	push	r5
    19e2:	6f 92       	push	r6
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
    19fe:	c0 90 a8 05 	lds	r12, 0x05A8	; 0x8005a8 <GYRO_X_MAX>
    1a02:	d0 90 a9 05 	lds	r13, 0x05A9	; 0x8005a9 <GYRO_X_MAX+0x1>
    1a06:	e0 90 aa 05 	lds	r14, 0x05AA	; 0x8005aa <GYRO_X_MAX+0x2>
    1a0a:	f0 90 ab 05 	lds	r15, 0x05AB	; 0x8005ab <GYRO_X_MAX+0x3>
    1a0e:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <GYRO_X_MIN>
    1a12:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <GYRO_X_MIN+0x1>
    1a16:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <GYRO_X_MIN+0x2>
    1a1a:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <GYRO_X_MIN+0x3>
    1a1e:	c7 01       	movw	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	dc d3       	rcall	.+1976   	; 0x21dc <__addsf3>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	8e d5       	rcall	.+2844   	; 0x254a <__mulsf3>
    1a2e:	4b 01       	movw	r8, r22
    1a30:	5c 01       	movw	r10, r24
	float gravityX = (mGyroX - gyroXMid)/(GYRO_X_MAX - gyroXMid);
    1a32:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <mGyroX>
    1a36:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <mGyroX+0x1>
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	99 0f       	add	r25, r25
    1a3e:	88 0b       	sbc	r24, r24
    1a40:	99 0b       	sbc	r25, r25
    1a42:	cf d4       	rcall	.+2462   	; 0x23e2 <__floatsisf>
    1a44:	a5 01       	movw	r20, r10
    1a46:	94 01       	movw	r18, r8
    1a48:	c8 d3       	rcall	.+1936   	; 0x21da <__subsf3>
    1a4a:	2b 01       	movw	r4, r22
    1a4c:	3c 01       	movw	r6, r24
    1a4e:	a5 01       	movw	r20, r10
    1a50:	94 01       	movw	r18, r8
    1a52:	c7 01       	movw	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	c1 d3       	rcall	.+1922   	; 0x21da <__subsf3>
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	c3 01       	movw	r24, r6
    1a5e:	b2 01       	movw	r22, r4
    1a60:	25 d4       	rcall	.+2122   	; 0x22ac <__divsf3>
    1a62:	e6 2e       	mov	r14, r22
    1a64:	f7 2e       	mov	r15, r23
    1a66:	08 2f       	mov	r16, r24
    1a68:	19 2f       	mov	r17, r25
	char *sign;
	if (signbit(gravityX)) {
    1a6a:	97 fd       	sbrc	r25, 7
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <getGX+0x96>
		sign = "-";
	} else {
		sign = "+";
    1a6e:	cc e5       	ldi	r28, 0x5C	; 92
    1a70:	d8 e0       	ldi	r29, 0x08	; 8
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <getGX+0x9a>
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroXMid = (GYRO_X_MAX + GYRO_X_MIN)/2;
	float gravityX = (mGyroX - gyroXMid)/(GYRO_X_MAX - gyroXMid);
	char *sign;
	if (signbit(gravityX)) {
		sign = "-";
    1a74:	ca e5       	ldi	r28, 0x5A	; 90
    1a76:	d8 e0       	ldi	r29, 0x08	; 8
	} else {
		sign = "+";
	}
	printf( "### gravityX %s%d.%d%dG\r\n", sign, abs((int)(gravityX)), abs(((int)(gravityX * 10) % 10)), abs(((int)(gravityX * 100) % 10)));
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	48 ec       	ldi	r20, 0xC8	; 200
    1a7e:	52 e4       	ldi	r21, 0x42	; 66
    1a80:	6e 2d       	mov	r22, r14
    1a82:	7f 2d       	mov	r23, r15
    1a84:	80 2f       	mov	r24, r16
    1a86:	91 2f       	mov	r25, r17
    1a88:	60 d5       	rcall	.+2752   	; 0x254a <__mulsf3>
    1a8a:	78 d4       	rcall	.+2288   	; 0x237c <__fixsfsi>
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	6a e0       	ldi	r22, 0x0A	; 10
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	3e d3       	rcall	.+1660   	; 0x2110 <__divmodhi4>
    1a94:	9c 01       	movw	r18, r24
    1a96:	99 23       	and	r25, r25
    1a98:	24 f4       	brge	.+8      	; 0x1aa2 <getGX+0xc4>
    1a9a:	22 27       	eor	r18, r18
    1a9c:	33 27       	eor	r19, r19
    1a9e:	28 1b       	sub	r18, r24
    1aa0:	39 0b       	sbc	r19, r25
    1aa2:	3f 93       	push	r19
    1aa4:	2f 93       	push	r18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	6e 2d       	mov	r22, r14
    1ab0:	7f 2d       	mov	r23, r15
    1ab2:	80 2f       	mov	r24, r16
    1ab4:	91 2f       	mov	r25, r17
    1ab6:	49 d5       	rcall	.+2706   	; 0x254a <__mulsf3>
    1ab8:	61 d4       	rcall	.+2242   	; 0x237c <__fixsfsi>
    1aba:	cb 01       	movw	r24, r22
    1abc:	6a e0       	ldi	r22, 0x0A	; 10
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	27 d3       	rcall	.+1614   	; 0x2110 <__divmodhi4>
    1ac2:	9c 01       	movw	r18, r24
    1ac4:	99 23       	and	r25, r25
    1ac6:	24 f4       	brge	.+8      	; 0x1ad0 <getGX+0xf2>
    1ac8:	22 27       	eor	r18, r18
    1aca:	33 27       	eor	r19, r19
    1acc:	28 1b       	sub	r18, r24
    1ace:	39 0b       	sbc	r19, r25
    1ad0:	3f 93       	push	r19
    1ad2:	2f 93       	push	r18
    1ad4:	6e 2d       	mov	r22, r14
    1ad6:	7f 2d       	mov	r23, r15
    1ad8:	80 2f       	mov	r24, r16
    1ada:	91 2f       	mov	r25, r17
    1adc:	4f d4       	rcall	.+2206   	; 0x237c <__fixsfsi>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	77 23       	and	r23, r23
    1ae2:	24 f4       	brge	.+8      	; 0x1aec <getGX+0x10e>
    1ae4:	22 27       	eor	r18, r18
    1ae6:	33 27       	eor	r19, r19
    1ae8:	26 1b       	sub	r18, r22
    1aea:	37 0b       	sbc	r19, r23
    1aec:	3f 93       	push	r19
    1aee:	2f 93       	push	r18
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	8e e5       	ldi	r24, 0x5E	; 94
    1af6:	98 e0       	ldi	r25, 0x08	; 8
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	60 d6       	rcall	.+3264   	; 0x27be <printf>

	return gravityX;
    1afe:	8d b7       	in	r24, 0x3d	; 61
    1b00:	9e b7       	in	r25, 0x3e	; 62
    1b02:	0a 96       	adiw	r24, 0x0a	; 10
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	9e bf       	out	0x3e, r25	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	8d bf       	out	0x3d, r24	; 61
}
    1b0e:	6e 2d       	mov	r22, r14
    1b10:	7f 2d       	mov	r23, r15
    1b12:	80 2f       	mov	r24, r16
    1b14:	91 2f       	mov	r25, r17
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	df 90       	pop	r13
    1b24:	cf 90       	pop	r12
    1b26:	bf 90       	pop	r11
    1b28:	af 90       	pop	r10
    1b2a:	9f 90       	pop	r9
    1b2c:	8f 90       	pop	r8
    1b2e:	7f 90       	pop	r7
    1b30:	6f 90       	pop	r6
    1b32:	5f 90       	pop	r5
    1b34:	4f 90       	pop	r4
    1b36:	08 95       	ret

00001b38 <setGyroX>:
float getGY();
float getGZ();

void setGyroX(int gyroX) {
	// Get AVEREGE
	if (mGyroCountX >= 0 && mGyroCountX < AVEREGE_TIMES) {
    1b38:	20 91 1a 0c 	lds	r18, 0x0C1A	; 0x800c1a <mGyroCountX>
    1b3c:	30 91 1b 0c 	lds	r19, 0x0C1B	; 0x800c1b <mGyroCountX+0x1>
    1b40:	24 36       	cpi	r18, 0x64	; 100
    1b42:	31 05       	cpc	r19, r1
    1b44:	f8 f4       	brcc	.+62     	; 0x1b84 <setGyroX+0x4c>
		mTempX = mTempX + gyroX;
    1b46:	09 2e       	mov	r0, r25
    1b48:	00 0c       	add	r0, r0
    1b4a:	aa 0b       	sbc	r26, r26
    1b4c:	bb 0b       	sbc	r27, r27
    1b4e:	40 91 2a 0c 	lds	r20, 0x0C2A	; 0x800c2a <mTempX>
    1b52:	50 91 2b 0c 	lds	r21, 0x0C2B	; 0x800c2b <mTempX+0x1>
    1b56:	60 91 2c 0c 	lds	r22, 0x0C2C	; 0x800c2c <mTempX+0x2>
    1b5a:	70 91 2d 0c 	lds	r23, 0x0C2D	; 0x800c2d <mTempX+0x3>
    1b5e:	84 0f       	add	r24, r20
    1b60:	95 1f       	adc	r25, r21
    1b62:	a6 1f       	adc	r26, r22
    1b64:	b7 1f       	adc	r27, r23
    1b66:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <mTempX>
    1b6a:	90 93 2b 0c 	sts	0x0C2B, r25	; 0x800c2b <mTempX+0x1>
    1b6e:	a0 93 2c 0c 	sts	0x0C2C, r26	; 0x800c2c <mTempX+0x2>
    1b72:	b0 93 2d 0c 	sts	0x0C2D, r27	; 0x800c2d <mTempX+0x3>
		mGyroCountX++;
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	30 93 1b 0c 	sts	0x0C1B, r19	; 0x800c1b <mGyroCountX+0x1>
    1b7e:	20 93 1a 0c 	sts	0x0C1A, r18	; 0x800c1a <mGyroCountX>
    1b82:	08 95       	ret
	} else if (mGyroCountX >= AVEREGE_TIMES)  {
    1b84:	24 36       	cpi	r18, 0x64	; 100
    1b86:	31 05       	cpc	r19, r1
    1b88:	54 f1       	brlt	.+84     	; 0x1bde <setGyroX+0xa6>
		mGyroX = mTempX / AVEREGE_TIMES;
    1b8a:	60 91 2a 0c 	lds	r22, 0x0C2A	; 0x800c2a <mTempX>
    1b8e:	70 91 2b 0c 	lds	r23, 0x0C2B	; 0x800c2b <mTempX+0x1>
    1b92:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <mTempX+0x2>
    1b96:	90 91 2d 0c 	lds	r25, 0x0C2D	; 0x800c2d <mTempX+0x3>
    1b9a:	24 e6       	ldi	r18, 0x64	; 100
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	c9 d2       	rcall	.+1426   	; 0x2136 <__divmodsi4>
    1ba4:	20 93 20 0c 	sts	0x0C20, r18	; 0x800c20 <mGyroX>
    1ba8:	30 93 21 0c 	sts	0x0C21, r19	; 0x800c21 <mGyroX+0x1>
		printf( "### mGyroX %d\r\n", mGyroX);
    1bac:	3f 93       	push	r19
    1bae:	2f 93       	push	r18
    1bb0:	88 e7       	ldi	r24, 0x78	; 120
    1bb2:	98 e0       	ldi	r25, 0x08	; 8
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	02 d6       	rcall	.+3076   	; 0x27be <printf>
		mGyroCountX = 0;
    1bba:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <mGyroCountX+0x1>
    1bbe:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <mGyroCountX>
		mTempX = 0;
    1bc2:	10 92 2a 0c 	sts	0x0C2A, r1	; 0x800c2a <mTempX>
    1bc6:	10 92 2b 0c 	sts	0x0C2B, r1	; 0x800c2b <mTempX+0x1>
    1bca:	10 92 2c 0c 	sts	0x0C2C, r1	; 0x800c2c <mTempX+0x2>
    1bce:	10 92 2d 0c 	sts	0x0C2D, r1	; 0x800c2d <mTempX+0x3>
		
		float gravityX = getGX();
    1bd2:	05 df       	rcall	.-502    	; 0x19de <getGX>
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	08 95       	ret
		
	} else {
		printf( "### Oops!\r\n");
    1bde:	88 e8       	ldi	r24, 0x88	; 136
    1be0:	98 e0       	ldi	r25, 0x08	; 8
    1be2:	00 d6       	rcall	.+3072   	; 0x27e4 <puts>
		mGyroCountX = 0;
    1be4:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <mGyroCountX+0x1>
    1be8:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <mGyroCountX>
		mTempX = 0;
    1bec:	10 92 2a 0c 	sts	0x0C2A, r1	; 0x800c2a <mTempX>
    1bf0:	10 92 2b 0c 	sts	0x0C2B, r1	; 0x800c2b <mTempX+0x1>
    1bf4:	10 92 2c 0c 	sts	0x0C2C, r1	; 0x800c2c <mTempX+0x2>
    1bf8:	10 92 2d 0c 	sts	0x0C2D, r1	; 0x800c2d <mTempX+0x3>
    1bfc:	08 95       	ret

00001bfe <getGY>:
	printf( "### gravityX %s%d.%d%dG\r\n", sign, abs((int)(gravityX)), abs(((int)(gravityX * 10) % 10)), abs(((int)(gravityX * 100) % 10)));

	return gravityX;
}

float getGY() {
    1bfe:	4f 92       	push	r4
    1c00:	5f 92       	push	r5
    1c02:	6f 92       	push	r6
    1c04:	7f 92       	push	r7
    1c06:	8f 92       	push	r8
    1c08:	9f 92       	push	r9
    1c0a:	af 92       	push	r10
    1c0c:	bf 92       	push	r11
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroYMid = (GYRO_Y_MAX + GYRO_Y_MIN)/2;
    1c1e:	c0 90 a4 05 	lds	r12, 0x05A4	; 0x8005a4 <GYRO_Y_MAX>
    1c22:	d0 90 a5 05 	lds	r13, 0x05A5	; 0x8005a5 <GYRO_Y_MAX+0x1>
    1c26:	e0 90 a6 05 	lds	r14, 0x05A6	; 0x8005a6 <GYRO_Y_MAX+0x2>
    1c2a:	f0 90 a7 05 	lds	r15, 0x05A7	; 0x8005a7 <GYRO_Y_MAX+0x3>
    1c2e:	20 91 b0 05 	lds	r18, 0x05B0	; 0x8005b0 <GYRO_Y_MIN>
    1c32:	30 91 b1 05 	lds	r19, 0x05B1	; 0x8005b1 <GYRO_Y_MIN+0x1>
    1c36:	40 91 b2 05 	lds	r20, 0x05B2	; 0x8005b2 <GYRO_Y_MIN+0x2>
    1c3a:	50 91 b3 05 	lds	r21, 0x05B3	; 0x8005b3 <GYRO_Y_MIN+0x3>
    1c3e:	c7 01       	movw	r24, r14
    1c40:	b6 01       	movw	r22, r12
    1c42:	cc d2       	rcall	.+1432   	; 0x21dc <__addsf3>
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	7e d4       	rcall	.+2300   	; 0x254a <__mulsf3>
    1c4e:	4b 01       	movw	r8, r22
    1c50:	5c 01       	movw	r10, r24
	float gravityY = (mGyroY - gyroYMid)/(GYRO_Y_MAX - gyroYMid);
    1c52:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <mGyroY>
    1c56:	90 91 1f 0c 	lds	r25, 0x0C1F	; 0x800c1f <mGyroY+0x1>
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	99 0f       	add	r25, r25
    1c5e:	88 0b       	sbc	r24, r24
    1c60:	99 0b       	sbc	r25, r25
    1c62:	bf d3       	rcall	.+1918   	; 0x23e2 <__floatsisf>
    1c64:	a5 01       	movw	r20, r10
    1c66:	94 01       	movw	r18, r8
    1c68:	b8 d2       	rcall	.+1392   	; 0x21da <__subsf3>
    1c6a:	2b 01       	movw	r4, r22
    1c6c:	3c 01       	movw	r6, r24
    1c6e:	a5 01       	movw	r20, r10
    1c70:	94 01       	movw	r18, r8
    1c72:	c7 01       	movw	r24, r14
    1c74:	b6 01       	movw	r22, r12
    1c76:	b1 d2       	rcall	.+1378   	; 0x21da <__subsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	c3 01       	movw	r24, r6
    1c7e:	b2 01       	movw	r22, r4
    1c80:	15 d3       	rcall	.+1578   	; 0x22ac <__divsf3>
    1c82:	e6 2e       	mov	r14, r22
    1c84:	f7 2e       	mov	r15, r23
    1c86:	08 2f       	mov	r16, r24
    1c88:	19 2f       	mov	r17, r25
	char *sign;
	if (signbit(gravityY)) {
    1c8a:	97 fd       	sbrc	r25, 7
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <getGY+0x96>
		sign = "-";
	} else {
		sign = "+";
    1c8e:	cc e5       	ldi	r28, 0x5C	; 92
    1c90:	d8 e0       	ldi	r29, 0x08	; 8
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <getGY+0x9a>
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroYMid = (GYRO_Y_MAX + GYRO_Y_MIN)/2;
	float gravityY = (mGyroY - gyroYMid)/(GYRO_Y_MAX - gyroYMid);
	char *sign;
	if (signbit(gravityY)) {
		sign = "-";
    1c94:	ca e5       	ldi	r28, 0x5A	; 90
    1c96:	d8 e0       	ldi	r29, 0x08	; 8
	} else {
		sign = "+";
	}
	printf( "### gravityY %s%d.%d%dG\r\n", sign, abs((int)(gravityY)), abs(((int)(gravityY * 10) % 10)), abs(((int)(gravityY * 100) % 10)));
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	48 ec       	ldi	r20, 0xC8	; 200
    1c9e:	52 e4       	ldi	r21, 0x42	; 66
    1ca0:	6e 2d       	mov	r22, r14
    1ca2:	7f 2d       	mov	r23, r15
    1ca4:	80 2f       	mov	r24, r16
    1ca6:	91 2f       	mov	r25, r17
    1ca8:	50 d4       	rcall	.+2208   	; 0x254a <__mulsf3>
    1caa:	68 d3       	rcall	.+1744   	; 0x237c <__fixsfsi>
    1cac:	cb 01       	movw	r24, r22
    1cae:	6a e0       	ldi	r22, 0x0A	; 10
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	2e d2       	rcall	.+1116   	; 0x2110 <__divmodhi4>
    1cb4:	9c 01       	movw	r18, r24
    1cb6:	99 23       	and	r25, r25
    1cb8:	24 f4       	brge	.+8      	; 0x1cc2 <getGY+0xc4>
    1cba:	22 27       	eor	r18, r18
    1cbc:	33 27       	eor	r19, r19
    1cbe:	28 1b       	sub	r18, r24
    1cc0:	39 0b       	sbc	r19, r25
    1cc2:	3f 93       	push	r19
    1cc4:	2f 93       	push	r18
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	6e 2d       	mov	r22, r14
    1cd0:	7f 2d       	mov	r23, r15
    1cd2:	80 2f       	mov	r24, r16
    1cd4:	91 2f       	mov	r25, r17
    1cd6:	39 d4       	rcall	.+2162   	; 0x254a <__mulsf3>
    1cd8:	51 d3       	rcall	.+1698   	; 0x237c <__fixsfsi>
    1cda:	cb 01       	movw	r24, r22
    1cdc:	6a e0       	ldi	r22, 0x0A	; 10
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	17 d2       	rcall	.+1070   	; 0x2110 <__divmodhi4>
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	99 23       	and	r25, r25
    1ce6:	24 f4       	brge	.+8      	; 0x1cf0 <getGY+0xf2>
    1ce8:	22 27       	eor	r18, r18
    1cea:	33 27       	eor	r19, r19
    1cec:	28 1b       	sub	r18, r24
    1cee:	39 0b       	sbc	r19, r25
    1cf0:	3f 93       	push	r19
    1cf2:	2f 93       	push	r18
    1cf4:	6e 2d       	mov	r22, r14
    1cf6:	7f 2d       	mov	r23, r15
    1cf8:	80 2f       	mov	r24, r16
    1cfa:	91 2f       	mov	r25, r17
    1cfc:	3f d3       	rcall	.+1662   	; 0x237c <__fixsfsi>
    1cfe:	9b 01       	movw	r18, r22
    1d00:	77 23       	and	r23, r23
    1d02:	24 f4       	brge	.+8      	; 0x1d0c <getGY+0x10e>
    1d04:	22 27       	eor	r18, r18
    1d06:	33 27       	eor	r19, r19
    1d08:	26 1b       	sub	r18, r22
    1d0a:	37 0b       	sbc	r19, r23
    1d0c:	3f 93       	push	r19
    1d0e:	2f 93       	push	r18
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	83 e9       	ldi	r24, 0x93	; 147
    1d16:	98 e0       	ldi	r25, 0x08	; 8
    1d18:	9f 93       	push	r25
    1d1a:	8f 93       	push	r24
    1d1c:	50 d5       	rcall	.+2720   	; 0x27be <printf>
	
	return gravityY;
    1d1e:	8d b7       	in	r24, 0x3d	; 61
    1d20:	9e b7       	in	r25, 0x3e	; 62
    1d22:	0a 96       	adiw	r24, 0x0a	; 10
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	9e bf       	out	0x3e, r25	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	8d bf       	out	0x3d, r24	; 61
}
    1d2e:	6e 2d       	mov	r22, r14
    1d30:	7f 2d       	mov	r23, r15
    1d32:	80 2f       	mov	r24, r16
    1d34:	91 2f       	mov	r25, r17
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	9f 90       	pop	r9
    1d4c:	8f 90       	pop	r8
    1d4e:	7f 90       	pop	r7
    1d50:	6f 90       	pop	r6
    1d52:	5f 90       	pop	r5
    1d54:	4f 90       	pop	r4
    1d56:	08 95       	ret

00001d58 <setGyroY>:
	}
}

void setGyroY(int gyroY) {
	// Get AVEREGE
	if (mGyroCountY >= 0 && mGyroCountY < AVEREGE_TIMES) {
    1d58:	20 91 18 0c 	lds	r18, 0x0C18	; 0x800c18 <mGyroCountY>
    1d5c:	30 91 19 0c 	lds	r19, 0x0C19	; 0x800c19 <mGyroCountY+0x1>
    1d60:	24 36       	cpi	r18, 0x64	; 100
    1d62:	31 05       	cpc	r19, r1
    1d64:	f8 f4       	brcc	.+62     	; 0x1da4 <setGyroY+0x4c>
		mTempY = mTempY + gyroY;
    1d66:	09 2e       	mov	r0, r25
    1d68:	00 0c       	add	r0, r0
    1d6a:	aa 0b       	sbc	r26, r26
    1d6c:	bb 0b       	sbc	r27, r27
    1d6e:	40 91 26 0c 	lds	r20, 0x0C26	; 0x800c26 <mTempY>
    1d72:	50 91 27 0c 	lds	r21, 0x0C27	; 0x800c27 <mTempY+0x1>
    1d76:	60 91 28 0c 	lds	r22, 0x0C28	; 0x800c28 <mTempY+0x2>
    1d7a:	70 91 29 0c 	lds	r23, 0x0C29	; 0x800c29 <mTempY+0x3>
    1d7e:	84 0f       	add	r24, r20
    1d80:	95 1f       	adc	r25, r21
    1d82:	a6 1f       	adc	r26, r22
    1d84:	b7 1f       	adc	r27, r23
    1d86:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <mTempY>
    1d8a:	90 93 27 0c 	sts	0x0C27, r25	; 0x800c27 <mTempY+0x1>
    1d8e:	a0 93 28 0c 	sts	0x0C28, r26	; 0x800c28 <mTempY+0x2>
    1d92:	b0 93 29 0c 	sts	0x0C29, r27	; 0x800c29 <mTempY+0x3>
		mGyroCountY++;
    1d96:	2f 5f       	subi	r18, 0xFF	; 255
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	30 93 19 0c 	sts	0x0C19, r19	; 0x800c19 <mGyroCountY+0x1>
    1d9e:	20 93 18 0c 	sts	0x0C18, r18	; 0x800c18 <mGyroCountY>
    1da2:	08 95       	ret
		} else if (mGyroCountY >= AVEREGE_TIMES)  {
    1da4:	24 36       	cpi	r18, 0x64	; 100
    1da6:	31 05       	cpc	r19, r1
    1da8:	54 f1       	brlt	.+84     	; 0x1dfe <setGyroY+0xa6>
		mGyroY = mTempY / AVEREGE_TIMES;
    1daa:	60 91 26 0c 	lds	r22, 0x0C26	; 0x800c26 <mTempY>
    1dae:	70 91 27 0c 	lds	r23, 0x0C27	; 0x800c27 <mTempY+0x1>
    1db2:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <mTempY+0x2>
    1db6:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <mTempY+0x3>
    1dba:	24 e6       	ldi	r18, 0x64	; 100
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	b9 d1       	rcall	.+882    	; 0x2136 <__divmodsi4>
    1dc4:	20 93 1e 0c 	sts	0x0C1E, r18	; 0x800c1e <mGyroY>
    1dc8:	30 93 1f 0c 	sts	0x0C1F, r19	; 0x800c1f <mGyroY+0x1>
		printf( "### mGyroY %d\r\n", mGyroY);
    1dcc:	3f 93       	push	r19
    1dce:	2f 93       	push	r18
    1dd0:	8d ea       	ldi	r24, 0xAD	; 173
    1dd2:	98 e0       	ldi	r25, 0x08	; 8
    1dd4:	9f 93       	push	r25
    1dd6:	8f 93       	push	r24
    1dd8:	f2 d4       	rcall	.+2532   	; 0x27be <printf>
		mGyroCountY = 0;
    1dda:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <mGyroCountY+0x1>
    1dde:	10 92 18 0c 	sts	0x0C18, r1	; 0x800c18 <mGyroCountY>
		mTempY = 0;
    1de2:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <mTempY>
    1de6:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <mTempY+0x1>
    1dea:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <mTempY+0x2>
    1dee:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <mTempY+0x3>
		
		float gravityY = getGY();
    1df2:	05 df       	rcall	.-502    	; 0x1bfe <getGY>
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	08 95       	ret
		
		} else {
		printf( "### Oops!\r\n");
    1dfe:	88 e8       	ldi	r24, 0x88	; 136
    1e00:	98 e0       	ldi	r25, 0x08	; 8
    1e02:	f0 d4       	rcall	.+2528   	; 0x27e4 <puts>
		mGyroCountY = 0;
    1e04:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <mGyroCountY+0x1>
    1e08:	10 92 18 0c 	sts	0x0C18, r1	; 0x800c18 <mGyroCountY>
		mTempY = 0;
    1e0c:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <mTempY>
    1e10:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <mTempY+0x1>
    1e14:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <mTempY+0x2>
    1e18:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <mTempY+0x3>
    1e1c:	08 95       	ret

00001e1e <getGZ>:
	printf( "### gravityY %s%d.%d%dG\r\n", sign, abs((int)(gravityY)), abs(((int)(gravityY * 10) % 10)), abs(((int)(gravityY * 100) % 10)));
	
	return gravityY;
}

float getGZ() {
    1e1e:	4f 92       	push	r4
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	8f 92       	push	r8
    1e28:	9f 92       	push	r9
    1e2a:	af 92       	push	r10
    1e2c:	bf 92       	push	r11
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroZMid = (GYRO_Z_MAX + GYRO_Z_MIN)/2;
    1e3e:	c0 90 a0 05 	lds	r12, 0x05A0	; 0x8005a0 <GYRO_Z_MAX>
    1e42:	d0 90 a1 05 	lds	r13, 0x05A1	; 0x8005a1 <GYRO_Z_MAX+0x1>
    1e46:	e0 90 a2 05 	lds	r14, 0x05A2	; 0x8005a2 <GYRO_Z_MAX+0x2>
    1e4a:	f0 90 a3 05 	lds	r15, 0x05A3	; 0x8005a3 <GYRO_Z_MAX+0x3>
    1e4e:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <GYRO_Z_MIN>
    1e52:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <GYRO_Z_MIN+0x1>
    1e56:	40 91 ae 05 	lds	r20, 0x05AE	; 0x8005ae <GYRO_Z_MIN+0x2>
    1e5a:	50 91 af 05 	lds	r21, 0x05AF	; 0x8005af <GYRO_Z_MIN+0x3>
    1e5e:	c7 01       	movw	r24, r14
    1e60:	b6 01       	movw	r22, r12
    1e62:	bc d1       	rcall	.+888    	; 0x21dc <__addsf3>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	6e d3       	rcall	.+1756   	; 0x254a <__mulsf3>
    1e6e:	4b 01       	movw	r8, r22
    1e70:	5c 01       	movw	r10, r24
	float gravityZ = (mGyroZ - gyroZMid)/(GYRO_Z_MAX - gyroZMid);
    1e72:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <mGyroZ>
    1e76:	90 91 1d 0c 	lds	r25, 0x0C1D	; 0x800c1d <mGyroZ+0x1>
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	99 0f       	add	r25, r25
    1e7e:	88 0b       	sbc	r24, r24
    1e80:	99 0b       	sbc	r25, r25
    1e82:	af d2       	rcall	.+1374   	; 0x23e2 <__floatsisf>
    1e84:	a5 01       	movw	r20, r10
    1e86:	94 01       	movw	r18, r8
    1e88:	a8 d1       	rcall	.+848    	; 0x21da <__subsf3>
    1e8a:	2b 01       	movw	r4, r22
    1e8c:	3c 01       	movw	r6, r24
    1e8e:	a5 01       	movw	r20, r10
    1e90:	94 01       	movw	r18, r8
    1e92:	c7 01       	movw	r24, r14
    1e94:	b6 01       	movw	r22, r12
    1e96:	a1 d1       	rcall	.+834    	; 0x21da <__subsf3>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	ac 01       	movw	r20, r24
    1e9c:	c3 01       	movw	r24, r6
    1e9e:	b2 01       	movw	r22, r4
    1ea0:	05 d2       	rcall	.+1034   	; 0x22ac <__divsf3>
    1ea2:	e6 2e       	mov	r14, r22
    1ea4:	f7 2e       	mov	r15, r23
    1ea6:	08 2f       	mov	r16, r24
    1ea8:	19 2f       	mov	r17, r25
	char *sign;
	if (signbit(gravityZ)) {
    1eaa:	97 fd       	sbrc	r25, 7
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <getGZ+0x96>
		sign = "-";
	} else {
		sign = "+";
    1eae:	cc e5       	ldi	r28, 0x5C	; 92
    1eb0:	d8 e0       	ldi	r29, 0x08	; 8
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <getGZ+0x9a>
	// 取得した値を0Gの時0となるようシフトさせ、Gを求める
	float gyroZMid = (GYRO_Z_MAX + GYRO_Z_MIN)/2;
	float gravityZ = (mGyroZ - gyroZMid)/(GYRO_Z_MAX - gyroZMid);
	char *sign;
	if (signbit(gravityZ)) {
		sign = "-";
    1eb4:	ca e5       	ldi	r28, 0x5A	; 90
    1eb6:	d8 e0       	ldi	r29, 0x08	; 8
	} else {
		sign = "+";
	}
	printf( "### gravityZ %s%d.%d%dG\r\n", sign, abs((int)(gravityZ)), abs(((int)(gravityZ * 10) % 10)), abs(((int)(gravityZ * 100) % 10)));
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	48 ec       	ldi	r20, 0xC8	; 200
    1ebe:	52 e4       	ldi	r21, 0x42	; 66
    1ec0:	6e 2d       	mov	r22, r14
    1ec2:	7f 2d       	mov	r23, r15
    1ec4:	80 2f       	mov	r24, r16
    1ec6:	91 2f       	mov	r25, r17
    1ec8:	40 d3       	rcall	.+1664   	; 0x254a <__mulsf3>
    1eca:	58 d2       	rcall	.+1200   	; 0x237c <__fixsfsi>
    1ecc:	cb 01       	movw	r24, r22
    1ece:	6a e0       	ldi	r22, 0x0A	; 10
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	1e d1       	rcall	.+572    	; 0x2110 <__divmodhi4>
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	99 23       	and	r25, r25
    1ed8:	24 f4       	brge	.+8      	; 0x1ee2 <getGZ+0xc4>
    1eda:	22 27       	eor	r18, r18
    1edc:	33 27       	eor	r19, r19
    1ede:	28 1b       	sub	r18, r24
    1ee0:	39 0b       	sbc	r19, r25
    1ee2:	3f 93       	push	r19
    1ee4:	2f 93       	push	r18
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	6e 2d       	mov	r22, r14
    1ef0:	7f 2d       	mov	r23, r15
    1ef2:	80 2f       	mov	r24, r16
    1ef4:	91 2f       	mov	r25, r17
    1ef6:	29 d3       	rcall	.+1618   	; 0x254a <__mulsf3>
    1ef8:	41 d2       	rcall	.+1154   	; 0x237c <__fixsfsi>
    1efa:	cb 01       	movw	r24, r22
    1efc:	6a e0       	ldi	r22, 0x0A	; 10
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	07 d1       	rcall	.+526    	; 0x2110 <__divmodhi4>
    1f02:	9c 01       	movw	r18, r24
    1f04:	99 23       	and	r25, r25
    1f06:	24 f4       	brge	.+8      	; 0x1f10 <getGZ+0xf2>
    1f08:	22 27       	eor	r18, r18
    1f0a:	33 27       	eor	r19, r19
    1f0c:	28 1b       	sub	r18, r24
    1f0e:	39 0b       	sbc	r19, r25
    1f10:	3f 93       	push	r19
    1f12:	2f 93       	push	r18
    1f14:	6e 2d       	mov	r22, r14
    1f16:	7f 2d       	mov	r23, r15
    1f18:	80 2f       	mov	r24, r16
    1f1a:	91 2f       	mov	r25, r17
    1f1c:	2f d2       	rcall	.+1118   	; 0x237c <__fixsfsi>
    1f1e:	9b 01       	movw	r18, r22
    1f20:	77 23       	and	r23, r23
    1f22:	24 f4       	brge	.+8      	; 0x1f2c <getGZ+0x10e>
    1f24:	22 27       	eor	r18, r18
    1f26:	33 27       	eor	r19, r19
    1f28:	26 1b       	sub	r18, r22
    1f2a:	37 0b       	sbc	r19, r23
    1f2c:	3f 93       	push	r19
    1f2e:	2f 93       	push	r18
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	8d eb       	ldi	r24, 0xBD	; 189
    1f36:	98 e0       	ldi	r25, 0x08	; 8
    1f38:	9f 93       	push	r25
    1f3a:	8f 93       	push	r24
    1f3c:	40 d4       	rcall	.+2176   	; 0x27be <printf>
	
	return gravityZ;
    1f3e:	8d b7       	in	r24, 0x3d	; 61
    1f40:	9e b7       	in	r25, 0x3e	; 62
    1f42:	0a 96       	adiw	r24, 0x0a	; 10
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	9e bf       	out	0x3e, r25	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	8d bf       	out	0x3d, r24	; 61
    1f4e:	6e 2d       	mov	r22, r14
    1f50:	7f 2d       	mov	r23, r15
    1f52:	80 2f       	mov	r24, r16
    1f54:	91 2f       	mov	r25, r17
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	bf 90       	pop	r11
    1f68:	af 90       	pop	r10
    1f6a:	9f 90       	pop	r9
    1f6c:	8f 90       	pop	r8
    1f6e:	7f 90       	pop	r7
    1f70:	6f 90       	pop	r6
    1f72:	5f 90       	pop	r5
    1f74:	4f 90       	pop	r4
    1f76:	08 95       	ret

00001f78 <setGyroZ>:
	}
}

void setGyroZ(int gyroZ) {
	// Get AVEREGE
	if (mGyroCountZ >= 0 && mGyroCountZ < AVEREGE_TIMES) {
    1f78:	20 91 16 0c 	lds	r18, 0x0C16	; 0x800c16 <mGyroCountZ>
    1f7c:	30 91 17 0c 	lds	r19, 0x0C17	; 0x800c17 <mGyroCountZ+0x1>
    1f80:	24 36       	cpi	r18, 0x64	; 100
    1f82:	31 05       	cpc	r19, r1
    1f84:	f8 f4       	brcc	.+62     	; 0x1fc4 <setGyroZ+0x4c>
		mTempZ = mTempZ + gyroZ;
    1f86:	09 2e       	mov	r0, r25
    1f88:	00 0c       	add	r0, r0
    1f8a:	aa 0b       	sbc	r26, r26
    1f8c:	bb 0b       	sbc	r27, r27
    1f8e:	40 91 22 0c 	lds	r20, 0x0C22	; 0x800c22 <mTempZ>
    1f92:	50 91 23 0c 	lds	r21, 0x0C23	; 0x800c23 <mTempZ+0x1>
    1f96:	60 91 24 0c 	lds	r22, 0x0C24	; 0x800c24 <mTempZ+0x2>
    1f9a:	70 91 25 0c 	lds	r23, 0x0C25	; 0x800c25 <mTempZ+0x3>
    1f9e:	84 0f       	add	r24, r20
    1fa0:	95 1f       	adc	r25, r21
    1fa2:	a6 1f       	adc	r26, r22
    1fa4:	b7 1f       	adc	r27, r23
    1fa6:	80 93 22 0c 	sts	0x0C22, r24	; 0x800c22 <mTempZ>
    1faa:	90 93 23 0c 	sts	0x0C23, r25	; 0x800c23 <mTempZ+0x1>
    1fae:	a0 93 24 0c 	sts	0x0C24, r26	; 0x800c24 <mTempZ+0x2>
    1fb2:	b0 93 25 0c 	sts	0x0C25, r27	; 0x800c25 <mTempZ+0x3>
		mGyroCountZ++;
    1fb6:	2f 5f       	subi	r18, 0xFF	; 255
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	30 93 17 0c 	sts	0x0C17, r19	; 0x800c17 <mGyroCountZ+0x1>
    1fbe:	20 93 16 0c 	sts	0x0C16, r18	; 0x800c16 <mGyroCountZ>
    1fc2:	08 95       	ret
	} else if (mGyroCountZ >= AVEREGE_TIMES)  {
    1fc4:	24 36       	cpi	r18, 0x64	; 100
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	54 f1       	brlt	.+84     	; 0x201e <setGyroZ+0xa6>
		mGyroZ = mTempZ / AVEREGE_TIMES;
    1fca:	60 91 22 0c 	lds	r22, 0x0C22	; 0x800c22 <mTempZ>
    1fce:	70 91 23 0c 	lds	r23, 0x0C23	; 0x800c23 <mTempZ+0x1>
    1fd2:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <mTempZ+0x2>
    1fd6:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <mTempZ+0x3>
    1fda:	24 e6       	ldi	r18, 0x64	; 100
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	a9 d0       	rcall	.+338    	; 0x2136 <__divmodsi4>
    1fe4:	20 93 1c 0c 	sts	0x0C1C, r18	; 0x800c1c <mGyroZ>
    1fe8:	30 93 1d 0c 	sts	0x0C1D, r19	; 0x800c1d <mGyroZ+0x1>
		printf( "### mGyroZ %d\r\n", mGyroZ);
    1fec:	3f 93       	push	r19
    1fee:	2f 93       	push	r18
    1ff0:	87 ed       	ldi	r24, 0xD7	; 215
    1ff2:	98 e0       	ldi	r25, 0x08	; 8
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	e2 d3       	rcall	.+1988   	; 0x27be <printf>
		mGyroCountZ = 0;
    1ffa:	10 92 17 0c 	sts	0x0C17, r1	; 0x800c17 <mGyroCountZ+0x1>
    1ffe:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <mGyroCountZ>
		mTempZ = 0;
    2002:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <mTempZ>
    2006:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <mTempZ+0x1>
    200a:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <mTempZ+0x2>
    200e:	10 92 25 0c 	sts	0x0C25, r1	; 0x800c25 <mTempZ+0x3>
		
		float gravityZ = getGZ();
    2012:	05 df       	rcall	.-502    	; 0x1e1e <getGZ>
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	08 95       	ret
		
	} else {
		printf( "### Oops!\r\n");
    201e:	88 e8       	ldi	r24, 0x88	; 136
    2020:	98 e0       	ldi	r25, 0x08	; 8
    2022:	e0 d3       	rcall	.+1984   	; 0x27e4 <puts>
		mGyroCountZ = 0;
    2024:	10 92 17 0c 	sts	0x0C17, r1	; 0x800c17 <mGyroCountZ+0x1>
    2028:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <mGyroCountZ>
		mTempZ = 0;
    202c:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <mTempZ>
    2030:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <mTempZ+0x1>
    2034:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <mTempZ+0x2>
    2038:	10 92 25 0c 	sts	0x0C25, r1	; 0x800c25 <mTempZ+0x3>
    203c:	08 95       	ret

0000203e <initSerial>:
			}
		}
		//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	71 ee       	ldi	r23, 0xE1	; 225
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 ed 05 	call	0xbda	; 0xbda <serial_initialize>
    204a:	78 94       	sei
    204c:	08 95       	ret

0000204e <checkSerialRead>:
    204e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <serial_get_qstate>
    2052:	18 16       	cp	r1, r24
    2054:	19 06       	cpc	r1, r25
    2056:	0c f0       	brlt	.+2      	; 0x205a <checkSerialRead+0xc>
    2058:	3e c0       	rjmp	.+124    	; 0x20d6 <checkSerialRead+0x88>
    205a:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <__iob>
    205e:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <__iob+0x1>
    2062:	6f d3       	rcall	.+1758   	; 0x2742 <fgetc>
    2064:	8a 30       	cpi	r24, 0x0A	; 10
    2066:	11 f0       	breq	.+4      	; 0x206c <checkSerialRead+0x1e>
    2068:	8d 30       	cpi	r24, 0x0D	; 13
    206a:	91 f4       	brne	.+36     	; 0x2090 <checkSerialRead+0x42>
    206c:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <buffCnt>
    2070:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <buffCnt+0x1>
    2074:	18 16       	cp	r1, r24
    2076:	19 06       	cpc	r1, r25
    2078:	8c f5       	brge	.+98     	; 0x20dc <checkSerialRead+0x8e>
    207a:	10 92 7f 0c 	sts	0x0C7F, r1	; 0x800c7f <buffCnt+0x1>
    207e:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <buffCnt>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <isRead+0x1>
    208a:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <isRead>
    208e:	08 95       	ret
    2090:	88 23       	and	r24, r24
    2092:	39 f1       	breq	.+78     	; 0x20e2 <checkSerialRead+0x94>
    2094:	20 91 7e 0c 	lds	r18, 0x0C7E	; 0x800c7e <buffCnt>
    2098:	30 91 7f 0c 	lds	r19, 0x0C7F	; 0x800c7f <buffCnt+0x1>
    209c:	a9 01       	movw	r20, r18
    209e:	4f 5f       	subi	r20, 0xFF	; 255
    20a0:	5f 4f       	sbci	r21, 0xFF	; 255
    20a2:	50 93 7f 0c 	sts	0x0C7F, r21	; 0x800c7f <buffCnt+0x1>
    20a6:	40 93 7e 0c 	sts	0x0C7E, r20	; 0x800c7e <buffCnt>
    20aa:	f9 01       	movw	r30, r18
    20ac:	e2 5d       	subi	r30, 0xD2	; 210
    20ae:	f3 4f       	sbci	r31, 0xF3	; 243
    20b0:	80 83       	st	Z, r24
    20b2:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <buffCnt>
    20b6:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <buffCnt+0x1>
    20ba:	8f 34       	cpi	r24, 0x4F	; 79
    20bc:	91 05       	cpc	r25, r1
    20be:	a4 f0       	brlt	.+40     	; 0x20e8 <checkSerialRead+0x9a>
    20c0:	10 92 7f 0c 	sts	0x0C7F, r1	; 0x800c7f <buffCnt+0x1>
    20c4:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <buffCnt>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <isRead+0x1>
    20d0:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <isRead>
    20d4:	08 95       	ret
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	08 95       	ret
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	08 95       	ret
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	08 95       	ret
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	08 95       	ret

000020ee <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
    20ee:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <isRead>
    20f2:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <isRead+0x1>
    20f6:	18 16       	cp	r1, r24
    20f8:	19 06       	cpc	r1, r25
    20fa:	3c f4       	brge	.+14     	; 0x210a <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
    20fc:	10 92 81 0c 	sts	0x0C81, r1	; 0x800c81 <isRead+0x1>
    2100:	10 92 80 0c 	sts	0x0C80, r1	; 0x800c80 <isRead>
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
    2104:	8e e2       	ldi	r24, 0x2E	; 46
    2106:	9c e0       	ldi	r25, 0x0C	; 12
    2108:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
    210e:	08 95       	ret

00002110 <__divmodhi4>:
    2110:	97 fb       	bst	r25, 7
    2112:	07 2e       	mov	r0, r23
    2114:	16 f4       	brtc	.+4      	; 0x211a <__divmodhi4+0xa>
    2116:	00 94       	com	r0
    2118:	06 d0       	rcall	.+12     	; 0x2126 <__divmodhi4_neg1>
    211a:	77 fd       	sbrc	r23, 7
    211c:	08 d0       	rcall	.+16     	; 0x212e <__divmodhi4_neg2>
    211e:	27 d0       	rcall	.+78     	; 0x216e <__udivmodhi4>
    2120:	07 fc       	sbrc	r0, 7
    2122:	05 d0       	rcall	.+10     	; 0x212e <__divmodhi4_neg2>
    2124:	3e f4       	brtc	.+14     	; 0x2134 <__divmodhi4_exit>

00002126 <__divmodhi4_neg1>:
    2126:	90 95       	com	r25
    2128:	81 95       	neg	r24
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	08 95       	ret

0000212e <__divmodhi4_neg2>:
    212e:	70 95       	com	r23
    2130:	61 95       	neg	r22
    2132:	7f 4f       	sbci	r23, 0xFF	; 255

00002134 <__divmodhi4_exit>:
    2134:	08 95       	ret

00002136 <__divmodsi4>:
    2136:	05 2e       	mov	r0, r21
    2138:	97 fb       	bst	r25, 7
    213a:	16 f4       	brtc	.+4      	; 0x2140 <__divmodsi4+0xa>
    213c:	00 94       	com	r0
    213e:	0f d0       	rcall	.+30     	; 0x215e <__negsi2>
    2140:	57 fd       	sbrc	r21, 7
    2142:	05 d0       	rcall	.+10     	; 0x214e <__divmodsi4_neg2>
    2144:	28 d0       	rcall	.+80     	; 0x2196 <__udivmodsi4>
    2146:	07 fc       	sbrc	r0, 7
    2148:	02 d0       	rcall	.+4      	; 0x214e <__divmodsi4_neg2>
    214a:	46 f4       	brtc	.+16     	; 0x215c <__divmodsi4_exit>
    214c:	08 c0       	rjmp	.+16     	; 0x215e <__negsi2>

0000214e <__divmodsi4_neg2>:
    214e:	50 95       	com	r21
    2150:	40 95       	com	r20
    2152:	30 95       	com	r19
    2154:	21 95       	neg	r18
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	4f 4f       	sbci	r20, 0xFF	; 255
    215a:	5f 4f       	sbci	r21, 0xFF	; 255

0000215c <__divmodsi4_exit>:
    215c:	08 95       	ret

0000215e <__negsi2>:
    215e:	90 95       	com	r25
    2160:	80 95       	com	r24
    2162:	70 95       	com	r23
    2164:	61 95       	neg	r22
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	8f 4f       	sbci	r24, 0xFF	; 255
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	08 95       	ret

0000216e <__udivmodhi4>:
    216e:	aa 1b       	sub	r26, r26
    2170:	bb 1b       	sub	r27, r27
    2172:	51 e1       	ldi	r21, 0x11	; 17
    2174:	07 c0       	rjmp	.+14     	; 0x2184 <__udivmodhi4_ep>

00002176 <__udivmodhi4_loop>:
    2176:	aa 1f       	adc	r26, r26
    2178:	bb 1f       	adc	r27, r27
    217a:	a6 17       	cp	r26, r22
    217c:	b7 07       	cpc	r27, r23
    217e:	10 f0       	brcs	.+4      	; 0x2184 <__udivmodhi4_ep>
    2180:	a6 1b       	sub	r26, r22
    2182:	b7 0b       	sbc	r27, r23

00002184 <__udivmodhi4_ep>:
    2184:	88 1f       	adc	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	5a 95       	dec	r21
    218a:	a9 f7       	brne	.-22     	; 0x2176 <__udivmodhi4_loop>
    218c:	80 95       	com	r24
    218e:	90 95       	com	r25
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	08 95       	ret

00002196 <__udivmodsi4>:
    2196:	a1 e2       	ldi	r26, 0x21	; 33
    2198:	1a 2e       	mov	r1, r26
    219a:	aa 1b       	sub	r26, r26
    219c:	bb 1b       	sub	r27, r27
    219e:	fd 01       	movw	r30, r26
    21a0:	0d c0       	rjmp	.+26     	; 0x21bc <__udivmodsi4_ep>

000021a2 <__udivmodsi4_loop>:
    21a2:	aa 1f       	adc	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	ee 1f       	adc	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	a2 17       	cp	r26, r18
    21ac:	b3 07       	cpc	r27, r19
    21ae:	e4 07       	cpc	r30, r20
    21b0:	f5 07       	cpc	r31, r21
    21b2:	20 f0       	brcs	.+8      	; 0x21bc <__udivmodsi4_ep>
    21b4:	a2 1b       	sub	r26, r18
    21b6:	b3 0b       	sbc	r27, r19
    21b8:	e4 0b       	sbc	r30, r20
    21ba:	f5 0b       	sbc	r31, r21

000021bc <__udivmodsi4_ep>:
    21bc:	66 1f       	adc	r22, r22
    21be:	77 1f       	adc	r23, r23
    21c0:	88 1f       	adc	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	1a 94       	dec	r1
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <__udivmodsi4_loop>
    21c8:	60 95       	com	r22
    21ca:	70 95       	com	r23
    21cc:	80 95       	com	r24
    21ce:	90 95       	com	r25
    21d0:	9b 01       	movw	r18, r22
    21d2:	ac 01       	movw	r20, r24
    21d4:	bd 01       	movw	r22, r26
    21d6:	cf 01       	movw	r24, r30
    21d8:	08 95       	ret

000021da <__subsf3>:
    21da:	50 58       	subi	r21, 0x80	; 128

000021dc <__addsf3>:
    21dc:	bb 27       	eor	r27, r27
    21de:	aa 27       	eor	r26, r26
    21e0:	0e d0       	rcall	.+28     	; 0x21fe <__addsf3x>
    21e2:	75 c1       	rjmp	.+746    	; 0x24ce <__fp_round>
    21e4:	66 d1       	rcall	.+716    	; 0x24b2 <__fp_pscA>
    21e6:	30 f0       	brcs	.+12     	; 0x21f4 <__addsf3+0x18>
    21e8:	6b d1       	rcall	.+726    	; 0x24c0 <__fp_pscB>
    21ea:	20 f0       	brcs	.+8      	; 0x21f4 <__addsf3+0x18>
    21ec:	31 f4       	brne	.+12     	; 0x21fa <__addsf3+0x1e>
    21ee:	9f 3f       	cpi	r25, 0xFF	; 255
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <__addsf3+0x1a>
    21f2:	1e f4       	brtc	.+6      	; 0x21fa <__addsf3+0x1e>
    21f4:	5b c1       	rjmp	.+694    	; 0x24ac <__fp_nan>
    21f6:	0e f4       	brtc	.+2      	; 0x21fa <__addsf3+0x1e>
    21f8:	e0 95       	com	r30
    21fa:	e7 fb       	bst	r30, 7
    21fc:	51 c1       	rjmp	.+674    	; 0x24a0 <__fp_inf>

000021fe <__addsf3x>:
    21fe:	e9 2f       	mov	r30, r25
    2200:	77 d1       	rcall	.+750    	; 0x24f0 <__fp_split3>
    2202:	80 f3       	brcs	.-32     	; 0x21e4 <__addsf3+0x8>
    2204:	ba 17       	cp	r27, r26
    2206:	62 07       	cpc	r22, r18
    2208:	73 07       	cpc	r23, r19
    220a:	84 07       	cpc	r24, r20
    220c:	95 07       	cpc	r25, r21
    220e:	18 f0       	brcs	.+6      	; 0x2216 <__stack+0x17>
    2210:	71 f4       	brne	.+28     	; 0x222e <__stack+0x2f>
    2212:	9e f5       	brtc	.+102    	; 0x227a <__stack+0x7b>
    2214:	8f c1       	rjmp	.+798    	; 0x2534 <__fp_zero>
    2216:	0e f4       	brtc	.+2      	; 0x221a <__stack+0x1b>
    2218:	e0 95       	com	r30
    221a:	0b 2e       	mov	r0, r27
    221c:	ba 2f       	mov	r27, r26
    221e:	a0 2d       	mov	r26, r0
    2220:	0b 01       	movw	r0, r22
    2222:	b9 01       	movw	r22, r18
    2224:	90 01       	movw	r18, r0
    2226:	0c 01       	movw	r0, r24
    2228:	ca 01       	movw	r24, r20
    222a:	a0 01       	movw	r20, r0
    222c:	11 24       	eor	r1, r1
    222e:	ff 27       	eor	r31, r31
    2230:	59 1b       	sub	r21, r25
    2232:	99 f0       	breq	.+38     	; 0x225a <__stack+0x5b>
    2234:	59 3f       	cpi	r21, 0xF9	; 249
    2236:	50 f4       	brcc	.+20     	; 0x224c <__stack+0x4d>
    2238:	50 3e       	cpi	r21, 0xE0	; 224
    223a:	68 f1       	brcs	.+90     	; 0x2296 <__stack+0x97>
    223c:	1a 16       	cp	r1, r26
    223e:	f0 40       	sbci	r31, 0x00	; 0
    2240:	a2 2f       	mov	r26, r18
    2242:	23 2f       	mov	r18, r19
    2244:	34 2f       	mov	r19, r20
    2246:	44 27       	eor	r20, r20
    2248:	58 5f       	subi	r21, 0xF8	; 248
    224a:	f3 cf       	rjmp	.-26     	; 0x2232 <__stack+0x33>
    224c:	46 95       	lsr	r20
    224e:	37 95       	ror	r19
    2250:	27 95       	ror	r18
    2252:	a7 95       	ror	r26
    2254:	f0 40       	sbci	r31, 0x00	; 0
    2256:	53 95       	inc	r21
    2258:	c9 f7       	brne	.-14     	; 0x224c <__stack+0x4d>
    225a:	7e f4       	brtc	.+30     	; 0x227a <__stack+0x7b>
    225c:	1f 16       	cp	r1, r31
    225e:	ba 0b       	sbc	r27, r26
    2260:	62 0b       	sbc	r22, r18
    2262:	73 0b       	sbc	r23, r19
    2264:	84 0b       	sbc	r24, r20
    2266:	ba f0       	brmi	.+46     	; 0x2296 <__stack+0x97>
    2268:	91 50       	subi	r25, 0x01	; 1
    226a:	a1 f0       	breq	.+40     	; 0x2294 <__stack+0x95>
    226c:	ff 0f       	add	r31, r31
    226e:	bb 1f       	adc	r27, r27
    2270:	66 1f       	adc	r22, r22
    2272:	77 1f       	adc	r23, r23
    2274:	88 1f       	adc	r24, r24
    2276:	c2 f7       	brpl	.-16     	; 0x2268 <__stack+0x69>
    2278:	0e c0       	rjmp	.+28     	; 0x2296 <__stack+0x97>
    227a:	ba 0f       	add	r27, r26
    227c:	62 1f       	adc	r22, r18
    227e:	73 1f       	adc	r23, r19
    2280:	84 1f       	adc	r24, r20
    2282:	48 f4       	brcc	.+18     	; 0x2296 <__stack+0x97>
    2284:	87 95       	ror	r24
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	b7 95       	ror	r27
    228c:	f7 95       	ror	r31
    228e:	9e 3f       	cpi	r25, 0xFE	; 254
    2290:	08 f0       	brcs	.+2      	; 0x2294 <__stack+0x95>
    2292:	b3 cf       	rjmp	.-154    	; 0x21fa <__addsf3+0x1e>
    2294:	93 95       	inc	r25
    2296:	88 0f       	add	r24, r24
    2298:	08 f0       	brcs	.+2      	; 0x229c <__stack+0x9d>
    229a:	99 27       	eor	r25, r25
    229c:	ee 0f       	add	r30, r30
    229e:	97 95       	ror	r25
    22a0:	87 95       	ror	r24
    22a2:	08 95       	ret

000022a4 <__cmpsf2>:
    22a4:	d9 d0       	rcall	.+434    	; 0x2458 <__fp_cmp>
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <__cmpsf2+0x6>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	08 95       	ret

000022ac <__divsf3>:
    22ac:	0c d0       	rcall	.+24     	; 0x22c6 <__divsf3x>
    22ae:	0f c1       	rjmp	.+542    	; 0x24ce <__fp_round>
    22b0:	07 d1       	rcall	.+526    	; 0x24c0 <__fp_pscB>
    22b2:	40 f0       	brcs	.+16     	; 0x22c4 <__divsf3+0x18>
    22b4:	fe d0       	rcall	.+508    	; 0x24b2 <__fp_pscA>
    22b6:	30 f0       	brcs	.+12     	; 0x22c4 <__divsf3+0x18>
    22b8:	21 f4       	brne	.+8      	; 0x22c2 <__divsf3+0x16>
    22ba:	5f 3f       	cpi	r21, 0xFF	; 255
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <__divsf3+0x18>
    22be:	f0 c0       	rjmp	.+480    	; 0x24a0 <__fp_inf>
    22c0:	51 11       	cpse	r21, r1
    22c2:	39 c1       	rjmp	.+626    	; 0x2536 <__fp_szero>
    22c4:	f3 c0       	rjmp	.+486    	; 0x24ac <__fp_nan>

000022c6 <__divsf3x>:
    22c6:	14 d1       	rcall	.+552    	; 0x24f0 <__fp_split3>
    22c8:	98 f3       	brcs	.-26     	; 0x22b0 <__divsf3+0x4>

000022ca <__divsf3_pse>:
    22ca:	99 23       	and	r25, r25
    22cc:	c9 f3       	breq	.-14     	; 0x22c0 <__divsf3+0x14>
    22ce:	55 23       	and	r21, r21
    22d0:	b1 f3       	breq	.-20     	; 0x22be <__divsf3+0x12>
    22d2:	95 1b       	sub	r25, r21
    22d4:	55 0b       	sbc	r21, r21
    22d6:	bb 27       	eor	r27, r27
    22d8:	aa 27       	eor	r26, r26
    22da:	62 17       	cp	r22, r18
    22dc:	73 07       	cpc	r23, r19
    22de:	84 07       	cpc	r24, r20
    22e0:	38 f0       	brcs	.+14     	; 0x22f0 <__divsf3_pse+0x26>
    22e2:	9f 5f       	subi	r25, 0xFF	; 255
    22e4:	5f 4f       	sbci	r21, 0xFF	; 255
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	44 1f       	adc	r20, r20
    22ec:	aa 1f       	adc	r26, r26
    22ee:	a9 f3       	breq	.-22     	; 0x22da <__divsf3_pse+0x10>
    22f0:	33 d0       	rcall	.+102    	; 0x2358 <__divsf3_pse+0x8e>
    22f2:	0e 2e       	mov	r0, r30
    22f4:	3a f0       	brmi	.+14     	; 0x2304 <__divsf3_pse+0x3a>
    22f6:	e0 e8       	ldi	r30, 0x80	; 128
    22f8:	30 d0       	rcall	.+96     	; 0x235a <__divsf3_pse+0x90>
    22fa:	91 50       	subi	r25, 0x01	; 1
    22fc:	50 40       	sbci	r21, 0x00	; 0
    22fe:	e6 95       	lsr	r30
    2300:	00 1c       	adc	r0, r0
    2302:	ca f7       	brpl	.-14     	; 0x22f6 <__divsf3_pse+0x2c>
    2304:	29 d0       	rcall	.+82     	; 0x2358 <__divsf3_pse+0x8e>
    2306:	fe 2f       	mov	r31, r30
    2308:	27 d0       	rcall	.+78     	; 0x2358 <__divsf3_pse+0x8e>
    230a:	66 0f       	add	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	bb 1f       	adc	r27, r27
    2312:	26 17       	cp	r18, r22
    2314:	37 07       	cpc	r19, r23
    2316:	48 07       	cpc	r20, r24
    2318:	ab 07       	cpc	r26, r27
    231a:	b0 e8       	ldi	r27, 0x80	; 128
    231c:	09 f0       	breq	.+2      	; 0x2320 <__divsf3_pse+0x56>
    231e:	bb 0b       	sbc	r27, r27
    2320:	80 2d       	mov	r24, r0
    2322:	bf 01       	movw	r22, r30
    2324:	ff 27       	eor	r31, r31
    2326:	93 58       	subi	r25, 0x83	; 131
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	2a f0       	brmi	.+10     	; 0x2336 <__divsf3_pse+0x6c>
    232c:	9e 3f       	cpi	r25, 0xFE	; 254
    232e:	51 05       	cpc	r21, r1
    2330:	68 f0       	brcs	.+26     	; 0x234c <__divsf3_pse+0x82>
    2332:	b6 c0       	rjmp	.+364    	; 0x24a0 <__fp_inf>
    2334:	00 c1       	rjmp	.+512    	; 0x2536 <__fp_szero>
    2336:	5f 3f       	cpi	r21, 0xFF	; 255
    2338:	ec f3       	brlt	.-6      	; 0x2334 <__divsf3_pse+0x6a>
    233a:	98 3e       	cpi	r25, 0xE8	; 232
    233c:	dc f3       	brlt	.-10     	; 0x2334 <__divsf3_pse+0x6a>
    233e:	86 95       	lsr	r24
    2340:	77 95       	ror	r23
    2342:	67 95       	ror	r22
    2344:	b7 95       	ror	r27
    2346:	f7 95       	ror	r31
    2348:	9f 5f       	subi	r25, 0xFF	; 255
    234a:	c9 f7       	brne	.-14     	; 0x233e <__divsf3_pse+0x74>
    234c:	88 0f       	add	r24, r24
    234e:	91 1d       	adc	r25, r1
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret
    2358:	e1 e0       	ldi	r30, 0x01	; 1
    235a:	66 0f       	add	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	bb 1f       	adc	r27, r27
    2362:	62 17       	cp	r22, r18
    2364:	73 07       	cpc	r23, r19
    2366:	84 07       	cpc	r24, r20
    2368:	ba 07       	cpc	r27, r26
    236a:	20 f0       	brcs	.+8      	; 0x2374 <__divsf3_pse+0xaa>
    236c:	62 1b       	sub	r22, r18
    236e:	73 0b       	sbc	r23, r19
    2370:	84 0b       	sbc	r24, r20
    2372:	ba 0b       	sbc	r27, r26
    2374:	ee 1f       	adc	r30, r30
    2376:	88 f7       	brcc	.-30     	; 0x235a <__divsf3_pse+0x90>
    2378:	e0 95       	com	r30
    237a:	08 95       	ret

0000237c <__fixsfsi>:
    237c:	04 d0       	rcall	.+8      	; 0x2386 <__fixunssfsi>
    237e:	68 94       	set
    2380:	b1 11       	cpse	r27, r1
    2382:	d9 c0       	rjmp	.+434    	; 0x2536 <__fp_szero>
    2384:	08 95       	ret

00002386 <__fixunssfsi>:
    2386:	bc d0       	rcall	.+376    	; 0x2500 <__fp_splitA>
    2388:	88 f0       	brcs	.+34     	; 0x23ac <__fixunssfsi+0x26>
    238a:	9f 57       	subi	r25, 0x7F	; 127
    238c:	90 f0       	brcs	.+36     	; 0x23b2 <__fixunssfsi+0x2c>
    238e:	b9 2f       	mov	r27, r25
    2390:	99 27       	eor	r25, r25
    2392:	b7 51       	subi	r27, 0x17	; 23
    2394:	a0 f0       	brcs	.+40     	; 0x23be <__fixunssfsi+0x38>
    2396:	d1 f0       	breq	.+52     	; 0x23cc <__fixunssfsi+0x46>
    2398:	66 0f       	add	r22, r22
    239a:	77 1f       	adc	r23, r23
    239c:	88 1f       	adc	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	1a f0       	brmi	.+6      	; 0x23a8 <__fixunssfsi+0x22>
    23a2:	ba 95       	dec	r27
    23a4:	c9 f7       	brne	.-14     	; 0x2398 <__fixunssfsi+0x12>
    23a6:	12 c0       	rjmp	.+36     	; 0x23cc <__fixunssfsi+0x46>
    23a8:	b1 30       	cpi	r27, 0x01	; 1
    23aa:	81 f0       	breq	.+32     	; 0x23cc <__fixunssfsi+0x46>
    23ac:	c3 d0       	rcall	.+390    	; 0x2534 <__fp_zero>
    23ae:	b1 e0       	ldi	r27, 0x01	; 1
    23b0:	08 95       	ret
    23b2:	c0 c0       	rjmp	.+384    	; 0x2534 <__fp_zero>
    23b4:	67 2f       	mov	r22, r23
    23b6:	78 2f       	mov	r23, r24
    23b8:	88 27       	eor	r24, r24
    23ba:	b8 5f       	subi	r27, 0xF8	; 248
    23bc:	39 f0       	breq	.+14     	; 0x23cc <__fixunssfsi+0x46>
    23be:	b9 3f       	cpi	r27, 0xF9	; 249
    23c0:	cc f3       	brlt	.-14     	; 0x23b4 <__fixunssfsi+0x2e>
    23c2:	86 95       	lsr	r24
    23c4:	77 95       	ror	r23
    23c6:	67 95       	ror	r22
    23c8:	b3 95       	inc	r27
    23ca:	d9 f7       	brne	.-10     	; 0x23c2 <__fixunssfsi+0x3c>
    23cc:	3e f4       	brtc	.+14     	; 0x23dc <__fixunssfsi+0x56>
    23ce:	90 95       	com	r25
    23d0:	80 95       	com	r24
    23d2:	70 95       	com	r23
    23d4:	61 95       	neg	r22
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255
    23d8:	8f 4f       	sbci	r24, 0xFF	; 255
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	08 95       	ret

000023de <__floatunsisf>:
    23de:	e8 94       	clt
    23e0:	09 c0       	rjmp	.+18     	; 0x23f4 <__floatsisf+0x12>

000023e2 <__floatsisf>:
    23e2:	97 fb       	bst	r25, 7
    23e4:	3e f4       	brtc	.+14     	; 0x23f4 <__floatsisf+0x12>
    23e6:	90 95       	com	r25
    23e8:	80 95       	com	r24
    23ea:	70 95       	com	r23
    23ec:	61 95       	neg	r22
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	8f 4f       	sbci	r24, 0xFF	; 255
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	99 23       	and	r25, r25
    23f6:	a9 f0       	breq	.+42     	; 0x2422 <__floatsisf+0x40>
    23f8:	f9 2f       	mov	r31, r25
    23fa:	96 e9       	ldi	r25, 0x96	; 150
    23fc:	bb 27       	eor	r27, r27
    23fe:	93 95       	inc	r25
    2400:	f6 95       	lsr	r31
    2402:	87 95       	ror	r24
    2404:	77 95       	ror	r23
    2406:	67 95       	ror	r22
    2408:	b7 95       	ror	r27
    240a:	f1 11       	cpse	r31, r1
    240c:	f8 cf       	rjmp	.-16     	; 0x23fe <__floatsisf+0x1c>
    240e:	fa f4       	brpl	.+62     	; 0x244e <__floatsisf+0x6c>
    2410:	bb 0f       	add	r27, r27
    2412:	11 f4       	brne	.+4      	; 0x2418 <__floatsisf+0x36>
    2414:	60 ff       	sbrs	r22, 0
    2416:	1b c0       	rjmp	.+54     	; 0x244e <__floatsisf+0x6c>
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	8f 4f       	sbci	r24, 0xFF	; 255
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	16 c0       	rjmp	.+44     	; 0x244e <__floatsisf+0x6c>
    2422:	88 23       	and	r24, r24
    2424:	11 f0       	breq	.+4      	; 0x242a <__floatsisf+0x48>
    2426:	96 e9       	ldi	r25, 0x96	; 150
    2428:	11 c0       	rjmp	.+34     	; 0x244c <__floatsisf+0x6a>
    242a:	77 23       	and	r23, r23
    242c:	21 f0       	breq	.+8      	; 0x2436 <__floatsisf+0x54>
    242e:	9e e8       	ldi	r25, 0x8E	; 142
    2430:	87 2f       	mov	r24, r23
    2432:	76 2f       	mov	r23, r22
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <__floatsisf+0x5e>
    2436:	66 23       	and	r22, r22
    2438:	71 f0       	breq	.+28     	; 0x2456 <__floatsisf+0x74>
    243a:	96 e8       	ldi	r25, 0x86	; 134
    243c:	86 2f       	mov	r24, r22
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	2a f0       	brmi	.+10     	; 0x244e <__floatsisf+0x6c>
    2444:	9a 95       	dec	r25
    2446:	66 0f       	add	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	88 1f       	adc	r24, r24
    244c:	da f7       	brpl	.-10     	; 0x2444 <__floatsisf+0x62>
    244e:	88 0f       	add	r24, r24
    2450:	96 95       	lsr	r25
    2452:	87 95       	ror	r24
    2454:	97 f9       	bld	r25, 7
    2456:	08 95       	ret

00002458 <__fp_cmp>:
    2458:	99 0f       	add	r25, r25
    245a:	00 08       	sbc	r0, r0
    245c:	55 0f       	add	r21, r21
    245e:	aa 0b       	sbc	r26, r26
    2460:	e0 e8       	ldi	r30, 0x80	; 128
    2462:	fe ef       	ldi	r31, 0xFE	; 254
    2464:	16 16       	cp	r1, r22
    2466:	17 06       	cpc	r1, r23
    2468:	e8 07       	cpc	r30, r24
    246a:	f9 07       	cpc	r31, r25
    246c:	c0 f0       	brcs	.+48     	; 0x249e <__fp_cmp+0x46>
    246e:	12 16       	cp	r1, r18
    2470:	13 06       	cpc	r1, r19
    2472:	e4 07       	cpc	r30, r20
    2474:	f5 07       	cpc	r31, r21
    2476:	98 f0       	brcs	.+38     	; 0x249e <__fp_cmp+0x46>
    2478:	62 1b       	sub	r22, r18
    247a:	73 0b       	sbc	r23, r19
    247c:	84 0b       	sbc	r24, r20
    247e:	95 0b       	sbc	r25, r21
    2480:	39 f4       	brne	.+14     	; 0x2490 <__fp_cmp+0x38>
    2482:	0a 26       	eor	r0, r26
    2484:	61 f0       	breq	.+24     	; 0x249e <__fp_cmp+0x46>
    2486:	23 2b       	or	r18, r19
    2488:	24 2b       	or	r18, r20
    248a:	25 2b       	or	r18, r21
    248c:	21 f4       	brne	.+8      	; 0x2496 <__fp_cmp+0x3e>
    248e:	08 95       	ret
    2490:	0a 26       	eor	r0, r26
    2492:	09 f4       	brne	.+2      	; 0x2496 <__fp_cmp+0x3e>
    2494:	a1 40       	sbci	r26, 0x01	; 1
    2496:	a6 95       	lsr	r26
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	81 1d       	adc	r24, r1
    249c:	81 1d       	adc	r24, r1
    249e:	08 95       	ret

000024a0 <__fp_inf>:
    24a0:	97 f9       	bld	r25, 7
    24a2:	9f 67       	ori	r25, 0x7F	; 127
    24a4:	80 e8       	ldi	r24, 0x80	; 128
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	08 95       	ret

000024ac <__fp_nan>:
    24ac:	9f ef       	ldi	r25, 0xFF	; 255
    24ae:	80 ec       	ldi	r24, 0xC0	; 192
    24b0:	08 95       	ret

000024b2 <__fp_pscA>:
    24b2:	00 24       	eor	r0, r0
    24b4:	0a 94       	dec	r0
    24b6:	16 16       	cp	r1, r22
    24b8:	17 06       	cpc	r1, r23
    24ba:	18 06       	cpc	r1, r24
    24bc:	09 06       	cpc	r0, r25
    24be:	08 95       	ret

000024c0 <__fp_pscB>:
    24c0:	00 24       	eor	r0, r0
    24c2:	0a 94       	dec	r0
    24c4:	12 16       	cp	r1, r18
    24c6:	13 06       	cpc	r1, r19
    24c8:	14 06       	cpc	r1, r20
    24ca:	05 06       	cpc	r0, r21
    24cc:	08 95       	ret

000024ce <__fp_round>:
    24ce:	09 2e       	mov	r0, r25
    24d0:	03 94       	inc	r0
    24d2:	00 0c       	add	r0, r0
    24d4:	11 f4       	brne	.+4      	; 0x24da <__fp_round+0xc>
    24d6:	88 23       	and	r24, r24
    24d8:	52 f0       	brmi	.+20     	; 0x24ee <__fp_round+0x20>
    24da:	bb 0f       	add	r27, r27
    24dc:	40 f4       	brcc	.+16     	; 0x24ee <__fp_round+0x20>
    24de:	bf 2b       	or	r27, r31
    24e0:	11 f4       	brne	.+4      	; 0x24e6 <__fp_round+0x18>
    24e2:	60 ff       	sbrs	r22, 0
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <__fp_round+0x20>
    24e6:	6f 5f       	subi	r22, 0xFF	; 255
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	8f 4f       	sbci	r24, 0xFF	; 255
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	08 95       	ret

000024f0 <__fp_split3>:
    24f0:	57 fd       	sbrc	r21, 7
    24f2:	90 58       	subi	r25, 0x80	; 128
    24f4:	44 0f       	add	r20, r20
    24f6:	55 1f       	adc	r21, r21
    24f8:	59 f0       	breq	.+22     	; 0x2510 <__fp_splitA+0x10>
    24fa:	5f 3f       	cpi	r21, 0xFF	; 255
    24fc:	71 f0       	breq	.+28     	; 0x251a <__fp_splitA+0x1a>
    24fe:	47 95       	ror	r20

00002500 <__fp_splitA>:
    2500:	88 0f       	add	r24, r24
    2502:	97 fb       	bst	r25, 7
    2504:	99 1f       	adc	r25, r25
    2506:	61 f0       	breq	.+24     	; 0x2520 <__fp_splitA+0x20>
    2508:	9f 3f       	cpi	r25, 0xFF	; 255
    250a:	79 f0       	breq	.+30     	; 0x252a <__fp_splitA+0x2a>
    250c:	87 95       	ror	r24
    250e:	08 95       	ret
    2510:	12 16       	cp	r1, r18
    2512:	13 06       	cpc	r1, r19
    2514:	14 06       	cpc	r1, r20
    2516:	55 1f       	adc	r21, r21
    2518:	f2 cf       	rjmp	.-28     	; 0x24fe <__fp_split3+0xe>
    251a:	46 95       	lsr	r20
    251c:	f1 df       	rcall	.-30     	; 0x2500 <__fp_splitA>
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <__fp_splitA+0x30>
    2520:	16 16       	cp	r1, r22
    2522:	17 06       	cpc	r1, r23
    2524:	18 06       	cpc	r1, r24
    2526:	99 1f       	adc	r25, r25
    2528:	f1 cf       	rjmp	.-30     	; 0x250c <__fp_splitA+0xc>
    252a:	86 95       	lsr	r24
    252c:	71 05       	cpc	r23, r1
    252e:	61 05       	cpc	r22, r1
    2530:	08 94       	sec
    2532:	08 95       	ret

00002534 <__fp_zero>:
    2534:	e8 94       	clt

00002536 <__fp_szero>:
    2536:	bb 27       	eor	r27, r27
    2538:	66 27       	eor	r22, r22
    253a:	77 27       	eor	r23, r23
    253c:	cb 01       	movw	r24, r22
    253e:	97 f9       	bld	r25, 7
    2540:	08 95       	ret

00002542 <__gesf2>:
    2542:	8a df       	rcall	.-236    	; 0x2458 <__fp_cmp>
    2544:	08 f4       	brcc	.+2      	; 0x2548 <__gesf2+0x6>
    2546:	8f ef       	ldi	r24, 0xFF	; 255
    2548:	08 95       	ret

0000254a <__mulsf3>:
    254a:	0b d0       	rcall	.+22     	; 0x2562 <__mulsf3x>
    254c:	c0 cf       	rjmp	.-128    	; 0x24ce <__fp_round>
    254e:	b1 df       	rcall	.-158    	; 0x24b2 <__fp_pscA>
    2550:	28 f0       	brcs	.+10     	; 0x255c <__mulsf3+0x12>
    2552:	b6 df       	rcall	.-148    	; 0x24c0 <__fp_pscB>
    2554:	18 f0       	brcs	.+6      	; 0x255c <__mulsf3+0x12>
    2556:	95 23       	and	r25, r21
    2558:	09 f0       	breq	.+2      	; 0x255c <__mulsf3+0x12>
    255a:	a2 cf       	rjmp	.-188    	; 0x24a0 <__fp_inf>
    255c:	a7 cf       	rjmp	.-178    	; 0x24ac <__fp_nan>
    255e:	11 24       	eor	r1, r1
    2560:	ea cf       	rjmp	.-44     	; 0x2536 <__fp_szero>

00002562 <__mulsf3x>:
    2562:	c6 df       	rcall	.-116    	; 0x24f0 <__fp_split3>
    2564:	a0 f3       	brcs	.-24     	; 0x254e <__mulsf3+0x4>

00002566 <__mulsf3_pse>:
    2566:	95 9f       	mul	r25, r21
    2568:	d1 f3       	breq	.-12     	; 0x255e <__mulsf3+0x14>
    256a:	95 0f       	add	r25, r21
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	55 1f       	adc	r21, r21
    2570:	62 9f       	mul	r22, r18
    2572:	f0 01       	movw	r30, r0
    2574:	72 9f       	mul	r23, r18
    2576:	bb 27       	eor	r27, r27
    2578:	f0 0d       	add	r31, r0
    257a:	b1 1d       	adc	r27, r1
    257c:	63 9f       	mul	r22, r19
    257e:	aa 27       	eor	r26, r26
    2580:	f0 0d       	add	r31, r0
    2582:	b1 1d       	adc	r27, r1
    2584:	aa 1f       	adc	r26, r26
    2586:	64 9f       	mul	r22, r20
    2588:	66 27       	eor	r22, r22
    258a:	b0 0d       	add	r27, r0
    258c:	a1 1d       	adc	r26, r1
    258e:	66 1f       	adc	r22, r22
    2590:	82 9f       	mul	r24, r18
    2592:	22 27       	eor	r18, r18
    2594:	b0 0d       	add	r27, r0
    2596:	a1 1d       	adc	r26, r1
    2598:	62 1f       	adc	r22, r18
    259a:	73 9f       	mul	r23, r19
    259c:	b0 0d       	add	r27, r0
    259e:	a1 1d       	adc	r26, r1
    25a0:	62 1f       	adc	r22, r18
    25a2:	83 9f       	mul	r24, r19
    25a4:	a0 0d       	add	r26, r0
    25a6:	61 1d       	adc	r22, r1
    25a8:	22 1f       	adc	r18, r18
    25aa:	74 9f       	mul	r23, r20
    25ac:	33 27       	eor	r19, r19
    25ae:	a0 0d       	add	r26, r0
    25b0:	61 1d       	adc	r22, r1
    25b2:	23 1f       	adc	r18, r19
    25b4:	84 9f       	mul	r24, r20
    25b6:	60 0d       	add	r22, r0
    25b8:	21 1d       	adc	r18, r1
    25ba:	82 2f       	mov	r24, r18
    25bc:	76 2f       	mov	r23, r22
    25be:	6a 2f       	mov	r22, r26
    25c0:	11 24       	eor	r1, r1
    25c2:	9f 57       	subi	r25, 0x7F	; 127
    25c4:	50 40       	sbci	r21, 0x00	; 0
    25c6:	8a f0       	brmi	.+34     	; 0x25ea <__mulsf3_pse+0x84>
    25c8:	e1 f0       	breq	.+56     	; 0x2602 <__mulsf3_pse+0x9c>
    25ca:	88 23       	and	r24, r24
    25cc:	4a f0       	brmi	.+18     	; 0x25e0 <__mulsf3_pse+0x7a>
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	bb 1f       	adc	r27, r27
    25d4:	66 1f       	adc	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	91 50       	subi	r25, 0x01	; 1
    25dc:	50 40       	sbci	r21, 0x00	; 0
    25de:	a9 f7       	brne	.-22     	; 0x25ca <__mulsf3_pse+0x64>
    25e0:	9e 3f       	cpi	r25, 0xFE	; 254
    25e2:	51 05       	cpc	r21, r1
    25e4:	70 f0       	brcs	.+28     	; 0x2602 <__mulsf3_pse+0x9c>
    25e6:	5c cf       	rjmp	.-328    	; 0x24a0 <__fp_inf>
    25e8:	a6 cf       	rjmp	.-180    	; 0x2536 <__fp_szero>
    25ea:	5f 3f       	cpi	r21, 0xFF	; 255
    25ec:	ec f3       	brlt	.-6      	; 0x25e8 <__mulsf3_pse+0x82>
    25ee:	98 3e       	cpi	r25, 0xE8	; 232
    25f0:	dc f3       	brlt	.-10     	; 0x25e8 <__mulsf3_pse+0x82>
    25f2:	86 95       	lsr	r24
    25f4:	77 95       	ror	r23
    25f6:	67 95       	ror	r22
    25f8:	b7 95       	ror	r27
    25fa:	f7 95       	ror	r31
    25fc:	e7 95       	ror	r30
    25fe:	9f 5f       	subi	r25, 0xFF	; 255
    2600:	c1 f7       	brne	.-16     	; 0x25f2 <__mulsf3_pse+0x8c>
    2602:	fe 2b       	or	r31, r30
    2604:	88 0f       	add	r24, r24
    2606:	91 1d       	adc	r25, r1
    2608:	96 95       	lsr	r25
    260a:	87 95       	ror	r24
    260c:	97 f9       	bld	r25, 7
    260e:	08 95       	ret

00002610 <atoi>:
    2610:	fc 01       	movw	r30, r24
    2612:	88 27       	eor	r24, r24
    2614:	99 27       	eor	r25, r25
    2616:	e8 94       	clt
    2618:	21 91       	ld	r18, Z+
    261a:	20 32       	cpi	r18, 0x20	; 32
    261c:	e9 f3       	breq	.-6      	; 0x2618 <atoi+0x8>
    261e:	29 30       	cpi	r18, 0x09	; 9
    2620:	10 f0       	brcs	.+4      	; 0x2626 <atoi+0x16>
    2622:	2e 30       	cpi	r18, 0x0E	; 14
    2624:	c8 f3       	brcs	.-14     	; 0x2618 <atoi+0x8>
    2626:	2b 32       	cpi	r18, 0x2B	; 43
    2628:	39 f0       	breq	.+14     	; 0x2638 <atoi+0x28>
    262a:	2d 32       	cpi	r18, 0x2D	; 45
    262c:	31 f4       	brne	.+12     	; 0x263a <atoi+0x2a>
    262e:	68 94       	set
    2630:	03 c0       	rjmp	.+6      	; 0x2638 <atoi+0x28>
    2632:	35 d0       	rcall	.+106    	; 0x269e <__mulhi_const_10>
    2634:	82 0f       	add	r24, r18
    2636:	91 1d       	adc	r25, r1
    2638:	21 91       	ld	r18, Z+
    263a:	20 53       	subi	r18, 0x30	; 48
    263c:	2a 30       	cpi	r18, 0x0A	; 10
    263e:	c8 f3       	brcs	.-14     	; 0x2632 <atoi+0x22>
    2640:	1e f4       	brtc	.+6      	; 0x2648 <atoi+0x38>
    2642:	90 95       	com	r25
    2644:	81 95       	neg	r24
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	08 95       	ret

0000264a <strtok>:
    264a:	48 e5       	ldi	r20, 0x58	; 88
    264c:	5b e0       	ldi	r21, 0x0B	; 11
    264e:	00 c0       	rjmp	.+0      	; 0x2650 <strtok_r>

00002650 <strtok_r>:
    2650:	fa 01       	movw	r30, r20
    2652:	a1 91       	ld	r26, Z+
    2654:	b0 81       	ld	r27, Z
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	19 f4       	brne	.+6      	; 0x2660 <strtok_r+0x10>
    265a:	10 97       	sbiw	r26, 0x00	; 0
    265c:	e1 f0       	breq	.+56     	; 0x2696 <strtok_r+0x46>
    265e:	cd 01       	movw	r24, r26
    2660:	dc 01       	movw	r26, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0d 90       	ld	r0, X+
    2666:	00 20       	and	r0, r0
    2668:	11 f4       	brne	.+4      	; 0x266e <strtok_r+0x1e>
    266a:	c0 01       	movw	r24, r0
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <strtok_r+0x44>
    266e:	fb 01       	movw	r30, r22
    2670:	21 91       	ld	r18, Z+
    2672:	22 23       	and	r18, r18
    2674:	19 f0       	breq	.+6      	; 0x267c <strtok_r+0x2c>
    2676:	20 15       	cp	r18, r0
    2678:	d9 f7       	brne	.-10     	; 0x2670 <strtok_r+0x20>
    267a:	f3 cf       	rjmp	.-26     	; 0x2662 <strtok_r+0x12>
    267c:	fb 01       	movw	r30, r22
    267e:	21 91       	ld	r18, Z+
    2680:	20 15       	cp	r18, r0
    2682:	19 f4       	brne	.+6      	; 0x268a <strtok_r+0x3a>
    2684:	1e 92       	st	-X, r1
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <strtok_r+0x46>
    268a:	22 23       	and	r18, r18
    268c:	c1 f7       	brne	.-16     	; 0x267e <strtok_r+0x2e>
    268e:	0d 90       	ld	r0, X+
    2690:	00 20       	and	r0, r0
    2692:	a1 f7       	brne	.-24     	; 0x267c <strtok_r+0x2c>
    2694:	d0 01       	movw	r26, r0
    2696:	fa 01       	movw	r30, r20
    2698:	a1 93       	st	Z+, r26
    269a:	b0 83       	st	Z, r27
    269c:	08 95       	ret

0000269e <__mulhi_const_10>:
    269e:	7a e0       	ldi	r23, 0x0A	; 10
    26a0:	97 9f       	mul	r25, r23
    26a2:	90 2d       	mov	r25, r0
    26a4:	87 9f       	mul	r24, r23
    26a6:	80 2d       	mov	r24, r0
    26a8:	91 0d       	add	r25, r1
    26aa:	11 24       	eor	r1, r1
    26ac:	08 95       	ret

000026ae <fdevopen>:
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	31 f4       	brne	.+12     	; 0x26c6 <fdevopen+0x18>
    26ba:	61 15       	cp	r22, r1
    26bc:	71 05       	cpc	r23, r1
    26be:	19 f4       	brne	.+6      	; 0x26c6 <fdevopen+0x18>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	39 c0       	rjmp	.+114    	; 0x2738 <fdevopen+0x8a>
    26c6:	8b 01       	movw	r16, r22
    26c8:	ec 01       	movw	r28, r24
    26ca:	6e e0       	ldi	r22, 0x0E	; 14
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	a6 d2       	rcall	.+1356   	; 0x2c20 <calloc>
    26d4:	fc 01       	movw	r30, r24
    26d6:	89 2b       	or	r24, r25
    26d8:	99 f3       	breq	.-26     	; 0x26c0 <fdevopen+0x12>
    26da:	80 e8       	ldi	r24, 0x80	; 128
    26dc:	83 83       	std	Z+3, r24	; 0x03
    26de:	01 15       	cp	r16, r1
    26e0:	11 05       	cpc	r17, r1
    26e2:	71 f0       	breq	.+28     	; 0x2700 <fdevopen+0x52>
    26e4:	13 87       	std	Z+11, r17	; 0x0b
    26e6:	02 87       	std	Z+10, r16	; 0x0a
    26e8:	81 e8       	ldi	r24, 0x81	; 129
    26ea:	83 83       	std	Z+3, r24	; 0x03
    26ec:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <__iob>
    26f0:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <__iob+0x1>
    26f4:	89 2b       	or	r24, r25
    26f6:	21 f4       	brne	.+8      	; 0x2700 <fdevopen+0x52>
    26f8:	f0 93 8d 0c 	sts	0x0C8D, r31	; 0x800c8d <__iob+0x1>
    26fc:	e0 93 8c 0c 	sts	0x0C8C, r30	; 0x800c8c <__iob>
    2700:	20 97       	sbiw	r28, 0x00	; 0
    2702:	c9 f0       	breq	.+50     	; 0x2736 <fdevopen+0x88>
    2704:	d1 87       	std	Z+9, r29	; 0x09
    2706:	c0 87       	std	Z+8, r28	; 0x08
    2708:	83 81       	ldd	r24, Z+3	; 0x03
    270a:	82 60       	ori	r24, 0x02	; 2
    270c:	83 83       	std	Z+3, r24	; 0x03
    270e:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <__iob+0x2>
    2712:	90 91 8f 0c 	lds	r25, 0x0C8F	; 0x800c8f <__iob+0x3>
    2716:	89 2b       	or	r24, r25
    2718:	71 f4       	brne	.+28     	; 0x2736 <fdevopen+0x88>
    271a:	f0 93 8f 0c 	sts	0x0C8F, r31	; 0x800c8f <__iob+0x3>
    271e:	e0 93 8e 0c 	sts	0x0C8E, r30	; 0x800c8e <__iob+0x2>
    2722:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <__iob+0x4>
    2726:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <__iob+0x5>
    272a:	89 2b       	or	r24, r25
    272c:	21 f4       	brne	.+8      	; 0x2736 <fdevopen+0x88>
    272e:	f0 93 91 0c 	sts	0x0C91, r31	; 0x800c91 <__iob+0x5>
    2732:	e0 93 90 0c 	sts	0x0C90, r30	; 0x800c90 <__iob+0x4>
    2736:	cf 01       	movw	r24, r30
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	08 95       	ret

00002742 <fgetc>:
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	ec 01       	movw	r28, r24
    2748:	2b 81       	ldd	r18, Y+3	; 0x03
    274a:	20 ff       	sbrs	r18, 0
    274c:	33 c0       	rjmp	.+102    	; 0x27b4 <fgetc+0x72>
    274e:	26 ff       	sbrs	r18, 6
    2750:	0a c0       	rjmp	.+20     	; 0x2766 <fgetc+0x24>
    2752:	2f 7b       	andi	r18, 0xBF	; 191
    2754:	2b 83       	std	Y+3, r18	; 0x03
    2756:	8e 81       	ldd	r24, Y+6	; 0x06
    2758:	9f 81       	ldd	r25, Y+7	; 0x07
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	9f 83       	std	Y+7, r25	; 0x07
    275e:	8e 83       	std	Y+6, r24	; 0x06
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	29 c0       	rjmp	.+82     	; 0x27b8 <fgetc+0x76>
    2766:	22 ff       	sbrs	r18, 2
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <fgetc+0x46>
    276a:	e8 81       	ld	r30, Y
    276c:	f9 81       	ldd	r31, Y+1	; 0x01
    276e:	80 81       	ld	r24, Z
    2770:	08 2e       	mov	r0, r24
    2772:	00 0c       	add	r0, r0
    2774:	99 0b       	sbc	r25, r25
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	19 f4       	brne	.+6      	; 0x2780 <fgetc+0x3e>
    277a:	20 62       	ori	r18, 0x20	; 32
    277c:	2b 83       	std	Y+3, r18	; 0x03
    277e:	1a c0       	rjmp	.+52     	; 0x27b4 <fgetc+0x72>
    2780:	31 96       	adiw	r30, 0x01	; 1
    2782:	f9 83       	std	Y+1, r31	; 0x01
    2784:	e8 83       	st	Y, r30
    2786:	0e c0       	rjmp	.+28     	; 0x27a4 <fgetc+0x62>
    2788:	ea 85       	ldd	r30, Y+10	; 0x0a
    278a:	fb 85       	ldd	r31, Y+11	; 0x0b
    278c:	19 95       	eicall
    278e:	97 ff       	sbrs	r25, 7
    2790:	09 c0       	rjmp	.+18     	; 0x27a4 <fgetc+0x62>
    2792:	2b 81       	ldd	r18, Y+3	; 0x03
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	11 f0       	breq	.+4      	; 0x279c <fgetc+0x5a>
    2798:	80 e2       	ldi	r24, 0x20	; 32
    279a:	01 c0       	rjmp	.+2      	; 0x279e <fgetc+0x5c>
    279c:	80 e1       	ldi	r24, 0x10	; 16
    279e:	82 2b       	or	r24, r18
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	08 c0       	rjmp	.+16     	; 0x27b4 <fgetc+0x72>
    27a4:	2e 81       	ldd	r18, Y+6	; 0x06
    27a6:	3f 81       	ldd	r19, Y+7	; 0x07
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	3f 83       	std	Y+7, r19	; 0x07
    27ae:	2e 83       	std	Y+6, r18	; 0x06
    27b0:	99 27       	eor	r25, r25
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <fgetc+0x76>
    27b4:	8f ef       	ldi	r24, 0xFF	; 255
    27b6:	9f ef       	ldi	r25, 0xFF	; 255
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <printf>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	ae 01       	movw	r20, r28
    27c8:	4a 5f       	subi	r20, 0xFA	; 250
    27ca:	5f 4f       	sbci	r21, 0xFF	; 255
    27cc:	fa 01       	movw	r30, r20
    27ce:	61 91       	ld	r22, Z+
    27d0:	71 91       	ld	r23, Z+
    27d2:	af 01       	movw	r20, r30
    27d4:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <__iob+0x2>
    27d8:	90 91 8f 0c 	lds	r25, 0x0C8F	; 0x800c8f <__iob+0x3>
    27dc:	33 d0       	rcall	.+102    	; 0x2844 <vfprintf>
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	08 95       	ret

000027e4 <puts>:
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	e0 91 8e 0c 	lds	r30, 0x0C8E	; 0x800c8e <__iob+0x2>
    27f0:	f0 91 8f 0c 	lds	r31, 0x0C8F	; 0x800c8f <__iob+0x3>
    27f4:	23 81       	ldd	r18, Z+3	; 0x03
    27f6:	21 ff       	sbrs	r18, 1
    27f8:	1b c0       	rjmp	.+54     	; 0x2830 <puts+0x4c>
    27fa:	8c 01       	movw	r16, r24
    27fc:	d0 e0       	ldi	r29, 0x00	; 0
    27fe:	c0 e0       	ldi	r28, 0x00	; 0
    2800:	f8 01       	movw	r30, r16
    2802:	81 91       	ld	r24, Z+
    2804:	8f 01       	movw	r16, r30
    2806:	60 91 8e 0c 	lds	r22, 0x0C8E	; 0x800c8e <__iob+0x2>
    280a:	70 91 8f 0c 	lds	r23, 0x0C8F	; 0x800c8f <__iob+0x3>
    280e:	db 01       	movw	r26, r22
    2810:	18 96       	adiw	r26, 0x08	; 8
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	19 97       	sbiw	r26, 0x09	; 9
    2818:	88 23       	and	r24, r24
    281a:	31 f0       	breq	.+12     	; 0x2828 <puts+0x44>
    281c:	19 95       	eicall
    281e:	89 2b       	or	r24, r25
    2820:	79 f3       	breq	.-34     	; 0x2800 <puts+0x1c>
    2822:	df ef       	ldi	r29, 0xFF	; 255
    2824:	cf ef       	ldi	r28, 0xFF	; 255
    2826:	ec cf       	rjmp	.-40     	; 0x2800 <puts+0x1c>
    2828:	8a e0       	ldi	r24, 0x0A	; 10
    282a:	19 95       	eicall
    282c:	89 2b       	or	r24, r25
    282e:	19 f0       	breq	.+6      	; 0x2836 <puts+0x52>
    2830:	8f ef       	ldi	r24, 0xFF	; 255
    2832:	9f ef       	ldi	r25, 0xFF	; 255
    2834:	02 c0       	rjmp	.+4      	; 0x283a <puts+0x56>
    2836:	8d 2f       	mov	r24, r29
    2838:	9c 2f       	mov	r25, r28
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <vfprintf>:
    2844:	2f 92       	push	r2
    2846:	3f 92       	push	r3
    2848:	4f 92       	push	r4
    284a:	5f 92       	push	r5
    284c:	6f 92       	push	r6
    284e:	7f 92       	push	r7
    2850:	8f 92       	push	r8
    2852:	9f 92       	push	r9
    2854:	af 92       	push	r10
    2856:	bf 92       	push	r11
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	2c 97       	sbiw	r28, 0x0c	; 12
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	7c 01       	movw	r14, r24
    287a:	6b 01       	movw	r12, r22
    287c:	8a 01       	movw	r16, r20
    287e:	fc 01       	movw	r30, r24
    2880:	17 82       	std	Z+7, r1	; 0x07
    2882:	16 82       	std	Z+6, r1	; 0x06
    2884:	83 81       	ldd	r24, Z+3	; 0x03
    2886:	81 ff       	sbrs	r24, 1
    2888:	b0 c1       	rjmp	.+864    	; 0x2bea <vfprintf+0x3a6>
    288a:	ce 01       	movw	r24, r28
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	4c 01       	movw	r8, r24
    2890:	f7 01       	movw	r30, r14
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	f6 01       	movw	r30, r12
    2896:	93 fd       	sbrc	r25, 3
    2898:	85 91       	lpm	r24, Z+
    289a:	93 ff       	sbrs	r25, 3
    289c:	81 91       	ld	r24, Z+
    289e:	6f 01       	movw	r12, r30
    28a0:	88 23       	and	r24, r24
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <vfprintf+0x62>
    28a4:	9e c1       	rjmp	.+828    	; 0x2be2 <vfprintf+0x39e>
    28a6:	85 32       	cpi	r24, 0x25	; 37
    28a8:	39 f4       	brne	.+14     	; 0x28b8 <vfprintf+0x74>
    28aa:	93 fd       	sbrc	r25, 3
    28ac:	85 91       	lpm	r24, Z+
    28ae:	93 ff       	sbrs	r25, 3
    28b0:	81 91       	ld	r24, Z+
    28b2:	6f 01       	movw	r12, r30
    28b4:	85 32       	cpi	r24, 0x25	; 37
    28b6:	21 f4       	brne	.+8      	; 0x28c0 <vfprintf+0x7c>
    28b8:	b7 01       	movw	r22, r14
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	15 d3       	rcall	.+1578   	; 0x2ee8 <fputc>
    28be:	e8 cf       	rjmp	.-48     	; 0x2890 <vfprintf+0x4c>
    28c0:	51 2c       	mov	r5, r1
    28c2:	31 2c       	mov	r3, r1
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	20 32       	cpi	r18, 0x20	; 32
    28c8:	a0 f4       	brcc	.+40     	; 0x28f2 <vfprintf+0xae>
    28ca:	8b 32       	cpi	r24, 0x2B	; 43
    28cc:	69 f0       	breq	.+26     	; 0x28e8 <vfprintf+0xa4>
    28ce:	30 f4       	brcc	.+12     	; 0x28dc <vfprintf+0x98>
    28d0:	80 32       	cpi	r24, 0x20	; 32
    28d2:	59 f0       	breq	.+22     	; 0x28ea <vfprintf+0xa6>
    28d4:	83 32       	cpi	r24, 0x23	; 35
    28d6:	69 f4       	brne	.+26     	; 0x28f2 <vfprintf+0xae>
    28d8:	20 61       	ori	r18, 0x10	; 16
    28da:	2c c0       	rjmp	.+88     	; 0x2934 <vfprintf+0xf0>
    28dc:	8d 32       	cpi	r24, 0x2D	; 45
    28de:	39 f0       	breq	.+14     	; 0x28ee <vfprintf+0xaa>
    28e0:	80 33       	cpi	r24, 0x30	; 48
    28e2:	39 f4       	brne	.+14     	; 0x28f2 <vfprintf+0xae>
    28e4:	21 60       	ori	r18, 0x01	; 1
    28e6:	26 c0       	rjmp	.+76     	; 0x2934 <vfprintf+0xf0>
    28e8:	22 60       	ori	r18, 0x02	; 2
    28ea:	24 60       	ori	r18, 0x04	; 4
    28ec:	23 c0       	rjmp	.+70     	; 0x2934 <vfprintf+0xf0>
    28ee:	28 60       	ori	r18, 0x08	; 8
    28f0:	21 c0       	rjmp	.+66     	; 0x2934 <vfprintf+0xf0>
    28f2:	27 fd       	sbrc	r18, 7
    28f4:	27 c0       	rjmp	.+78     	; 0x2944 <vfprintf+0x100>
    28f6:	30 ed       	ldi	r19, 0xD0	; 208
    28f8:	38 0f       	add	r19, r24
    28fa:	3a 30       	cpi	r19, 0x0A	; 10
    28fc:	78 f4       	brcc	.+30     	; 0x291c <vfprintf+0xd8>
    28fe:	26 ff       	sbrs	r18, 6
    2900:	06 c0       	rjmp	.+12     	; 0x290e <vfprintf+0xca>
    2902:	fa e0       	ldi	r31, 0x0A	; 10
    2904:	5f 9e       	mul	r5, r31
    2906:	30 0d       	add	r19, r0
    2908:	11 24       	eor	r1, r1
    290a:	53 2e       	mov	r5, r19
    290c:	13 c0       	rjmp	.+38     	; 0x2934 <vfprintf+0xf0>
    290e:	8a e0       	ldi	r24, 0x0A	; 10
    2910:	38 9e       	mul	r3, r24
    2912:	30 0d       	add	r19, r0
    2914:	11 24       	eor	r1, r1
    2916:	33 2e       	mov	r3, r19
    2918:	20 62       	ori	r18, 0x20	; 32
    291a:	0c c0       	rjmp	.+24     	; 0x2934 <vfprintf+0xf0>
    291c:	8e 32       	cpi	r24, 0x2E	; 46
    291e:	21 f4       	brne	.+8      	; 0x2928 <vfprintf+0xe4>
    2920:	26 fd       	sbrc	r18, 6
    2922:	5f c1       	rjmp	.+702    	; 0x2be2 <vfprintf+0x39e>
    2924:	20 64       	ori	r18, 0x40	; 64
    2926:	06 c0       	rjmp	.+12     	; 0x2934 <vfprintf+0xf0>
    2928:	8c 36       	cpi	r24, 0x6C	; 108
    292a:	11 f4       	brne	.+4      	; 0x2930 <vfprintf+0xec>
    292c:	20 68       	ori	r18, 0x80	; 128
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <vfprintf+0xf0>
    2930:	88 36       	cpi	r24, 0x68	; 104
    2932:	41 f4       	brne	.+16     	; 0x2944 <vfprintf+0x100>
    2934:	f6 01       	movw	r30, r12
    2936:	93 fd       	sbrc	r25, 3
    2938:	85 91       	lpm	r24, Z+
    293a:	93 ff       	sbrs	r25, 3
    293c:	81 91       	ld	r24, Z+
    293e:	6f 01       	movw	r12, r30
    2940:	81 11       	cpse	r24, r1
    2942:	c1 cf       	rjmp	.-126    	; 0x28c6 <vfprintf+0x82>
    2944:	98 2f       	mov	r25, r24
    2946:	9f 7d       	andi	r25, 0xDF	; 223
    2948:	95 54       	subi	r25, 0x45	; 69
    294a:	93 30       	cpi	r25, 0x03	; 3
    294c:	28 f4       	brcc	.+10     	; 0x2958 <vfprintf+0x114>
    294e:	0c 5f       	subi	r16, 0xFC	; 252
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	ff e3       	ldi	r31, 0x3F	; 63
    2954:	f9 83       	std	Y+1, r31	; 0x01
    2956:	0d c0       	rjmp	.+26     	; 0x2972 <vfprintf+0x12e>
    2958:	83 36       	cpi	r24, 0x63	; 99
    295a:	31 f0       	breq	.+12     	; 0x2968 <vfprintf+0x124>
    295c:	83 37       	cpi	r24, 0x73	; 115
    295e:	71 f0       	breq	.+28     	; 0x297c <vfprintf+0x138>
    2960:	83 35       	cpi	r24, 0x53	; 83
    2962:	09 f0       	breq	.+2      	; 0x2966 <vfprintf+0x122>
    2964:	57 c0       	rjmp	.+174    	; 0x2a14 <vfprintf+0x1d0>
    2966:	21 c0       	rjmp	.+66     	; 0x29aa <vfprintf+0x166>
    2968:	f8 01       	movw	r30, r16
    296a:	80 81       	ld	r24, Z
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	0e 5f       	subi	r16, 0xFE	; 254
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	44 24       	eor	r4, r4
    2974:	43 94       	inc	r4
    2976:	51 2c       	mov	r5, r1
    2978:	54 01       	movw	r10, r8
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <vfprintf+0x160>
    297c:	38 01       	movw	r6, r16
    297e:	f2 e0       	ldi	r31, 0x02	; 2
    2980:	6f 0e       	add	r6, r31
    2982:	71 1c       	adc	r7, r1
    2984:	f8 01       	movw	r30, r16
    2986:	a0 80       	ld	r10, Z
    2988:	b1 80       	ldd	r11, Z+1	; 0x01
    298a:	26 ff       	sbrs	r18, 6
    298c:	03 c0       	rjmp	.+6      	; 0x2994 <vfprintf+0x150>
    298e:	65 2d       	mov	r22, r5
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <vfprintf+0x154>
    2994:	6f ef       	ldi	r22, 0xFF	; 255
    2996:	7f ef       	ldi	r23, 0xFF	; 255
    2998:	c5 01       	movw	r24, r10
    299a:	2c 87       	std	Y+12, r18	; 0x0c
    299c:	9a d2       	rcall	.+1332   	; 0x2ed2 <strnlen>
    299e:	2c 01       	movw	r4, r24
    29a0:	83 01       	movw	r16, r6
    29a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    29a4:	2f 77       	andi	r18, 0x7F	; 127
    29a6:	22 2e       	mov	r2, r18
    29a8:	16 c0       	rjmp	.+44     	; 0x29d6 <vfprintf+0x192>
    29aa:	38 01       	movw	r6, r16
    29ac:	f2 e0       	ldi	r31, 0x02	; 2
    29ae:	6f 0e       	add	r6, r31
    29b0:	71 1c       	adc	r7, r1
    29b2:	f8 01       	movw	r30, r16
    29b4:	a0 80       	ld	r10, Z
    29b6:	b1 80       	ldd	r11, Z+1	; 0x01
    29b8:	26 ff       	sbrs	r18, 6
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <vfprintf+0x17e>
    29bc:	65 2d       	mov	r22, r5
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <vfprintf+0x182>
    29c2:	6f ef       	ldi	r22, 0xFF	; 255
    29c4:	7f ef       	ldi	r23, 0xFF	; 255
    29c6:	c5 01       	movw	r24, r10
    29c8:	2c 87       	std	Y+12, r18	; 0x0c
    29ca:	71 d2       	rcall	.+1250   	; 0x2eae <strnlen_P>
    29cc:	2c 01       	movw	r4, r24
    29ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    29d0:	20 68       	ori	r18, 0x80	; 128
    29d2:	22 2e       	mov	r2, r18
    29d4:	83 01       	movw	r16, r6
    29d6:	23 fc       	sbrc	r2, 3
    29d8:	19 c0       	rjmp	.+50     	; 0x2a0c <vfprintf+0x1c8>
    29da:	83 2d       	mov	r24, r3
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	48 16       	cp	r4, r24
    29e0:	59 06       	cpc	r5, r25
    29e2:	a0 f4       	brcc	.+40     	; 0x2a0c <vfprintf+0x1c8>
    29e4:	b7 01       	movw	r22, r14
    29e6:	80 e2       	ldi	r24, 0x20	; 32
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	7e d2       	rcall	.+1276   	; 0x2ee8 <fputc>
    29ec:	3a 94       	dec	r3
    29ee:	f5 cf       	rjmp	.-22     	; 0x29da <vfprintf+0x196>
    29f0:	f5 01       	movw	r30, r10
    29f2:	27 fc       	sbrc	r2, 7
    29f4:	85 91       	lpm	r24, Z+
    29f6:	27 fe       	sbrs	r2, 7
    29f8:	81 91       	ld	r24, Z+
    29fa:	5f 01       	movw	r10, r30
    29fc:	b7 01       	movw	r22, r14
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	73 d2       	rcall	.+1254   	; 0x2ee8 <fputc>
    2a02:	31 10       	cpse	r3, r1
    2a04:	3a 94       	dec	r3
    2a06:	f1 e0       	ldi	r31, 0x01	; 1
    2a08:	4f 1a       	sub	r4, r31
    2a0a:	51 08       	sbc	r5, r1
    2a0c:	41 14       	cp	r4, r1
    2a0e:	51 04       	cpc	r5, r1
    2a10:	79 f7       	brne	.-34     	; 0x29f0 <vfprintf+0x1ac>
    2a12:	de c0       	rjmp	.+444    	; 0x2bd0 <vfprintf+0x38c>
    2a14:	84 36       	cpi	r24, 0x64	; 100
    2a16:	11 f0       	breq	.+4      	; 0x2a1c <vfprintf+0x1d8>
    2a18:	89 36       	cpi	r24, 0x69	; 105
    2a1a:	31 f5       	brne	.+76     	; 0x2a68 <vfprintf+0x224>
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	27 ff       	sbrs	r18, 7
    2a20:	07 c0       	rjmp	.+14     	; 0x2a30 <vfprintf+0x1ec>
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	0c 5f       	subi	r16, 0xFC	; 252
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	08 c0       	rjmp	.+16     	; 0x2a40 <vfprintf+0x1fc>
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	07 2e       	mov	r0, r23
    2a36:	00 0c       	add	r0, r0
    2a38:	88 0b       	sbc	r24, r24
    2a3a:	99 0b       	sbc	r25, r25
    2a3c:	0e 5f       	subi	r16, 0xFE	; 254
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	2f 76       	andi	r18, 0x6F	; 111
    2a42:	72 2e       	mov	r7, r18
    2a44:	97 ff       	sbrs	r25, 7
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <vfprintf+0x216>
    2a48:	90 95       	com	r25
    2a4a:	80 95       	com	r24
    2a4c:	70 95       	com	r23
    2a4e:	61 95       	neg	r22
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	8f 4f       	sbci	r24, 0xFF	; 255
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	20 68       	ori	r18, 0x80	; 128
    2a58:	72 2e       	mov	r7, r18
    2a5a:	2a e0       	ldi	r18, 0x0A	; 10
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	a4 01       	movw	r20, r8
    2a60:	7b d2       	rcall	.+1270   	; 0x2f58 <__ultoa_invert>
    2a62:	a8 2e       	mov	r10, r24
    2a64:	a8 18       	sub	r10, r8
    2a66:	43 c0       	rjmp	.+134    	; 0x2aee <vfprintf+0x2aa>
    2a68:	85 37       	cpi	r24, 0x75	; 117
    2a6a:	29 f4       	brne	.+10     	; 0x2a76 <vfprintf+0x232>
    2a6c:	2f 7e       	andi	r18, 0xEF	; 239
    2a6e:	b2 2e       	mov	r11, r18
    2a70:	2a e0       	ldi	r18, 0x0A	; 10
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	25 c0       	rjmp	.+74     	; 0x2ac0 <vfprintf+0x27c>
    2a76:	f2 2f       	mov	r31, r18
    2a78:	f9 7f       	andi	r31, 0xF9	; 249
    2a7a:	bf 2e       	mov	r11, r31
    2a7c:	8f 36       	cpi	r24, 0x6F	; 111
    2a7e:	c1 f0       	breq	.+48     	; 0x2ab0 <vfprintf+0x26c>
    2a80:	18 f4       	brcc	.+6      	; 0x2a88 <vfprintf+0x244>
    2a82:	88 35       	cpi	r24, 0x58	; 88
    2a84:	79 f0       	breq	.+30     	; 0x2aa4 <vfprintf+0x260>
    2a86:	ad c0       	rjmp	.+346    	; 0x2be2 <vfprintf+0x39e>
    2a88:	80 37       	cpi	r24, 0x70	; 112
    2a8a:	19 f0       	breq	.+6      	; 0x2a92 <vfprintf+0x24e>
    2a8c:	88 37       	cpi	r24, 0x78	; 120
    2a8e:	21 f0       	breq	.+8      	; 0x2a98 <vfprintf+0x254>
    2a90:	a8 c0       	rjmp	.+336    	; 0x2be2 <vfprintf+0x39e>
    2a92:	2f 2f       	mov	r18, r31
    2a94:	20 61       	ori	r18, 0x10	; 16
    2a96:	b2 2e       	mov	r11, r18
    2a98:	b4 fe       	sbrs	r11, 4
    2a9a:	0d c0       	rjmp	.+26     	; 0x2ab6 <vfprintf+0x272>
    2a9c:	8b 2d       	mov	r24, r11
    2a9e:	84 60       	ori	r24, 0x04	; 4
    2aa0:	b8 2e       	mov	r11, r24
    2aa2:	09 c0       	rjmp	.+18     	; 0x2ab6 <vfprintf+0x272>
    2aa4:	24 ff       	sbrs	r18, 4
    2aa6:	0a c0       	rjmp	.+20     	; 0x2abc <vfprintf+0x278>
    2aa8:	9f 2f       	mov	r25, r31
    2aaa:	96 60       	ori	r25, 0x06	; 6
    2aac:	b9 2e       	mov	r11, r25
    2aae:	06 c0       	rjmp	.+12     	; 0x2abc <vfprintf+0x278>
    2ab0:	28 e0       	ldi	r18, 0x08	; 8
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	05 c0       	rjmp	.+10     	; 0x2ac0 <vfprintf+0x27c>
    2ab6:	20 e1       	ldi	r18, 0x10	; 16
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <vfprintf+0x27c>
    2abc:	20 e1       	ldi	r18, 0x10	; 16
    2abe:	32 e0       	ldi	r19, 0x02	; 2
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	b7 fe       	sbrs	r11, 7
    2ac4:	07 c0       	rjmp	.+14     	; 0x2ad4 <vfprintf+0x290>
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	0c 5f       	subi	r16, 0xFC	; 252
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	06 c0       	rjmp	.+12     	; 0x2ae0 <vfprintf+0x29c>
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 5f       	subi	r16, 0xFE	; 254
    2ade:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae0:	a4 01       	movw	r20, r8
    2ae2:	3a d2       	rcall	.+1140   	; 0x2f58 <__ultoa_invert>
    2ae4:	a8 2e       	mov	r10, r24
    2ae6:	a8 18       	sub	r10, r8
    2ae8:	fb 2d       	mov	r31, r11
    2aea:	ff 77       	andi	r31, 0x7F	; 127
    2aec:	7f 2e       	mov	r7, r31
    2aee:	76 fe       	sbrs	r7, 6
    2af0:	0b c0       	rjmp	.+22     	; 0x2b08 <vfprintf+0x2c4>
    2af2:	37 2d       	mov	r19, r7
    2af4:	3e 7f       	andi	r19, 0xFE	; 254
    2af6:	a5 14       	cp	r10, r5
    2af8:	50 f4       	brcc	.+20     	; 0x2b0e <vfprintf+0x2ca>
    2afa:	74 fe       	sbrs	r7, 4
    2afc:	0a c0       	rjmp	.+20     	; 0x2b12 <vfprintf+0x2ce>
    2afe:	72 fc       	sbrc	r7, 2
    2b00:	08 c0       	rjmp	.+16     	; 0x2b12 <vfprintf+0x2ce>
    2b02:	37 2d       	mov	r19, r7
    2b04:	3e 7e       	andi	r19, 0xEE	; 238
    2b06:	05 c0       	rjmp	.+10     	; 0x2b12 <vfprintf+0x2ce>
    2b08:	ba 2c       	mov	r11, r10
    2b0a:	37 2d       	mov	r19, r7
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <vfprintf+0x2d0>
    2b0e:	ba 2c       	mov	r11, r10
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <vfprintf+0x2d0>
    2b12:	b5 2c       	mov	r11, r5
    2b14:	34 ff       	sbrs	r19, 4
    2b16:	0d c0       	rjmp	.+26     	; 0x2b32 <vfprintf+0x2ee>
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ea 0d       	add	r30, r10
    2b1c:	f1 1d       	adc	r31, r1
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 33       	cpi	r24, 0x30	; 48
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <vfprintf+0x2e4>
    2b24:	39 7e       	andi	r19, 0xE9	; 233
    2b26:	09 c0       	rjmp	.+18     	; 0x2b3a <vfprintf+0x2f6>
    2b28:	32 ff       	sbrs	r19, 2
    2b2a:	06 c0       	rjmp	.+12     	; 0x2b38 <vfprintf+0x2f4>
    2b2c:	b3 94       	inc	r11
    2b2e:	b3 94       	inc	r11
    2b30:	04 c0       	rjmp	.+8      	; 0x2b3a <vfprintf+0x2f6>
    2b32:	83 2f       	mov	r24, r19
    2b34:	86 78       	andi	r24, 0x86	; 134
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <vfprintf+0x2f6>
    2b38:	b3 94       	inc	r11
    2b3a:	33 fd       	sbrc	r19, 3
    2b3c:	12 c0       	rjmp	.+36     	; 0x2b62 <vfprintf+0x31e>
    2b3e:	30 ff       	sbrs	r19, 0
    2b40:	06 c0       	rjmp	.+12     	; 0x2b4e <vfprintf+0x30a>
    2b42:	5a 2c       	mov	r5, r10
    2b44:	b3 14       	cp	r11, r3
    2b46:	18 f4       	brcc	.+6      	; 0x2b4e <vfprintf+0x30a>
    2b48:	53 0c       	add	r5, r3
    2b4a:	5b 18       	sub	r5, r11
    2b4c:	b3 2c       	mov	r11, r3
    2b4e:	b3 14       	cp	r11, r3
    2b50:	60 f4       	brcc	.+24     	; 0x2b6a <vfprintf+0x326>
    2b52:	b7 01       	movw	r22, r14
    2b54:	80 e2       	ldi	r24, 0x20	; 32
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	3c 87       	std	Y+12, r19	; 0x0c
    2b5a:	c6 d1       	rcall	.+908    	; 0x2ee8 <fputc>
    2b5c:	b3 94       	inc	r11
    2b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b60:	f6 cf       	rjmp	.-20     	; 0x2b4e <vfprintf+0x30a>
    2b62:	b3 14       	cp	r11, r3
    2b64:	10 f4       	brcc	.+4      	; 0x2b6a <vfprintf+0x326>
    2b66:	3b 18       	sub	r3, r11
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <vfprintf+0x328>
    2b6a:	31 2c       	mov	r3, r1
    2b6c:	34 ff       	sbrs	r19, 4
    2b6e:	11 c0       	rjmp	.+34     	; 0x2b92 <vfprintf+0x34e>
    2b70:	b7 01       	movw	r22, r14
    2b72:	80 e3       	ldi	r24, 0x30	; 48
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	3c 87       	std	Y+12, r19	; 0x0c
    2b78:	b7 d1       	rcall	.+878    	; 0x2ee8 <fputc>
    2b7a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b7c:	32 ff       	sbrs	r19, 2
    2b7e:	16 c0       	rjmp	.+44     	; 0x2bac <vfprintf+0x368>
    2b80:	31 fd       	sbrc	r19, 1
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <vfprintf+0x346>
    2b84:	88 e7       	ldi	r24, 0x78	; 120
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <vfprintf+0x34a>
    2b8a:	88 e5       	ldi	r24, 0x58	; 88
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b7 01       	movw	r22, r14
    2b90:	0c c0       	rjmp	.+24     	; 0x2baa <vfprintf+0x366>
    2b92:	83 2f       	mov	r24, r19
    2b94:	86 78       	andi	r24, 0x86	; 134
    2b96:	51 f0       	breq	.+20     	; 0x2bac <vfprintf+0x368>
    2b98:	31 ff       	sbrs	r19, 1
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0x35c>
    2b9c:	8b e2       	ldi	r24, 0x2B	; 43
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <vfprintf+0x35e>
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	37 fd       	sbrc	r19, 7
    2ba4:	8d e2       	ldi	r24, 0x2D	; 45
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9e d1       	rcall	.+828    	; 0x2ee8 <fputc>
    2bac:	a5 14       	cp	r10, r5
    2bae:	30 f4       	brcc	.+12     	; 0x2bbc <vfprintf+0x378>
    2bb0:	b7 01       	movw	r22, r14
    2bb2:	80 e3       	ldi	r24, 0x30	; 48
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	98 d1       	rcall	.+816    	; 0x2ee8 <fputc>
    2bb8:	5a 94       	dec	r5
    2bba:	f8 cf       	rjmp	.-16     	; 0x2bac <vfprintf+0x368>
    2bbc:	aa 94       	dec	r10
    2bbe:	f4 01       	movw	r30, r8
    2bc0:	ea 0d       	add	r30, r10
    2bc2:	f1 1d       	adc	r31, r1
    2bc4:	80 81       	ld	r24, Z
    2bc6:	b7 01       	movw	r22, r14
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	8e d1       	rcall	.+796    	; 0x2ee8 <fputc>
    2bcc:	a1 10       	cpse	r10, r1
    2bce:	f6 cf       	rjmp	.-20     	; 0x2bbc <vfprintf+0x378>
    2bd0:	33 20       	and	r3, r3
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <vfprintf+0x392>
    2bd4:	5d ce       	rjmp	.-838    	; 0x2890 <vfprintf+0x4c>
    2bd6:	b7 01       	movw	r22, r14
    2bd8:	80 e2       	ldi	r24, 0x20	; 32
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	85 d1       	rcall	.+778    	; 0x2ee8 <fputc>
    2bde:	3a 94       	dec	r3
    2be0:	f7 cf       	rjmp	.-18     	; 0x2bd0 <vfprintf+0x38c>
    2be2:	f7 01       	movw	r30, r14
    2be4:	86 81       	ldd	r24, Z+6	; 0x06
    2be6:	97 81       	ldd	r25, Z+7	; 0x07
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <vfprintf+0x3aa>
    2bea:	8f ef       	ldi	r24, 0xFF	; 255
    2bec:	9f ef       	ldi	r25, 0xFF	; 255
    2bee:	2c 96       	adiw	r28, 0x0c	; 12
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	bf 90       	pop	r11
    2c0c:	af 90       	pop	r10
    2c0e:	9f 90       	pop	r9
    2c10:	8f 90       	pop	r8
    2c12:	7f 90       	pop	r7
    2c14:	6f 90       	pop	r6
    2c16:	5f 90       	pop	r5
    2c18:	4f 90       	pop	r4
    2c1a:	3f 90       	pop	r3
    2c1c:	2f 90       	pop	r2
    2c1e:	08 95       	ret

00002c20 <calloc>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	86 9f       	mul	r24, r22
    2c2a:	80 01       	movw	r16, r0
    2c2c:	87 9f       	mul	r24, r23
    2c2e:	10 0d       	add	r17, r0
    2c30:	96 9f       	mul	r25, r22
    2c32:	10 0d       	add	r17, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	c8 01       	movw	r24, r16
    2c38:	0d d0       	rcall	.+26     	; 0x2c54 <malloc>
    2c3a:	ec 01       	movw	r28, r24
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	21 f0       	breq	.+8      	; 0x2c48 <calloc+0x28>
    2c40:	a8 01       	movw	r20, r16
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	3e d1       	rcall	.+636    	; 0x2ec4 <memset>
    2c48:	ce 01       	movw	r24, r28
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <malloc>:
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	82 30       	cpi	r24, 0x02	; 2
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <malloc+0xe>
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	e0 91 94 0c 	lds	r30, 0x0C94	; 0x800c94 <__flp>
    2c66:	f0 91 95 0c 	lds	r31, 0x0C95	; 0x800c95 <__flp+0x1>
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	c0 e0       	ldi	r28, 0x00	; 0
    2c70:	d0 e0       	ldi	r29, 0x00	; 0
    2c72:	30 97       	sbiw	r30, 0x00	; 0
    2c74:	11 f1       	breq	.+68     	; 0x2cba <malloc+0x66>
    2c76:	40 81       	ld	r20, Z
    2c78:	51 81       	ldd	r21, Z+1	; 0x01
    2c7a:	48 17       	cp	r20, r24
    2c7c:	59 07       	cpc	r21, r25
    2c7e:	c0 f0       	brcs	.+48     	; 0x2cb0 <malloc+0x5c>
    2c80:	48 17       	cp	r20, r24
    2c82:	59 07       	cpc	r21, r25
    2c84:	61 f4       	brne	.+24     	; 0x2c9e <malloc+0x4a>
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 97       	sbiw	r28, 0x00	; 0
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <malloc+0x40>
    2c8e:	9b 83       	std	Y+3, r25	; 0x03
    2c90:	8a 83       	std	Y+2, r24	; 0x02
    2c92:	2b c0       	rjmp	.+86     	; 0x2cea <malloc+0x96>
    2c94:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <__flp+0x1>
    2c98:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <__flp>
    2c9c:	26 c0       	rjmp	.+76     	; 0x2cea <malloc+0x96>
    2c9e:	21 15       	cp	r18, r1
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	19 f0       	breq	.+6      	; 0x2caa <malloc+0x56>
    2ca4:	42 17       	cp	r20, r18
    2ca6:	53 07       	cpc	r21, r19
    2ca8:	18 f4       	brcc	.+6      	; 0x2cb0 <malloc+0x5c>
    2caa:	9a 01       	movw	r18, r20
    2cac:	be 01       	movw	r22, r28
    2cae:	df 01       	movw	r26, r30
    2cb0:	ef 01       	movw	r28, r30
    2cb2:	02 80       	ldd	r0, Z+2	; 0x02
    2cb4:	f3 81       	ldd	r31, Z+3	; 0x03
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	dc cf       	rjmp	.-72     	; 0x2c72 <malloc+0x1e>
    2cba:	21 15       	cp	r18, r1
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	09 f1       	breq	.+66     	; 0x2d02 <malloc+0xae>
    2cc0:	28 1b       	sub	r18, r24
    2cc2:	39 0b       	sbc	r19, r25
    2cc4:	24 30       	cpi	r18, 0x04	; 4
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	90 f4       	brcc	.+36     	; 0x2cee <malloc+0x9a>
    2cca:	12 96       	adiw	r26, 0x02	; 2
    2ccc:	8d 91       	ld	r24, X+
    2cce:	9c 91       	ld	r25, X
    2cd0:	13 97       	sbiw	r26, 0x03	; 3
    2cd2:	61 15       	cp	r22, r1
    2cd4:	71 05       	cpc	r23, r1
    2cd6:	21 f0       	breq	.+8      	; 0x2ce0 <malloc+0x8c>
    2cd8:	fb 01       	movw	r30, r22
    2cda:	93 83       	std	Z+3, r25	; 0x03
    2cdc:	82 83       	std	Z+2, r24	; 0x02
    2cde:	04 c0       	rjmp	.+8      	; 0x2ce8 <malloc+0x94>
    2ce0:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <__flp+0x1>
    2ce4:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <__flp>
    2ce8:	fd 01       	movw	r30, r26
    2cea:	32 96       	adiw	r30, 0x02	; 2
    2cec:	44 c0       	rjmp	.+136    	; 0x2d76 <malloc+0x122>
    2cee:	fd 01       	movw	r30, r26
    2cf0:	e2 0f       	add	r30, r18
    2cf2:	f3 1f       	adc	r31, r19
    2cf4:	81 93       	st	Z+, r24
    2cf6:	91 93       	st	Z+, r25
    2cf8:	22 50       	subi	r18, 0x02	; 2
    2cfa:	31 09       	sbc	r19, r1
    2cfc:	2d 93       	st	X+, r18
    2cfe:	3c 93       	st	X, r19
    2d00:	3a c0       	rjmp	.+116    	; 0x2d76 <malloc+0x122>
    2d02:	20 91 92 0c 	lds	r18, 0x0C92	; 0x800c92 <__brkval>
    2d06:	30 91 93 0c 	lds	r19, 0x0C93	; 0x800c93 <__brkval+0x1>
    2d0a:	23 2b       	or	r18, r19
    2d0c:	41 f4       	brne	.+16     	; 0x2d1e <malloc+0xca>
    2d0e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_start>
    2d12:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_start+0x1>
    2d16:	30 93 93 0c 	sts	0x0C93, r19	; 0x800c93 <__brkval+0x1>
    2d1a:	20 93 92 0c 	sts	0x0C92, r18	; 0x800c92 <__brkval>
    2d1e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_end>
    2d22:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_end+0x1>
    2d26:	21 15       	cp	r18, r1
    2d28:	31 05       	cpc	r19, r1
    2d2a:	41 f4       	brne	.+16     	; 0x2d3c <malloc+0xe8>
    2d2c:	2d b7       	in	r18, 0x3d	; 61
    2d2e:	3e b7       	in	r19, 0x3e	; 62
    2d30:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__malloc_margin>
    2d34:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__malloc_margin+0x1>
    2d38:	24 1b       	sub	r18, r20
    2d3a:	35 0b       	sbc	r19, r21
    2d3c:	e0 91 92 0c 	lds	r30, 0x0C92	; 0x800c92 <__brkval>
    2d40:	f0 91 93 0c 	lds	r31, 0x0C93	; 0x800c93 <__brkval+0x1>
    2d44:	e2 17       	cp	r30, r18
    2d46:	f3 07       	cpc	r31, r19
    2d48:	a0 f4       	brcc	.+40     	; 0x2d72 <malloc+0x11e>
    2d4a:	2e 1b       	sub	r18, r30
    2d4c:	3f 0b       	sbc	r19, r31
    2d4e:	28 17       	cp	r18, r24
    2d50:	39 07       	cpc	r19, r25
    2d52:	78 f0       	brcs	.+30     	; 0x2d72 <malloc+0x11e>
    2d54:	ac 01       	movw	r20, r24
    2d56:	4e 5f       	subi	r20, 0xFE	; 254
    2d58:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5a:	24 17       	cp	r18, r20
    2d5c:	35 07       	cpc	r19, r21
    2d5e:	48 f0       	brcs	.+18     	; 0x2d72 <malloc+0x11e>
    2d60:	4e 0f       	add	r20, r30
    2d62:	5f 1f       	adc	r21, r31
    2d64:	50 93 93 0c 	sts	0x0C93, r21	; 0x800c93 <__brkval+0x1>
    2d68:	40 93 92 0c 	sts	0x0C92, r20	; 0x800c92 <__brkval>
    2d6c:	81 93       	st	Z+, r24
    2d6e:	91 93       	st	Z+, r25
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <malloc+0x122>
    2d72:	e0 e0       	ldi	r30, 0x00	; 0
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	cf 01       	movw	r24, r30
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <free>:
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <free+0xe>
    2d8a:	8c c0       	rjmp	.+280    	; 0x2ea4 <free+0x126>
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	32 97       	sbiw	r30, 0x02	; 2
    2d90:	13 82       	std	Z+3, r1	; 0x03
    2d92:	12 82       	std	Z+2, r1	; 0x02
    2d94:	00 91 94 0c 	lds	r16, 0x0C94	; 0x800c94 <__flp>
    2d98:	10 91 95 0c 	lds	r17, 0x0C95	; 0x800c95 <__flp+0x1>
    2d9c:	01 15       	cp	r16, r1
    2d9e:	11 05       	cpc	r17, r1
    2da0:	81 f4       	brne	.+32     	; 0x2dc2 <free+0x44>
    2da2:	20 81       	ld	r18, Z
    2da4:	31 81       	ldd	r19, Z+1	; 0x01
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	20 91 92 0c 	lds	r18, 0x0C92	; 0x800c92 <__brkval>
    2dae:	30 91 93 0c 	lds	r19, 0x0C93	; 0x800c93 <__brkval+0x1>
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	79 f5       	brne	.+94     	; 0x2e16 <free+0x98>
    2db8:	f0 93 93 0c 	sts	0x0C93, r31	; 0x800c93 <__brkval+0x1>
    2dbc:	e0 93 92 0c 	sts	0x0C92, r30	; 0x800c92 <__brkval>
    2dc0:	71 c0       	rjmp	.+226    	; 0x2ea4 <free+0x126>
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	ae 17       	cp	r26, r30
    2dca:	bf 07       	cpc	r27, r31
    2dcc:	50 f4       	brcc	.+20     	; 0x2de2 <free+0x64>
    2dce:	12 96       	adiw	r26, 0x02	; 2
    2dd0:	2d 91       	ld	r18, X+
    2dd2:	3c 91       	ld	r19, X
    2dd4:	13 97       	sbiw	r26, 0x03	; 3
    2dd6:	ad 01       	movw	r20, r26
    2dd8:	21 15       	cp	r18, r1
    2dda:	31 05       	cpc	r19, r1
    2ddc:	09 f1       	breq	.+66     	; 0x2e20 <free+0xa2>
    2dde:	d9 01       	movw	r26, r18
    2de0:	f3 cf       	rjmp	.-26     	; 0x2dc8 <free+0x4a>
    2de2:	9d 01       	movw	r18, r26
    2de4:	da 01       	movw	r26, r20
    2de6:	33 83       	std	Z+3, r19	; 0x03
    2de8:	22 83       	std	Z+2, r18	; 0x02
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	86 0f       	add	r24, r22
    2df0:	97 1f       	adc	r25, r23
    2df2:	82 17       	cp	r24, r18
    2df4:	93 07       	cpc	r25, r19
    2df6:	69 f4       	brne	.+26     	; 0x2e12 <free+0x94>
    2df8:	ec 01       	movw	r28, r24
    2dfa:	28 81       	ld	r18, Y
    2dfc:	39 81       	ldd	r19, Y+1	; 0x01
    2dfe:	26 0f       	add	r18, r22
    2e00:	37 1f       	adc	r19, r23
    2e02:	2e 5f       	subi	r18, 0xFE	; 254
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
    2e06:	31 83       	std	Z+1, r19	; 0x01
    2e08:	20 83       	st	Z, r18
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0e:	93 83       	std	Z+3, r25	; 0x03
    2e10:	82 83       	std	Z+2, r24	; 0x02
    2e12:	45 2b       	or	r20, r21
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <free+0xa2>
    2e16:	f0 93 95 0c 	sts	0x0C95, r31	; 0x800c95 <__flp+0x1>
    2e1a:	e0 93 94 0c 	sts	0x0C94, r30	; 0x800c94 <__flp>
    2e1e:	42 c0       	rjmp	.+132    	; 0x2ea4 <free+0x126>
    2e20:	13 96       	adiw	r26, 0x03	; 3
    2e22:	fc 93       	st	X, r31
    2e24:	ee 93       	st	-X, r30
    2e26:	12 97       	sbiw	r26, 0x02	; 2
    2e28:	ed 01       	movw	r28, r26
    2e2a:	49 91       	ld	r20, Y+
    2e2c:	59 91       	ld	r21, Y+
    2e2e:	9e 01       	movw	r18, r28
    2e30:	24 0f       	add	r18, r20
    2e32:	35 1f       	adc	r19, r21
    2e34:	e2 17       	cp	r30, r18
    2e36:	f3 07       	cpc	r31, r19
    2e38:	71 f4       	brne	.+28     	; 0x2e56 <free+0xd8>
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	84 0f       	add	r24, r20
    2e40:	95 1f       	adc	r25, r21
    2e42:	02 96       	adiw	r24, 0x02	; 2
    2e44:	11 96       	adiw	r26, 0x01	; 1
    2e46:	9c 93       	st	X, r25
    2e48:	8e 93       	st	-X, r24
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	13 96       	adiw	r26, 0x03	; 3
    2e50:	9c 93       	st	X, r25
    2e52:	8e 93       	st	-X, r24
    2e54:	12 97       	sbiw	r26, 0x02	; 2
    2e56:	e0 e0       	ldi	r30, 0x00	; 0
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	d8 01       	movw	r26, r16
    2e5c:	12 96       	adiw	r26, 0x02	; 2
    2e5e:	8d 91       	ld	r24, X+
    2e60:	9c 91       	ld	r25, X
    2e62:	13 97       	sbiw	r26, 0x03	; 3
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	19 f0       	breq	.+6      	; 0x2e6e <free+0xf0>
    2e68:	f8 01       	movw	r30, r16
    2e6a:	8c 01       	movw	r16, r24
    2e6c:	f6 cf       	rjmp	.-20     	; 0x2e5a <free+0xdc>
    2e6e:	8d 91       	ld	r24, X+
    2e70:	9c 91       	ld	r25, X
    2e72:	98 01       	movw	r18, r16
    2e74:	2e 5f       	subi	r18, 0xFE	; 254
    2e76:	3f 4f       	sbci	r19, 0xFF	; 255
    2e78:	82 0f       	add	r24, r18
    2e7a:	93 1f       	adc	r25, r19
    2e7c:	20 91 92 0c 	lds	r18, 0x0C92	; 0x800c92 <__brkval>
    2e80:	30 91 93 0c 	lds	r19, 0x0C93	; 0x800c93 <__brkval+0x1>
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	69 f4       	brne	.+26     	; 0x2ea4 <free+0x126>
    2e8a:	30 97       	sbiw	r30, 0x00	; 0
    2e8c:	29 f4       	brne	.+10     	; 0x2e98 <free+0x11a>
    2e8e:	10 92 95 0c 	sts	0x0C95, r1	; 0x800c95 <__flp+0x1>
    2e92:	10 92 94 0c 	sts	0x0C94, r1	; 0x800c94 <__flp>
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <free+0x11e>
    2e98:	13 82       	std	Z+3, r1	; 0x03
    2e9a:	12 82       	std	Z+2, r1	; 0x02
    2e9c:	10 93 93 0c 	sts	0x0C93, r17	; 0x800c93 <__brkval+0x1>
    2ea0:	00 93 92 0c 	sts	0x0C92, r16	; 0x800c92 <__brkval>
    2ea4:	df 91       	pop	r29
    2ea6:	cf 91       	pop	r28
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	08 95       	ret

00002eae <strnlen_P>:
    2eae:	fc 01       	movw	r30, r24
    2eb0:	05 90       	lpm	r0, Z+
    2eb2:	61 50       	subi	r22, 0x01	; 1
    2eb4:	70 40       	sbci	r23, 0x00	; 0
    2eb6:	01 10       	cpse	r0, r1
    2eb8:	d8 f7       	brcc	.-10     	; 0x2eb0 <strnlen_P+0x2>
    2eba:	80 95       	com	r24
    2ebc:	90 95       	com	r25
    2ebe:	8e 0f       	add	r24, r30
    2ec0:	9f 1f       	adc	r25, r31
    2ec2:	08 95       	ret

00002ec4 <memset>:
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <memset+0x6>
    2ec8:	6d 93       	st	X+, r22
    2eca:	41 50       	subi	r20, 0x01	; 1
    2ecc:	50 40       	sbci	r21, 0x00	; 0
    2ece:	e0 f7       	brcc	.-8      	; 0x2ec8 <memset+0x4>
    2ed0:	08 95       	ret

00002ed2 <strnlen>:
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	61 50       	subi	r22, 0x01	; 1
    2ed6:	70 40       	sbci	r23, 0x00	; 0
    2ed8:	01 90       	ld	r0, Z+
    2eda:	01 10       	cpse	r0, r1
    2edc:	d8 f7       	brcc	.-10     	; 0x2ed4 <strnlen+0x2>
    2ede:	80 95       	com	r24
    2ee0:	90 95       	com	r25
    2ee2:	8e 0f       	add	r24, r30
    2ee4:	9f 1f       	adc	r25, r31
    2ee6:	08 95       	ret

00002ee8 <fputc>:
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	fb 01       	movw	r30, r22
    2ef2:	23 81       	ldd	r18, Z+3	; 0x03
    2ef4:	21 fd       	sbrc	r18, 1
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <fputc+0x16>
    2ef8:	8f ef       	ldi	r24, 0xFF	; 255
    2efa:	9f ef       	ldi	r25, 0xFF	; 255
    2efc:	28 c0       	rjmp	.+80     	; 0x2f4e <fputc+0x66>
    2efe:	22 ff       	sbrs	r18, 2
    2f00:	16 c0       	rjmp	.+44     	; 0x2f2e <fputc+0x46>
    2f02:	46 81       	ldd	r20, Z+6	; 0x06
    2f04:	57 81       	ldd	r21, Z+7	; 0x07
    2f06:	24 81       	ldd	r18, Z+4	; 0x04
    2f08:	35 81       	ldd	r19, Z+5	; 0x05
    2f0a:	42 17       	cp	r20, r18
    2f0c:	53 07       	cpc	r21, r19
    2f0e:	44 f4       	brge	.+16     	; 0x2f20 <fputc+0x38>
    2f10:	a0 81       	ld	r26, Z
    2f12:	b1 81       	ldd	r27, Z+1	; 0x01
    2f14:	9d 01       	movw	r18, r26
    2f16:	2f 5f       	subi	r18, 0xFF	; 255
    2f18:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1a:	31 83       	std	Z+1, r19	; 0x01
    2f1c:	20 83       	st	Z, r18
    2f1e:	8c 93       	st	X, r24
    2f20:	26 81       	ldd	r18, Z+6	; 0x06
    2f22:	37 81       	ldd	r19, Z+7	; 0x07
    2f24:	2f 5f       	subi	r18, 0xFF	; 255
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	37 83       	std	Z+7, r19	; 0x07
    2f2a:	26 83       	std	Z+6, r18	; 0x06
    2f2c:	10 c0       	rjmp	.+32     	; 0x2f4e <fputc+0x66>
    2f2e:	eb 01       	movw	r28, r22
    2f30:	09 2f       	mov	r16, r25
    2f32:	18 2f       	mov	r17, r24
    2f34:	00 84       	ldd	r0, Z+8	; 0x08
    2f36:	f1 85       	ldd	r31, Z+9	; 0x09
    2f38:	e0 2d       	mov	r30, r0
    2f3a:	19 95       	eicall
    2f3c:	89 2b       	or	r24, r25
    2f3e:	e1 f6       	brne	.-72     	; 0x2ef8 <fputc+0x10>
    2f40:	8e 81       	ldd	r24, Y+6	; 0x06
    2f42:	9f 81       	ldd	r25, Y+7	; 0x07
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	9f 83       	std	Y+7, r25	; 0x07
    2f48:	8e 83       	std	Y+6, r24	; 0x06
    2f4a:	81 2f       	mov	r24, r17
    2f4c:	90 2f       	mov	r25, r16
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	08 95       	ret

00002f58 <__ultoa_invert>:
    2f58:	fa 01       	movw	r30, r20
    2f5a:	aa 27       	eor	r26, r26
    2f5c:	28 30       	cpi	r18, 0x08	; 8
    2f5e:	51 f1       	breq	.+84     	; 0x2fb4 <__ultoa_invert+0x5c>
    2f60:	20 31       	cpi	r18, 0x10	; 16
    2f62:	81 f1       	breq	.+96     	; 0x2fc4 <__ultoa_invert+0x6c>
    2f64:	e8 94       	clt
    2f66:	6f 93       	push	r22
    2f68:	6e 7f       	andi	r22, 0xFE	; 254
    2f6a:	6e 5f       	subi	r22, 0xFE	; 254
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	af 4f       	sbci	r26, 0xFF	; 255
    2f74:	b1 e0       	ldi	r27, 0x01	; 1
    2f76:	3e d0       	rcall	.+124    	; 0x2ff4 <__ultoa_invert+0x9c>
    2f78:	b4 e0       	ldi	r27, 0x04	; 4
    2f7a:	3c d0       	rcall	.+120    	; 0x2ff4 <__ultoa_invert+0x9c>
    2f7c:	67 0f       	add	r22, r23
    2f7e:	78 1f       	adc	r23, r24
    2f80:	89 1f       	adc	r24, r25
    2f82:	9a 1f       	adc	r25, r26
    2f84:	a1 1d       	adc	r26, r1
    2f86:	68 0f       	add	r22, r24
    2f88:	79 1f       	adc	r23, r25
    2f8a:	8a 1f       	adc	r24, r26
    2f8c:	91 1d       	adc	r25, r1
    2f8e:	a1 1d       	adc	r26, r1
    2f90:	6a 0f       	add	r22, r26
    2f92:	71 1d       	adc	r23, r1
    2f94:	81 1d       	adc	r24, r1
    2f96:	91 1d       	adc	r25, r1
    2f98:	a1 1d       	adc	r26, r1
    2f9a:	20 d0       	rcall	.+64     	; 0x2fdc <__ultoa_invert+0x84>
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <__ultoa_invert+0x48>
    2f9e:	68 94       	set
    2fa0:	3f 91       	pop	r19
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	26 9f       	mul	r18, r22
    2fa6:	11 24       	eor	r1, r1
    2fa8:	30 19       	sub	r19, r0
    2faa:	30 5d       	subi	r19, 0xD0	; 208
    2fac:	31 93       	st	Z+, r19
    2fae:	de f6       	brtc	.-74     	; 0x2f66 <__ultoa_invert+0xe>
    2fb0:	cf 01       	movw	r24, r30
    2fb2:	08 95       	ret
    2fb4:	46 2f       	mov	r20, r22
    2fb6:	47 70       	andi	r20, 0x07	; 7
    2fb8:	40 5d       	subi	r20, 0xD0	; 208
    2fba:	41 93       	st	Z+, r20
    2fbc:	b3 e0       	ldi	r27, 0x03	; 3
    2fbe:	0f d0       	rcall	.+30     	; 0x2fde <__ultoa_invert+0x86>
    2fc0:	c9 f7       	brne	.-14     	; 0x2fb4 <__ultoa_invert+0x5c>
    2fc2:	f6 cf       	rjmp	.-20     	; 0x2fb0 <__ultoa_invert+0x58>
    2fc4:	46 2f       	mov	r20, r22
    2fc6:	4f 70       	andi	r20, 0x0F	; 15
    2fc8:	40 5d       	subi	r20, 0xD0	; 208
    2fca:	4a 33       	cpi	r20, 0x3A	; 58
    2fcc:	18 f0       	brcs	.+6      	; 0x2fd4 <__ultoa_invert+0x7c>
    2fce:	49 5d       	subi	r20, 0xD9	; 217
    2fd0:	31 fd       	sbrc	r19, 1
    2fd2:	40 52       	subi	r20, 0x20	; 32
    2fd4:	41 93       	st	Z+, r20
    2fd6:	02 d0       	rcall	.+4      	; 0x2fdc <__ultoa_invert+0x84>
    2fd8:	a9 f7       	brne	.-22     	; 0x2fc4 <__ultoa_invert+0x6c>
    2fda:	ea cf       	rjmp	.-44     	; 0x2fb0 <__ultoa_invert+0x58>
    2fdc:	b4 e0       	ldi	r27, 0x04	; 4
    2fde:	a6 95       	lsr	r26
    2fe0:	97 95       	ror	r25
    2fe2:	87 95       	ror	r24
    2fe4:	77 95       	ror	r23
    2fe6:	67 95       	ror	r22
    2fe8:	ba 95       	dec	r27
    2fea:	c9 f7       	brne	.-14     	; 0x2fde <__ultoa_invert+0x86>
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	61 05       	cpc	r22, r1
    2ff0:	71 05       	cpc	r23, r1
    2ff2:	08 95       	ret
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	0a 2e       	mov	r0, r26
    2ffa:	06 94       	lsr	r0
    2ffc:	57 95       	ror	r21
    2ffe:	47 95       	ror	r20
    3000:	37 95       	ror	r19
    3002:	27 95       	ror	r18
    3004:	ba 95       	dec	r27
    3006:	c9 f7       	brne	.-14     	; 0x2ffa <__ultoa_invert+0xa2>
    3008:	62 0f       	add	r22, r18
    300a:	73 1f       	adc	r23, r19
    300c:	84 1f       	adc	r24, r20
    300e:	95 1f       	adc	r25, r21
    3010:	a0 1d       	adc	r26, r0
    3012:	08 95       	ret

00003014 <_exit>:
    3014:	f8 94       	cli

00003016 <__stop_program>:
    3016:	ff cf       	rjmp	.-2      	; 0x3016 <__stop_program>
